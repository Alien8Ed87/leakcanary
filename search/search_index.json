{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LeakCanary \ud83d\udc24 \u00b6 LeakCanary is a memory leak detection library for Android. LeakCanary\u2019s knowledge of the internals of the Android Framework gives it a unique ability to narrow down the cause of each leak, helping developers dramatically reduce OutOfMemoryError crashes. Get started! Quote \u201cA small leak will sink a great ship.\u201d - Benjamin Franklin","title":"Overview"},{"location":"#leakcanary","text":"LeakCanary is a memory leak detection library for Android. LeakCanary\u2019s knowledge of the internals of the Android Framework gives it a unique ability to narrow down the cause of each leak, helping developers dramatically reduce OutOfMemoryError crashes. Get started! Quote \u201cA small leak will sink a great ship.\u201d - Benjamin Franklin","title":"LeakCanary \ud83d\udc24"},{"location":"blog-articles/","text":"Memory Leaks in Android Detect memory leaks in your instrumentation tests using LeakCanary 9 ways to avoid memory leaks in Android LeakCanary - Deobfuscation Feature Explained LeakCanary - An in-depth example of Android memory-leaks in MVP architecture Detecting memory leaks in Android applications Your article should be here, please update this list! Any technical level welcome.","title":"Blog Articles"},{"location":"changelog/","text":"Change Log \u00b6 Version 2.8.1 (2022-01-06) \u00b6 This is a bugfix release, a quick follow up to 2.8 which had a few major issues \ud83d\ude05. If you haven\u2019t yet, you should definitely read the 2.8 changelog. Thanks \u00b6 Please thank @dicosta , @Goooler , @plnice , @preetha1326 for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f. Crash fixes \ud83d\udca5\ud83d\udca5\ud83d\udca5 \u00b6 This patch release fixes not 1, not 2, but 3 crashes! \ud83d\udca5 #2268 WorkManager expedited request crashes before API 31. \ud83d\udca5 #2270 Updating LeakCanary.config crashes when AppWatcher is not installed. \ud83d\udca5 #2271 Analysis failure on API 25 because HashMap$Entry became HashMap$HashMapEntry (on API 25) before it finally changed to HashMap$Node . For more details, see the 2.8.1 Milestone and the full diff . Version 2.8 (2022-01-04) \u00b6 Note: please update to 2.8.1 instead. Preface \u00b6 The last release was 9 months ago. What happened?! Well, soon after releasing LeakCanary 2.7, I had my 2 nd baby, a wonderful daughter \ud83d\ude0d. Having 2 young kids leaves a lot less time available for Open Source work\u2026 but it\u2019s worth it! \u2015 P.Y. Thanks \u00b6 Please thank @aaronweihe , @alhah , @Andre-max , @AoraMD , @BraisGabin , @breezenan , @Goooler , @iliaskomp @Jeff11 , @jmnwong , @IdioticMadman , @keyur1sst , @lchen8 , @leinardi , @Maragues , @mars885 , @mateuszkwiecinski , @matiash , @maxxx , @preetha1326 , @SimonMarquis , @slavonnet , @Sonphil , @summerlyr , @SUPERCILEX , @utwyko , @ZacSweers , @ziranshang , @zoltish for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f. Improved support for data structure internals \u00b6 \ud83e\udd13 Inspired by Android Studio , LeakCanary\u2019s node discovery during heap graph traversal is now abstracted away. This allows overlaying logical structure over common data structure internals. \ud83d\ude05 WHAT?! \ud83d\udc49 This means we can make known data structures look more like their APIs than their internals. For example, developers tend to think of setting a HashMap entry as map[\"key\"] = value rather than map.table[hash(\"key\")].next.next.next = Node(value) , which is what LeakCanary would previously show in its leak traces. Let\u2019s look at a HashMap example: class CheckoutController { val tabs = HashMap < String , Tab >() fun addItemsTab ( tab : Tab ) { tabs [ \"ItemsTab\" ] = tab } } If the Tab instance holds on to a view, we might see a leak trace that would look like this: \u2502 ... \u251c\u2500 com.example.CheckoutController instance \u2502 \u2193 CheckoutController.tabs \u251c\u2500 java.util.HashMap instance \u2502 \u2193 HashMap.table \u251c\u2500 java.util.HashMap$Node[] array \u2502 \u2193 HashMap$Node[42] \u251c\u2500 java.util.HashMap$Node instance \u2502 \u2193 HashMap$Node.next \u251c\u2500 java.util.HashMap$Node instance \u2502 \u2193 HashMap$Node.value \u251c\u2500 com.example.Tab instance \u2502 ... With the improved data structure support, the leak trace is much clearer (also note how the ItemsTab string key is now surfaced): \u2502 ... \u251c\u2500 com.example.CheckoutController instance \u2502 \u2193 CheckoutController.tabs \u251c\u2500 java.util.HashMap instance \u2502 \u2193 HashMap[ItemsTab] \u251c\u2500 com.example.Tab instance \u2502 ... Another benefit of this change is that leak signatures become less dependent of the runtime, and therefore are more consistent. This is especially true for any data structure that relies on a linked list ( HashMap , LinkedList , MessageQueue , \u2026). Currently LeakCanary supports a limited set of common data structures from Apache Harmony, Open JDK, and the Android SDK. Let me know what else you need! ObjectAnimator leaks \u00b6 LeakCanary will now detect leaks that trigger when forgetting to cancel ObjectAnimator . This new feature is enabled by the node discovery changes described above! Let\u2019s say you accidentally start an infinite ObjectAnimator and never cancel it, like so: class ExampleActivity : Activity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . main_activity ) findViewById < Button >( R . id . button ). setOnClickListener { view -> ObjectAnimator . ofFloat ( view , View . ALPHA , 0.1f , 0.2f ). apply { duration = 100 repeatMode = ValueAnimator . REVERSE repeatCount = ValueAnimator . INFINITE start () } } } } In previous releases, LeakCanary would detect that the animated view is leaking but it wouldn\u2019t be able to find the leak and instead would report it as an unreachable object: An unreachable object is still in memory but LeakCanary could not find a strong reference path from GC roots. LeakCanary now reports the leak and adds animator state information, helping detect and fix any infinite ObjectAnimator . \u252c\u2500\u2500\u2500 \u2502 GC Root: Thread object \u2502 \u251c\u2500 java.lang.Thread instance \u2502 Leaking: NO (the main thread always runs) \u2502 Thread name: 'main' \u2502 \u2193 Thread.threadLocals \u2502 ~~~~~~~~~~~~ ... \u251c\u2500 android.animation.ObjectAnimator instance \u2502 Leaking: UNKNOWN \u2502 mListeners = null \u2502 mPropertyName = null \u2502 mProperty.mName = alpha \u2502 mProperty.mType = java.lang.Float \u2502 mInitialized = true \u2502 mStarted = true \u2502 mRunning = true \u2502 mAnimationEndRequested = false \u2502 mDuration = 100 \u2502 mStartDelay = 0 \u2502 mRepeatCount = INFINITE (-1) \u2502 mRepeatMode = REVERSE (2) \u2502 \u2193 ObjectAnimator.mTarget \u2502 ~~~~~~~ \u2570\u2192 android.widget.Button instance Leaking: YES (View.mContext references a destroyed activity) To learn more, see this AOSP issue: ObjectAnimator.mTarget weak ref creates memory leaks on infinite animators . Leak detection in tests \u00b6 Previous releases of leakcanary-android-instrumentation introduced a FailTestOnLeakRunListener which could run leak detection after each UI tests. Unfortunately FailTestOnLeakRunListener relied on a hack around androidx.test internals to report failures. The internals keep changing with every androidx.test release and breaking FailTestOnLeakRunListener \ud83d\ude2d. FailTestOnLeakRunListener is now deprecated (\ud83d\udc4b) and replaced by the DetectLeaksAfterTestSuccess test rule, which you can add to your test like any normal test rule. Additionally, you can call LeakAssertions.assertNoLeak() from anywhere in your instrumentation tests. You can also annotate tests with @SkipLeakDetection (for that to work you\u2019ll also need to set up the TestDescriptionHolder test rule). class CartTest { @get : Rule val rules = RuleChain . outerRule ( TestDescriptionHolder ) . around ( DetectLeaksAfterTestSuccess ()) . around ( ActivityScenarioRule ( CartActivity :: class . java )) @Test fun addItemToCart () { // ... } @SkipLeakDetection ( \"See #1234\" ) @Test fun removeItemFromCart () { // ... } } Android 12 \u00b6 Hopefully this time we fixed everything that Android 12 broke: missing exported:true tags, missing pending intent flags, and ForegroundServiceStartNotAllowedException crashes. If not, let us know! Can\u2019t wait for Android 13 to break everything again \ud83e\udd2c. WorkManager \u00b6 Running an Android Service without crashing ( ForegroundServiceStartNotAllowedException \u2026) is becoming harder with every release of Android, so I got rid of the LeakCanary heap analyzer service! Instead, LeakCanary leverages WorkManager if you already have it as a dependency. If you don\u2019t use WorkManager, then LeakCanary will fall back to using a simple thread. Note: I recommend using at least WorkManager 2.7.0 as it adds the WorkRequest.Builder.setExpedited() API which LeakCanarty leverages if available. Multi process \u00b6 Switching to WorkManager also impacts the LeakCanary multi process approach, which now leverages WorkManager remote jobs. Blog on how I got this working: WorkManager multi-process for libraries . Multi process is harder to get right so you should only use this if LeakCanary frequently runs out of memory while performing the heap analysis. Here are the updated set up steps: 1) Add the leakcanary-android-process dependency and keep the leakcanary-android dependency . dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8' debugImplementation 'com.squareup.leakcanary:leakcanary-android-process:2.8' } 2) Skip the initialization code in the Application class class ExampleApplication : Application () { override fun onCreate () { super . onCreate () if ( LeakCanaryProcess . isInAnalyzerProcess ( this )) { return } // normal init goes here, skipped in :leakcanary process. } } That\u2019s it! Note that event listeners (see below) related to the analysis will fire in the remote process. AndroidX App Startup \u00b6 LeakCanary now optionally supports the AndroidX App Startup library . All you need to do is replace the leakcanary-android dependency with leakcanary-android-startup : dependencies { // Remove the normal leakcanary-android dependency // debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8' debugImplementation 'com.squareup.leakcanary:leakcanary-android-startup:2.8' } Note 1: leakcanary-android adds the code for automatic installl to leakcanary-android-core . If you\u2019re calling AppWatcher.manualInstall() , you can depend directly on leakcanary-android-core instead of leakcanary-android , and you won\u2019t need the disable any automatic install. Note 2: the same principle applies to leakcanary-object-watcher-android : it depends on leakcanary-object-watcher-android-core and adds automatic install, while leakcanary-object-watcher-android-startup leverages the App Startup library. Same for plumber-android , plumber-android-core and plumber-android-startup . Event listeners \u00b6 LeakCanary.Config has a new eventListeners field allowing you to react to LeakCanary\u2019s lifecycle. If you want to customize this, you most likely should be keeping the default list of listeners and add or remove from it. For example, if you want to disable the LeakCanary toast: LeakCanary . config = LeakCanary . config . run { copy ( eventListeners = eventListeners . filter { it ! is ToastEventListener } ) } If you want to upload heap analysis results: LeakCanary . config = LeakCanary . config . run { copy ( eventListeners = eventListeners + EventListener { event -> if ( event is HeapAnalysisSucceeded ) { // Upload event.heapAnalysis } } ) } Note: Leakcanary.Config.onHeapAnalyzedListener still works but is now deprecated. Feedback welcome on this new API! Other bug fixes and improvements \ud83d\udc1b\ud83d\udd28 \u00b6 #2096 Opening / sharing heap dump files now supports LeakCanary as an option. #2210 First Compose dedicated object inspectors! #2121 Support for customizing the heap dumper. This list reflects only a subset of all changes. For more details, see the 2.8 Milestone and the full diff . Version 2.7 (2021-03-26) \u00b6 Please thank @chao2zhang , @ihrupin , @jzbrooks , @msfjarvis , @reneargento , @Unpublished for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f. Finer grained root view watching \u00b6 In version 2.6, LeakCanary added detection of root views retained after View.onDetachedFromWindow() . This helps find more leaks, but unfortunately some Android widgets keep a detached root view around to reattach it later (e.g. spinner). App developers also sometimes do the same with dialogs, keeping a single instance around and calling show() and hide() as needed. As a result, LeakCanary would report leaks that were actually not leaks. In version 2.7, the default behavior changed: LeakCanary will continue to detect leaks of toasts, but will ignore root views created by a PopupWindow (which is what Android widgets use). It will also ignore root views created by a dialog by default, and you can turn this back on by setting the leak_canary_watcher_watch_dismissed_dialogs resource boolean to true: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"leak_canary_watcher_watch_dismissed_dialogs\" > true </bool> </resources> This is implemented using a new Square library: Curtains . Targeting Android 12 \u00b6 We fixed two issues for apps that want to target Android 12: #2074 Activities that use intent filters must declare the android:exported attribute. #2079 PendingIntent requires the FLAG_IMMUTABLE flag. Bug fixes and improvements \ud83d\udc1b\ud83d\udd28 \u00b6 #2075 Fixed crash when sharing heap dumps. #2067 Fixed crash when opening leaks from older versions (before 2.6) of LeakCanary. #2049 Fixed Plumber crash due to R8 shaking AndroidLeakFixes. #2084 Fixed Shark crash when used from multiple threads. #2054 \ud83d\ude48\ud83d\ude49\ud83d\ude4a Blocked Monkeys from deleting leaks. #2069 Added X button to the root leak activity (for custom devices with no back button) #2091 Added receiver details if LoadedApk shows up in the leaktrace. #2083 Added service status details (created or not) to leaktrace. #2099 Retry button if analysis fails. #2066 When heap analysis in UI tests is skipped and NoAnalysis is returned, NoAnalysis now includes a reason to help debug why it didn\u2019t run. #2000 The LeakCanary CI now leverages GitHub actions instead of Travis. For more details, see the 2.7 Milestone and the full diff . Version 2.6 - Christmas Release \ud83c\udf84 (2020-12-24) \u00b6 Please thank @chao2zhang , @ChaosLeung , @LitterSun , @mickverm , @opatry , @Thomas-Vos , @tricknology , @rahul-a , @samoylenkodmitry , @sing0055 , @ubiratansoares for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f. This Christmas Release includes several external contributions and a bunch of cool new features! \ud83c\udf81\ud83c\udf81 Detecting root views retained after View.onDetachedFromWindow() \u00b6 On Android, every displayed view hierarchy is attached to a window, whether it be the view hierarchy of an activity, a dialog, a toast or a chat head . After a view hierarchy is detached from its window, it should be garbage collected. LeakCanary already detects leaks of activity view hierarchies because retained detached views reference their activity context and LeakCanary detects activities retained after Activity.onDestroy() . In this new release, LeakCanary will now detect the leak of a dialog view hierarchy as soon as that dialog is dismissed, or any other view that is passed to WindowManager.removeView() . Detecting services retained after Service.onDestroy() \u00b6 After an Android service is destroyed, it should be garbage collected. Unfortunately, the Android SDK does not provide any generic API to observe the service lifecycle. We worked around that using reflection on greylist APIs (details in #2014 ). Let\u2019s hope this motivates the Android team to build the APIs developers need . Configuring retained object detection \u00b6 With the detection of 2 new types of retained objects, we\u2019re also adding APIs to configure which watchers should be installed as well as adding filtering capabilities. First, disable the automatic install: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"leak_canary_watcher_auto_install\" > false </bool> </resources> Then you can install LeakCanary manually. LeakCanary 2.6 comes with 4 watchers installed by default: ActivityWatcher , FragmentAndViewModelWatcher , RootViewWatcher , ServiceWatcher . Here\u2019s an example to get all the default watchers except ServiceWatcher : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val watchersToInstall = AppWatcher . appDefaultWatchers ( application ) . filter { it ! is ServiceWatcher } AppWatcher . manualInstall ( application = application , watchersToInstall = watchersToInstall ) } } LeakCanary introduces a new functional (SAM) interface implemented by ObjectWatcher : ReachabilityWatcher , with a ReachabilityWatcher.expectWeaklyReachable() method that replaces the now deprecated ObjectWatcher.watch() method. You can create the default watcher instances with a custom ReachabilityWatcher that delegates to AppWatcher.objectWatcher but filters out specific instances (e.g. BadSdkLeakingFragment ): class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val delegate = ReachabilityWatcher { watchedObject , description -> if ( watchedObject ! is BadSdkLeakingFragment ) { AppWatcher . objectWatcher . expectWeaklyReachable ( watchedObject , description ) } } val watchersToInstall = AppWatcher . appDefaultWatchers ( application , delegate ) AppWatcher . manualInstall ( application = application , watchersToInstall = watchersToInstall ) } } With these new configuration options, AppWatcher.config is now deprecated and a no-op. Dumping the heap on screen off \u00b6 The default threshold to dump the heap is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . Up until now, visible meant \u201cthe app has at least one activity in started state\u201d. In LeakCanary 2.6, the app will now be considered not visible if the device screen is off , lowering the threshold to trigger heap dumps when you turn off the device screen. LeakCanary for releases \u00b6 LeakCanary 2.6 introduces a new artifact: leakcanary-android-release . This artifact exposes APIs to run a heap analysis in release builds, in production. Danger Everything about this is experimental. Running a heap analysis in production is not a very common thing to do, and we\u2019re still learning and experimenting with this. Also, both the artifact name and the APIs may change. dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6' // NEW: LeakCanary for releases! releaseImplementation 'com.squareup.leakcanary:leakcanary-android-release:2.6' // Optional: detect retained objects. This helps but is not required. releaseImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.6' } Here\u2019s a code example that runs a heap analysis when the screen is turned off or the app enters background, checking first if a Firebase Remote Config flag is turned on, and uploading the result to Bugsnag: class ReleaseExampleApplication : ExampleApplication () { // Cancels heap analysis if \"heap_analysis_flag\" is false. private val flagInterceptor by lazy { object : HeapAnalysisInterceptor { val remoteConfig : FirebaseRemoteConfig = TODO () override fun intercept ( chain : Chain ): HeapAnalysisJob . Result { if ( remoteConfig . getBoolean ( \"heap_analysis_flag\" )) { chain . job . cancel ( \"heap_analysis_flag false\" ) } return chain . proceed () } } } private val analysisClient by lazy { HeapAnalysisClient ( // Use private app storage. cacheDir is never backed up which is important. heapDumpDirectoryProvider = { cacheDir }, // stripHeapDump: remove all user data from hprof before analysis. config = HeapAnalysisConfig ( stripHeapDump = true ), // Default interceptors may cancel analysis for several other reasons. interceptors = listOf ( flagInterceptor ) + HeapAnalysisClient . defaultInterceptors ( this ) ) } private val analysisExecutor by lazy { Executors . newSingleThreadExecutor { thread ( start = false , name = \"Heap analysis executor\" ) { android . os . Process . setThreadPriority ( THREAD_PRIORITY_BACKGROUND ) it . run () } } } private val analysisCallback : ( Result ) -> Unit by lazy { val uploader = BugsnagHeapAnalysisUploader ( this @ReleaseExampleApplication ) { result -> if ( result is Done ) { uploader . upload ( result . analysis ) } } } override fun onCreate () { super . onCreate () // Delete any remaining heap dump (if we crashed) analysisExecutor . execute { analysisClient . deleteHeapDumpFiles () } // Starts heap analysis on background importance BackgroundTrigger ( application = this , analysisClient = analysisClient , analysisExecutor = analysisExecutor , analysisCallback = analysisCallback ). start () // Starts heap analysis when screen off ScreenOffTrigger ( application = this , analysisClient = analysisClient , analysisExecutor = analysisExecutor , analysisCallback = analysisCallback ). start () } /** * Call this to trigger heap analysis manually, e.g. from * a help button. * * This method returns a `HeapAnalysisJob` on which you can * call `HeapAnalysisJob.cancel()` at any time. */ fun triggerHeapAnalysisNow (): HeapAnalysisJob { val job = analysisClient . newJob () analysisExecutor . execute { val result = job . execute () analysisCallback ( result ) } return job } } The Bugsnag uploader: class BugsnagHeapAnalysisUploader ( applicationContext : Application ) { private val bugsnagClient : Client init { bugsnagClient = Client ( applicationContext , BUGSNAG_API_KEY , DO_NOT_ENABLE_EXCEPTION_HANDLER ) bugsnagClient . setSendThreads ( false ) } fun upload ( heapAnalysis : HeapAnalysis ) { when ( heapAnalysis ) { is HeapAnalysisSuccess -> { val exception = HeapAnalysisReport () bugsnagClient . notify ( exception ) { report -> val metaData = report . error . metaData metaData . addToTab ( \"Heap Analysis\" , \"result\" , heapAnalysis . toString ()) } } is HeapAnalysisFailure -> { // Please file any reported failure to // https://github.com/square/leakcanary/issues bugsnagClient . notify ( heapAnalysis . exception ) } } } // Exception with fake unique stacktrace to send all reports to the same error entry. class HeapAnalysisReport : Exception ( \"Check the HEAP ANALYSIS tab\" ) { override fun fillInStackTrace (): Throwable { stackTrace = arrayOf ( StackTraceElement ( \"HeapAnalysisReport\" , \"analyzeHeap\" , \"HeapAnalysisReport.kt\" , 1 ) ) return this } } companion object { private const val BUGSNAG_API_KEY = YOUR_BUGSNAG_API_KEY private const val DO_NOT_ENABLE_EXCEPTION_HANDLER = false } } More leak fixes in Plumber \u00b6 We added 3 new automatic fixes for known AOSP leaks in plumber-android (details: #1993 ). As a reminder, plumber-android is automatically included when you add leakcanary-android , and you can add it manually for build types that don\u2019t include LeakCanary: dependencies { // leakcanary-android adds plumber-android to debug builds debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6' // This adds plumber-android to all build types implementation 'com.squareup.leakcanary:plumber-android:2.6' } Bug fixes and improvements \ud83d\udc1b\ud83d\udd28 \u00b6 #1948 Leakcanary is now compiled against Kotlin 1.4 (while staying 1.3 compatible) to support Functional (SAM) interfaces . #1956 The retained object size is displayed as a human readable output (KB, MB, \u2026). #1976 Improved default object inspectors and leak finders for View and Context . #1972 Fields are printed with the parent class name that holds the field in leak traces. #1981 Fixed StrictMode policy violation (main thread read from disk). #1977 Report objects that are not strongly reachable. #2018 & #2019 Fixed crashes in LeakCanary UI (discovered by Monkey tests). #2015 Fixed crash on Android < 16. #2023 Fixed crash in plugin projects. For more details, see the 2.6 Milestone and the full diff . Version 2.5 (2020-10-01) \u00b6 Please thank @Amokrane , @Armaxis , @askont , @chao2zhang , @daniil-shevtsov , @eygraber , @msfjarvis , @mzgreen , @lchen8 , @rpattabi , @sahil2441 , @SylvainGirod , @vhow for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f. Heap analysis is twice as fast \ud83d\udc24\ud83d\udca8 \u00b6 No one asked, so we delivered! We rewrote several core components in Shark (LeakCanary\u2019s heap analyzer) to dramatically reduce IO reads and allocations while keeping memory constant. More details on Twitter: thread by @ArtemChubaryan and thread by @Piwai . Compute retained size within the leak trace \u00b6 Previously, LeakCanary computed the retained size for the leaking object (the last object in the leak trace). However, the bad reference causing objects to leak is often higher up in the leak trace and everything that it holds onto is actually leaking. So LeakCanary now computes the retained size for all the objects in the leaktrace that have a LEAKING or UNKNOWN status : \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 com.example.MySingleton class \u2502 Leaking: NO (a class is never leaking) \u2502 \u2193 static MySingleton.leakedView \u2502 ~~~~~~~~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 Retaining 46326 bytes in 942 objects \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.MainActivity instance \u200b Leaking: YES (Activity#mDestroyed is true) \u200b Retaining 1432 bytes in 36 objects Disable LeakCanary from the UI \u00b6 New toggle to disable heap dumping , which can be useful for QA, or when doing a product demo. LeakCanary will still show a notification when an object is retained. Deobfuscating hprof files \u00b6 The Shark CLI can now deobfuscate heap dumps : brew install leakcanary-shark shark-cli --hprof heapdump.hprof -m mapping.txt deobfuscate-hprof Bug fixes and improvements \ud83d\udc1b\ud83d\udd28 \u00b6 Heap analysis text results now wrap to a max width when sharing them from the LeakCanary activity or printing to logcat. This will make it harder to miss details that are lost at the end of long lines of text. The leak_canary_watcher_auto_install , leak_canary_allow_in_non_debuggable_build and leak_canary_plumber_auto_install resource booleans were meant to be public . We sprinkled a few @JvmStatic to help Java consummers . Fixed crash when no browser installed . Use distinct group for LeakCanary notifications . The heap analysis result now includes the heap dump duration because it looks like Android 11 heap dumps are sometimes super slow . We also added more perf related metrics . Disable logging when AppWatcher runs in release builds. Highlight library leak patterns directly within the leak traces . Improved inspections for Context, View and ContextImpl . For more details, see the 2.5 Milestone and the full diff . Version 2.4 (2020-06-10) \u00b6 Please thank @0x109 , @andersu , @antoniomerlin , @bishiboosh , @ckesc , @jrodbx , @LouisCAD , @marcardar , @OlivierGenez , @pyricau , @runningcode , @seljad , @worldsnas for their contributions, bug reports and feature requests. plumber-android is a new artifact that fixes known Android leaks \ud83d\udebd\ud83d\udd27 \u00b6 LeakCanary reports all leaks, including leaks caused by a known bug in 3 rd party code that you do not have control over (reported as Library leaks ). That can be annoying! LeakCanary now ships with a new dependency, plumber-android , which performs hacks at runtime to fix some of these known leaks. This releases has fixes for 11 known leaks , but this is just the beginning. Contributions welcome! \ud83d\ude4f Note that since the leakcanary-android dependency is usually added as a debugImplementation dependency, the plumber-android is transitively added only in debug builds, so it will not fix leaks in your release builds. You can add the dependency directly as implementation to get these fixes in release builds as well: dependencies { implementation 'com.squareup.leakcanary:plumber-android:2.4' } Warning While several of these fixes already ship in release builds of Square apps, this is the first official release of plumber-android , so you should consider it experimental . Analyzing leaks from the CLI is easier than ever \ud83c\udf7a \u00b6 The Shark CLI can now be installed via Homebrew brew install leakcanary-shark You can then look for leaks in apps on any connected device, for example: $ shark-cli --device emulator-5554 --process com.example.app.debug analyze Support for Android Test Orchestrator \ud83c\udfbc \u00b6 If you set up LeakCanary to report test failures when detecting leaks in instrumentation tests , it now works with Android Test Orchestrator as well. No change required, LeakCanary will automatically detect thatAndroid Test Orchestrator is running and hook into it. No more master branch \u00b6 The branch name master comes from the master / slave terminology. We renamed the default branch to main , a small step towards making the LeakCanary community a safer space. Here\u2019s a good thread on this topic . Bug fixes and improvements \ud83d\udc1b\ud83d\udd28 \u00b6 URLs in Library Leak descriptions are now clickable Fixed ordering issues causing improper config with manual setup. A related change is that AppWatcher.Config.enabled is now deprecated. Fixed possible OutOfMemoryError failure when computing retained size: we were loading to memory large arrays from the heap dump just to get their size. For more details, see the 2.4 Milestone and the full diff . Version 2.3 (2020-04-08) \u00b6 This is a minor release on the feature front, but a large release on the documentation front! Many thanks to @adamfit , @Amokrane , @Armaxis , @artnc , @burakeregar , @ClaasJG , @clementcontet , @ckesc , @cketti , @fbenbassat , @Guneetgstar , @Igorxp5 , @JLLeitschuh , @KidAndroid , @ligi , @mzgreen , @pyricau , @sprintuu , @tevjef , @thrlr123 for the contributions, bug reports and feature requests. We asked for help and immediately started seeing more contributions. Thanks all! Check out the How to help page. LeakCanary will now crash in release builds \u00b6 Despite the documentation insisting on using debugImplementation , we\u2019ve seen apps ship LeakCanary in release builds . Mistakes happen, so we\u2019ve made that mistake harder to miss by making LeakCanary crash when included in release builds . Learn More: LeakCanary in release builds . Doc site \ud83d\udec0\ud83d\udca5 \u00b6 The doc site content has changed quite a bit! We applied advice from Google\u2019s tech writing guide . If you\u2019ve been confused by Library Leaks before, check out see the new Categorizing leaks section. Take a look around, let us know what you think. Bug fixes and improvements \ud83d\ude09 \u00b6 The new deobfuscation Gradle plugin wasn\u2019t working with Gradle 3.6 , this is now fixed. Also removed the requirement for the plugin to be applied after AGP . Fixed 2 crashes ( #1768 & #1769 ) in the LeakCanary UI found by a sneaky monkey runner \ud83d\ude48. The LeakCanary UI updates immediately when a heap analysis is added or deleted. Fixed a crash when updating from LeakCanary 2.0 . The About section of the LeakCanary now surfaces whether heap dumping is currently enabled . Fixed process not exiting in SharkCLI on Windows. Improved error message when obfuscation mappings appear to be missing. For more details, see the 2.3 Milestone and the full diff . Version 2.2 (2020-02-05) \u00b6 We\u2019ve got some good stuff for the first release of the decade! Many thanks to @AndroidInternal , @Armaxis , @lic2050 , @mzgreen , @orenktaboola , @personshelldon , @Plastix , @pyricau for the contributions, bug reports and feature requests. ViewModel leak detection \u00b6 Android ViewModels are really cool! Their lifecycle is much nicer than fragments or activities, but sometimes mistakes happen. LeakCanary will now automatically detect ViewModel leaks and report any ViewModel instance retained after its onCleared() method was called. Android TV \u00b6 LeakCanary is finally coming to big screens near you! Best part - no additional setup is required, just enable it like you would for a mobile device . Now whenever there\u2019s a leak - you will see a helpful Toast appear with all the details. Make sure to check out our new Android TV section and chill! Java-friendly Config builders \u00b6 It was brought to our attention that configuring LeakCanary and AppWatcher was a miserable experience from Java code. Well, not anymore! Now you can use LeakCanary.Config.Builder and AppWatcher.Config.Builder to have idiomatic Java when updating the configurations. For example: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .computeRetainedHeapSize(false) .build(); LeakCanary.setConfig(config); If you notice any other problems when using LeakCanary from Java, please file an issue ! We take Java-interop seriously and will be happy to improve LeakCanary\u2019s API! For more details, see the 2.2 Milestone and the full diff . Version 2.1 (2019-12-31) \u00b6 A special New Year\u2019s Eve release \ud83e\udd73, the next release will be in another decade \ud83d\ude0e! Many thanks to @adamfit , @alexander-smityuk , @Armaxis , @BraisGabin , @devism , @ditclear , @jrodbx , @jstefanowski , @Maragues , @mzgreen , @pyricau for the contributions, bug reports and feature requests. A Gradle plugin for obfuscated apps \u00b6 It\u2019s fairly common for teams to have a QA build that is tested before making the release build. Usually that build will be obfuscated (via Proguard or R8), but also add LeakCanary to detect leaks during QA. This leads to obfuscated leak traces, which are hard to understand \ud83e\udd2f. Check out our new Gradle deobfuscation plugin and rejoice! UI twix tweaks \u00b6 In 2.0 we changed the LeakCanary UI and UX, and built a foundation on which 2.1 extends. Since 2.0, Leaks are grouped by their distinct signature. In 2.1 there\u2019s a New tag that will show until you open up a leak. There\u2019s also a Library Leak tag for leaks that are known to be caused by a bug in the Android Framework or Google libraries, and the library leak description now shows up in the UI. The type of the Java objects (class, instance, array) is now displayed in the LeakTrace, e.g. see FontsContract class and ExampleApplication instance above. The type of the GC root now shows up at the root of the leak trace. Makes sense! The leak result notification has an importance now set to MAX so that it\u2019ll show up right in your face. If you turn it off, the canary will haunt you in your dreams \ud83d\udc24\ud83d\udc7b. To save your sanity and your device battery, automatic heap dumps now won\u2019t happen more often than once per minute. The resource id name for View instances is now displayed in the leak trace. You shouldn\u2019t look at the implementation . \u251c\u2500 android.widget.TextView instance \u2502 View.mID = R.id.helper_text Documentation goodies \u00b6 The Fundamentals page was entirely rewritten, split into 3 pages and moved to its own tab. Please read it and provide feedback! At Square, we have been uploading leaks to Bugsnag for 3 years now, so that no leak ever gets missed. Follow this recipe ! Did you know you can run LeakCanary in a JVM ? API breaking bettering changes \u00b6 The APIs of the Leak and LeakTrace classes have significantly changed, e.g. all LeakTrace instances with an identical signature are grouped under the same Leak object. Despite these breaking changes, this release version is a minor update. Oh noes, what about semantic versioning \ud83d\ude31? Ask Don Quixote. You can now customize the way LeakCanary finds the leaking objects in the heap dump. For example, here\u2019s the configuration SharkCli uses to find leaks in heap dumps of apps that don\u2019t even have the LeakCanary dependency: LeakCanary . config = LeakCanary . config . copy ( leakingObjectFinder = FilteringLeakingObjectFinder ( AndroidObjectInspectors . appLeakingObjectFilters ) ) LeakCanary automatically disables itself in tests by detecting that the org.junit.Test is in the classpath. Unfortunately, some apps ship Junit in their app debug classpath (e.g. when using OkHttp MockWebServer). You can now customize which class is used to detect tests: <resources> <string name= \"leak_canary_test_class_name\" > assertk.Assert </string> </resources> Interactive CLI \u00b6 Shark CLI was rewritten on top of Clikt : $ shark-cli Usage: shark-cli [ OPTIONS ] COMMAND [ ARGS ] ... ^ ` . . = \"\" = . ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / ` ~~~--__ \\ / \\ / { \\_ __----~~ ' `~~-_/' - = \\/ = - '\\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / ' . . ' ' ._. ' _ | ` ~~ ` | _ / | \\ / | \\ Options: -p, --process NAME Full or partial name of a process, e.g. \"example\" would match \"com.example.app\" -d, --device ID device/emulator id -m, --obfuscation-mapping PATH path to obfuscation mapping file --verbose / --no-verbose provide additional details as to what shark-cli is doing -h, --hprof FILE path to a .hprof file --help Show this message and exit Commands: interactive Explore a heap dump. analyze Analyze a heap dump. dump-process Dump the heap and pull the hprof file. strip-hprof Replace all primitive arrays from the provided heap dump with arrays of zeroes and generate a new \"-stripped.hprof\" file. There\u2019s a new interactive command which enables exploring the heap dump from the command line: $ shark-cli -h heapdump.hprof interactive Enter command [ help ] : help Available commands: analyze Analyze the heap dump. class NAME@ID Show class with a matching NAME and Object ID. instance CLASS_NAME@ID Show instance with a matching CLASS_NAME and Object ID. array CLASS_NAME@ID Show array instance with a matching CLASS_NAME and Object ID. ->instance CLASS_NAME@ID Show path from GC Roots to instance. ~>instance CLASS_NAME@ID Show path from GC Roots to instance, highlighting suspect references. help Show this message. exit Exit this interactive prompt. We\u2019re currently exploring the idea of adding support for SQL queries , feedback welcome! For more details, see the 2.1 Milestone and the full diff . Version 2.0 (2019-11-27) \u00b6 In the past 7 months, LeakCanary went through 3 alphas and 5 betas, encompassing 23 contributors over 493 commits, 35826 insertions and 10156 deletions. Should I upgrade? \u00b6 YES! LeakCanary 2 is so much better, it might make you excited when you see a new memory leak. Follow the upgrade guide , you won\u2019t regret it! So, what\u2019s changed since 1.6.3? \u00b6 Everything. The LeakCanary codebase went from ~6000 lines of Java to ~16000 lines of Kotlin, excluding comments & blanks. Isn\u2019t Kotlin supposed to drastically reduce the amount of boilerplate code? Absolutely! And it did. But then, we wrote more code. LeakCanary used to depend on HAHA , a repackaging of perflib , the heap dump parser used by Android Studio. Unfortunately perflib was slow and used too much memory, so LeakCanary now includes its own heap dump parser: Shark . The extra code comes from Shark, but also from having a lot more automated tests, and an improved UI layer. One major difference: when the app is in foreground, LeakCanary 2 will not trigger on every retained instance. Instead it will wait until the app goes in background or to reach a threashold of 5 retained instances in foreground. The analysis will then find all the leaks at once, and group identical leaks in the results UI. Please read the Fundamentals section to learn more! Random facts \u00b6 You can customize the Leaks launcher icon and label: learn more here . If you ` press on your main activity launcher icon, you should see a LeakCanary dynamic shortcut. You can then long press that to drop it on your home screen, and the launcher shows that it\u2019s the leaks launcher for your app. Out of the box, LeakCanary tracks all fragments flavors: AOSP, Support Library and Android X. From within the leak screen, you can share a leak to stack overflow. You can also share a heap dump, or import and analyze a heap dump from another device. You can run LeakCanary from your computer command line, on any debuggable app even if that app doesn\u2019t have LeakCanary: learn more here . The new documentation is fully searchable and includes the API documentation. Try the search bar \u2934. A large 160Mb heap dump uses 2Gb memory when opening it in Android Studio, but only 40Mb with Shark. Changes since 2.0 Beta 5 \u00b6 Shark CLI supports multiple connected devices #1642 Fixed missing sources from Maven Central #1643 Updated notification icon to avoid confusion with Twitter DM notifications, and added icons to bottom navigation bar #1648 Automatic leak detection for support library fragments #1611 Many thanks to @AndreasBoehm , @jrodbx , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0 Milestone and the full diff . Version 2.0 Beta 5 (2019-11-25) \u00b6 Major bugfix: native gc roots were accidentally ignored in Beta 4, as a result some leaks were not found #1634 Fixed Lint warning ( leak_canary_about_message string triggered multiple substitutions warning) #1630 Many thanks to @DanEdgarTarget , @msfjarvis , @PaulWoitaschek , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-5 Milestone and the full diff . Version 2.0 Beta 4 (2019-11-18) \u00b6 Improved string rendering for heap analysis results UX redesign #1445 Support for pattern matching of native reference leaks #1562 Added support for deobfuscation using Proguard mapping files in Shark #1499 . This isn\u2019t directly supported in LeakCanary yet. Added support for extracting metadata from the heap dump (see the recipe ) #1519 Improved auto disabling of LeakCanary in Unit and UI tests #1552 Several performance improvements when parsing heap dumps Fixed several bugs and crashes Added new known leak patterns Many thanks to @Armaxis , @BraisGabin , @bric3 , @elihart , @fernandospr , @flickator , @gabrysgab , @JorgeDLS , @lannyf77 , @msfjarvis , @mzgreen , @ozmium , @PaulWoitaschek , @pyricau , @shelpy , @vRallev , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-4 Milestone and the full diff . Version 2.0 Beta 3 (2019-08-22) \u00b6 Baseline memory usage for large hprofs divided by 3 and removed memory spikes #1543 Fixed crash when LeakCanary is initialized from another process #1529 Java local references are deprioritized to look for longer alternative paths #1525 Fixed JavaLocalPattern not matching on Lollipop #1524 Many thanks to @Armaxis , @elihart , @emartynov , @hmcgreevy-instil , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-3 Milestone and the full diff . Version 2.0 Beta 2 (2019-08-02) \u00b6 Fixed Leak analysis failed: Object id not found in heap dump. #1516 10x speed increase of hprof indexing on large heap dumps #1520 Many thanks to @kolphi , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-2 Milestone and the full diff . Version 2.0 Beta 1 (2019-07-30) \u00b6 New standalone library! Shark is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a CLI : you can now run shark-cli analyze-process com.example.myapp from your computer. New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select \u201cHeap Explorer\u201d. This is still experimental and not very user friendly, contributions welcome! Large API rewrite to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became AppWatcher , RefWatcher became ObjectWatcher , AndroidExcludedRefs became AndroidReferenceMatchers , AnalysisResultListener became OnHeapAnalyzedListener , AndroidLeakTraceInspectors became AndroidObjectInspectors . The entire API surface is now documented and the documentation is available on this website: see the LeakCanary API tab at the top. Removed the dependency on Android X . No more configuration issues! #1462 Added Proguard rules for LeakCanary and ObjectWatcher. #1500 Display LeakCanary version in the About screen. #1448 Bug fixes, new reference matchers and object inspectors Many thanks to @arctouch-carlosottoboni , @jemaystermind , @kushagrakumar27 , @pyricau , @snkashis for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-1 Milestone and the full diff . Version 2.0 Alpha 3 (2019-07-04) \u00b6 #1401 LeakCanary can now import all hprof files created from prior LeakCanary versions. #1414 New API: RefWatcher.retainedInstances which returns the instances that are currently considered retained. #1419 New APIs: LeakCanary.Config.maxStoredHeapDumps (default 7) and LeakCanary.Config.requestWriteExternalStoragePermission (default false). LeakCanary won\u2019t ask for the external storage permission anymore by default. #1338 API change: LeakCanary.Config.exclusionsFactory replaced with LeakCanary.Config.knownReferences (simpler use), LeakCanary.Config.leakInspectors and LeakCanary.Config.labelers merged into LeakCanary.Config.leakTraceInspectors which provides access to the entire leak trace as well as a new graph oriented API that replaces the low level hprof parser API. #1382 LeakCanary now disables automatic heap dumping when running in AndroidX UI tests. #1424 API rename: RefWatcher.hasRetainedReferences => RefWatcher.hasRetainedInstances , RefWatcher.retainedReferenceCount => RefWatcher.retainedInstanceCount , RefWatcher.hasWatchedReferences => RefWatcher.hasWatchedInstances , RefWatcher.removeKeysRetainedBeforeHeapDump => RefWatcher.removeInstancesRetainedBeforeHeapDump , RefWatcher.clearWatchedReferences => RefWatcher.clearWatchedInstances . #1432 #1438 #1440 New \u201cwon\u2019t fix\u201d leaks and leak trace inspectors #1374 #1364 #1366 #1417 #1399 #1416 #1407 #1427 #1385 Bug and crash fixes Many thanks to @1step2hell , @afollestad , @ansman , @bjdodson , @BraisGabin , @EBfVince , @jaredsburrows , @pforhan , @pyricau , @tellypresence , @wiyarmir for the contributions, bug reports and feature requests. For more details, see the 2.0-alpha-3 Milestone and the full diff . Version 2.0 Alpha 2 (2019-05-21) \u00b6 #1040 Import and analyze hprof files from other devices #1344 Computing retained size #1325 New notification showing current count of retained instances #1079 \u201cExcluded\u201d leaks have been renamed to \u201cWon\u2019t fix\u201d leaks to clarify meaning. #1328 New leaks are called out in the UI. #1327 LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds. #1173 Experimental: now reporting leaks that only go through weak references (previously reported as \u201cno path to instance\u201d) #1339 Readded support for Thread name based exclusions #1312 Fixed bug causing LeakCanary to stop detecting leaks after the app is killed. #1310 #1313 #1314 #1340 #1337 Many API changes #1296 #1293 #1306 #1336 Fixed several crashes. Many thanks to @forrestbice , @Foso , @Goddchen , @marcosholgado , @orionlee , @pyricau , @satoshun , @ZacSweers for the contributions! For more details, see the 2.0-alpha-2 Milestone and the full diff . Version 2.0 Alpha 1 (2019-04-23) \u00b6 New logo , thanks @flickator ! Entirely rewritten to 100% Kotlin Multiple leaks detected in one analysis The heap is dumped when the app goes in the background, or when a minimum of 5 leaks is reached in the foreground. Leak grouping Leaks that share similar causes are grouped in the UI. New screens to see the list of groups and each group. Improved leaktrace strings to highlight leak causes. Leaks can be shared to Stack Overflow New library: LeakSentry . Detects when objects are leaking and triggers LeakCanary Can be used independently in production, for instance to report the number of leaking instances on an OutOfMemoryError crash. New heap parser Uses 90% less memory and 6 times faster than the prior heap parser. Runs in the same process as the app on a low priority thread. No more dependency on Perflib and TroveJ. New dependency on Okio. The old parser is still available as leakcanary-android-perflib but will be removed after alpha. Labelers can add any string content to leak elements 0 code setup, just add the one debug dependency. Simpler configuration options Updated from support library to Android X Many thanks to @BraisGabin , @colinmarsch , @jrodbx , @flickator , @JakeWharton , @pyricau , @WhatsEmo for the contributions! For more details, see the 2.0-alpha-1 Milestone and the full diff . Version 1.6.3 (2019-01-10) \u00b6 #1163 Fixed leaks being incorrectly classified as \u201cno leak\u201d due to missed GC Roots. #1153 LeakCanary.isInAnalyzerProcess now correctly returns true in the analyzer process prior to any first leak (could be triggered by starting the leak result activity). #1158 Stopped enabling DisplayLeakActivity when not using DisplayLeakService. #1135 Fixed IndexOutOfBoundsException for leak traces of size 1. #1163 Keep \u201cno leak\u201d heap dumps. Many thanks to @KMaragh , @pyricau , @SebRut for the code contributions! For more details, see the 1.6.3 Milestone and the full diff . Version 1.6.2 (2018-10-16) \u00b6 #1067 Fixed TransactionTooLargeException crash (leak analysis would never complete). #1061 Detection of Fragment view leaks after Fragment#onDestroyView(). #1076 Added the FOREGROUND_SERVICE permission for Android P. #1062 The LeakCanary toast now always shows correctly. It doesn\u2019t show if there is no activity in foreground. #1115 Reenabled the DisplayLeakActivity icon on fresh installs. #1100 Added nullability annotations to improve Kotlin support. Updates to excluded leaks ( commits ). Updates to reachability inspectors ( commits ). Many thanks to @fractalwrench , @ZacSweers , @Goddchen , @igokoro , @IlyaGulya , @JakeWharton , @javmarina , @jokermonn , @jrodbx , @Parseus , @pyricau , @scottkennedy for the code contributions! Public API changes \u00b6 Subclasses of AbstractAnalysisResultService should now override onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) instead of onHeapAnalyzed(@NonNull HeapDump heapDump, @NonNull AnalysisResult result) For more details, see the 1.6.2 Milestone and the full diff . Version 1.6.1 (2018-06-21) \u00b6 #727 Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak. #1011 We noticed that computing the retained heap size could take a long time, so it\u2019s now optional and off by default. #633 Support for detecting leaks in instrumentation tests ( see the wiki ). #985 Ability to convert leak traces into stack traces for easy remote reporting ( see the wiki ). #983 Support for watching destroyed Fragments. #846 LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+. The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found. #775 Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library. #930 DisplayLeakActivity has a responsive icon. #685 Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors). #999 Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1). Several bug and crash fixes. Many thanks to @AdityaAnand1 , @alhah , @christxph , @csoon03 , @daqi , @JakeWharton , @jankovd , @jrodbx , @kurtisnelson , @NightlyNexus , @pyricau , @SalvatoreT , @shmuelr , @tokou , @xueqiushi for the code contributions! Note: we made a 1.6 release but quickly followed up with 1.6.1 due to #1058 . Public API changes \u00b6 The installed ref watcher singleton is now available via LeakCanary.installedRefWatcher() AnalysisResult.leakTraceAsFakeException() returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics. New InstrumentationLeakDetector and FailTestOnLeakRunListener APIs for detecting leaks in instrumentation tests. New Reachability.Inspector and RefWatcherBuilder.stethoscopeClasses() API to establish reachability and help identify leak causes. Watching activities can be disabled with AndroidRefWatcherBuilder.watchActivities(false) , watching fragments can be disabled with AndroidRefWatcherBuilder.watchFragments(false) LeakCanary.setDisplayLeakActivityDirectoryProvider() is deprecated and replaced with LeakCanary.setLeakDirectoryProvider() New RefWatcherBuilder.computeRetainedHeapSize() API to enable the computing of the retained heap size (off by default). For more details, see the 1.6.1 Milestone and the full diff . Version 1.5.4 (2017-09-22) \u00b6 Restore Java 7 compatibility in leakcanary-watcher Version 1.5.3 (2017-09-17) \u00b6 Fix broken 1.5.2 build Convert leakcanary-watcher from Android library to Java library Disable finish animations in RequestStoragePermissionActivity Corrected README sample for Robolectric tests For more details, see the full diff . Version 1.5.2 (2017-08-09) \u00b6 New excluded leaks Move Leakcanary UI into leak analyzer process Ignore computing retained sizes for bitmaps on O+ Add notification channel for persistent messages on O+ Exclude permission activity from recents menu Updated README and sample for handling Robolectric tests For more details, see the full diff . Version 1.5.1 (2017-04-25) \u00b6 New excluded leaks Fix java.util.MissingFormatArgumentException in DisplayLeakService Separate task affinities for different apps Bump minSdk to 14 Fix HahaHelper for O Preview For more details, see the full diff . Version 1.5 (2016-09-28) \u00b6 New excluded leaks Added LeakCanary.isInAnalyzerProcess() to the no-op jar Fixed several file access issues: No more cleanup on startup, we rotate the heap dump files on every new heap dump. LeakCanary now falls back to the app directory until it can write to the external storage. Leak notifications now each use a distinct notification instead of erasing each other. If LeakCanary can\u2019t perform a heap dump for any reason (e.g. analysis in progress, debugger attached), it retries later with an exponential backoff. Added confirmation dialog when user deletes all leaks. Replace the two LeakCanary configuration methods with a builder that provides more flexibility, see LeakCanary.refWatcher() . For more details, see the full diff . Public API changes \u00b6 New HeapAnalyzer.findTrackedReferences() method for headless analysis when you have no context on what leaked. Added LeakCanary.isInAnalyzerProcess() to the no-op jar Added LeakCanary.refWatcher() which returns an AndroidRefWatcherBuilder that extends RefWatcherBuilder and lets you fully customize the RefWatcher instance. Removed LeakCanary.install(Application, Class) and LeakCanary.androidWatcher(Context, HeapDump.Listener, ExcludedRefs) . Removed R.integer.leak_canary_max_stored_leaks and R.integer.leak_canary_watch_delay_millis , those can now be set via LeakCanary.refWatcher() . Updated the LeakDirectoryProvider API to centralize all file related responsibilities. RefWatcher is now constructed with a WatchExecutor which executes a Retryable , instead of an Executor that executes a Runnable . HeapDumper.NO_DUMP was renamed HeapDumper.RETRY_LATER Version 1.4 (2016-09-11) \u00b6 Fix false negative where GC root is of type android.os.Binder #482 Update HAHA to 2.0.3; clear compiler warnings #563 Correct some mistakes in German translation #516 Don\u2019t loop when storage permission denied #422 Remove old references to \u201c__\u201d prefixed resources #477 Fix permission crash for DisplayLeakActivity on M #382 Fix NPE when thread name not found in heap dump #417 Add version info to stacktrace #473 Version 1.4-beta2 (2016-03-23) \u00b6 Add reason for ignoring to analysis result #365 . Lower memory usage when parsing heap dumps on M #223 . Fix NPE in LeakCanaryInternals.isInServiceProcess() #449 . New ignored Android SDK leaks #297 , #322 . Use leakcanary-android-no-op in test builds #143 . Fixes to allow LeakCanary to work with ProGuard #398 . Optimize png assets #406 . Fix delete button not working on error views #408 . Add German translation #437 . Version 1.4-beta1 (2016-01-08) \u00b6 Switched to HAHA 2.0.2 with uses Perflib instead of MAT under the hood #219 . This fixes crashes and improves speed a lot. We can now parse Android M heap dumps #267 , although there are still memory issues (see #223 ). Excluded leaks are now reported as well and available in the display leak activity. Added ProGuard configuration for #132 . Many new ignored Android SDK leaks. Added excluded leaks to text report #119 . Added LeakCanary SHA to text report #120 . Added CanaryLog API to replace the logger: #201 . Renamed all resources to begin with leak_canary_ instead of __leak_canary #161 No crash when heap dump fails #226 . Add retained size to leak reports #162 . Public API changes \u00b6 AnalysisResult.failure is now a Throwable instead of an Exception . Main goal is to catch and correctly report OOMs while parsing. Added ARRAY_ENTRY to LeakTraceElement.Type for references through array entries. Renamed ExcludedRefs fields. Each ExcludedRef entry can now be ignored entirely or \u201ckept only if no other path\u201d. Added support for ignoring all fields (static and non static) for a given class. Version 1.3.1 (2015-05-16) \u00b6 Heap dumps and analysis results are now saved on the sd card: #21 . ExcludedRef and AndroidExcludedRefs are customizable: #12 #73 . 7 new ignored Android SDK leaks: #1 #4 #32 #89 #82 #97 . Fixed 3 crashes in LeakCanary: #37 #46 #66 . Fixed StrictMode thread policy violations: #15 . Updated minSdkVersion from 9 to 8 : #57 . Added LeakCanary version name to LeakCanary.leakInfo() : #49 . leakcanary-android-no-op is lighter, it does not depend on leakcanary-watcher anymore, only 2 classes now: #74 . Adding field state details to the text leak trace. A Toast is displayed while the heap dump is in progress to warn that the UI will freeze: #20 . You can customize the toast by providing your own layout named __leak_canary_heap_dump_toast.xml (e.g. you could make it an empty layout). If the analysis fails, the result and heap dump are kept so that it can be reported to LeakCanary: #102 . Update to HAHA 1.3 to fix a 2 crashes #3 46 Public API changes \u00b6 When upgrading from 1.3 to 1.3.1, previously saved heap dumps will not be readable any more, but they won\u2019t be removed from the app directory. You should probably uninstall your app. Added android.permission.WRITE_EXTERNAL_STORAGE to leakcanary-android artifact. LeakCanary.androidWatcher() parameter types have changed (+ExcludedRefs). LeakCanary.leakInfo() parameter types have changed (+boolean) ExcludedRef is now serializable and immutable, instances can be created using ExcludedRef.Builder . ExcludedRef is available in HeapDump AndroidExcludedRefs is an enum, you can now pick the leaks you want to ignore in AndroidExcludedRefs by creating an EnumSet and calling AndroidExcludedRefs.createBuilder() . AndroidExcludedRefs.createAppDefaults() & AndroidExcludedRefs.createAndroidDefaults() return a ExcludedRef.Builder . ExcludedRef moved from leakcanary-analyzer to leakcanary-watcher Version 1.3 (2015-05-08) \u00b6 Initial release. Dependencies \u00b6","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-281-2022-01-06","text":"This is a bugfix release, a quick follow up to 2.8 which had a few major issues \ud83d\ude05. If you haven\u2019t yet, you should definitely read the 2.8 changelog.","title":"Version 2.8.1 (2022-01-06)"},{"location":"changelog/#thanks","text":"Please thank @dicosta , @Goooler , @plnice , @preetha1326 for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.","title":"Thanks"},{"location":"changelog/#crash-fixes","text":"This patch release fixes not 1, not 2, but 3 crashes! \ud83d\udca5 #2268 WorkManager expedited request crashes before API 31. \ud83d\udca5 #2270 Updating LeakCanary.config crashes when AppWatcher is not installed. \ud83d\udca5 #2271 Analysis failure on API 25 because HashMap$Entry became HashMap$HashMapEntry (on API 25) before it finally changed to HashMap$Node . For more details, see the 2.8.1 Milestone and the full diff .","title":"Crash fixes \ud83d\udca5\ud83d\udca5\ud83d\udca5"},{"location":"changelog/#version-28-2022-01-04","text":"Note: please update to 2.8.1 instead.","title":"Version 2.8 (2022-01-04)"},{"location":"changelog/#preface","text":"The last release was 9 months ago. What happened?! Well, soon after releasing LeakCanary 2.7, I had my 2 nd baby, a wonderful daughter \ud83d\ude0d. Having 2 young kids leaves a lot less time available for Open Source work\u2026 but it\u2019s worth it! \u2015 P.Y.","title":"Preface"},{"location":"changelog/#thanks_1","text":"Please thank @aaronweihe , @alhah , @Andre-max , @AoraMD , @BraisGabin , @breezenan , @Goooler , @iliaskomp @Jeff11 , @jmnwong , @IdioticMadman , @keyur1sst , @lchen8 , @leinardi , @Maragues , @mars885 , @mateuszkwiecinski , @matiash , @maxxx , @preetha1326 , @SimonMarquis , @slavonnet , @Sonphil , @summerlyr , @SUPERCILEX , @utwyko , @ZacSweers , @ziranshang , @zoltish for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.","title":"Thanks"},{"location":"changelog/#improved-support-for-data-structure-internals","text":"\ud83e\udd13 Inspired by Android Studio , LeakCanary\u2019s node discovery during heap graph traversal is now abstracted away. This allows overlaying logical structure over common data structure internals. \ud83d\ude05 WHAT?! \ud83d\udc49 This means we can make known data structures look more like their APIs than their internals. For example, developers tend to think of setting a HashMap entry as map[\"key\"] = value rather than map.table[hash(\"key\")].next.next.next = Node(value) , which is what LeakCanary would previously show in its leak traces. Let\u2019s look at a HashMap example: class CheckoutController { val tabs = HashMap < String , Tab >() fun addItemsTab ( tab : Tab ) { tabs [ \"ItemsTab\" ] = tab } } If the Tab instance holds on to a view, we might see a leak trace that would look like this: \u2502 ... \u251c\u2500 com.example.CheckoutController instance \u2502 \u2193 CheckoutController.tabs \u251c\u2500 java.util.HashMap instance \u2502 \u2193 HashMap.table \u251c\u2500 java.util.HashMap$Node[] array \u2502 \u2193 HashMap$Node[42] \u251c\u2500 java.util.HashMap$Node instance \u2502 \u2193 HashMap$Node.next \u251c\u2500 java.util.HashMap$Node instance \u2502 \u2193 HashMap$Node.value \u251c\u2500 com.example.Tab instance \u2502 ... With the improved data structure support, the leak trace is much clearer (also note how the ItemsTab string key is now surfaced): \u2502 ... \u251c\u2500 com.example.CheckoutController instance \u2502 \u2193 CheckoutController.tabs \u251c\u2500 java.util.HashMap instance \u2502 \u2193 HashMap[ItemsTab] \u251c\u2500 com.example.Tab instance \u2502 ... Another benefit of this change is that leak signatures become less dependent of the runtime, and therefore are more consistent. This is especially true for any data structure that relies on a linked list ( HashMap , LinkedList , MessageQueue , \u2026). Currently LeakCanary supports a limited set of common data structures from Apache Harmony, Open JDK, and the Android SDK. Let me know what else you need!","title":"Improved support for data structure internals"},{"location":"changelog/#objectanimator-leaks","text":"LeakCanary will now detect leaks that trigger when forgetting to cancel ObjectAnimator . This new feature is enabled by the node discovery changes described above! Let\u2019s say you accidentally start an infinite ObjectAnimator and never cancel it, like so: class ExampleActivity : Activity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . main_activity ) findViewById < Button >( R . id . button ). setOnClickListener { view -> ObjectAnimator . ofFloat ( view , View . ALPHA , 0.1f , 0.2f ). apply { duration = 100 repeatMode = ValueAnimator . REVERSE repeatCount = ValueAnimator . INFINITE start () } } } } In previous releases, LeakCanary would detect that the animated view is leaking but it wouldn\u2019t be able to find the leak and instead would report it as an unreachable object: An unreachable object is still in memory but LeakCanary could not find a strong reference path from GC roots. LeakCanary now reports the leak and adds animator state information, helping detect and fix any infinite ObjectAnimator . \u252c\u2500\u2500\u2500 \u2502 GC Root: Thread object \u2502 \u251c\u2500 java.lang.Thread instance \u2502 Leaking: NO (the main thread always runs) \u2502 Thread name: 'main' \u2502 \u2193 Thread.threadLocals \u2502 ~~~~~~~~~~~~ ... \u251c\u2500 android.animation.ObjectAnimator instance \u2502 Leaking: UNKNOWN \u2502 mListeners = null \u2502 mPropertyName = null \u2502 mProperty.mName = alpha \u2502 mProperty.mType = java.lang.Float \u2502 mInitialized = true \u2502 mStarted = true \u2502 mRunning = true \u2502 mAnimationEndRequested = false \u2502 mDuration = 100 \u2502 mStartDelay = 0 \u2502 mRepeatCount = INFINITE (-1) \u2502 mRepeatMode = REVERSE (2) \u2502 \u2193 ObjectAnimator.mTarget \u2502 ~~~~~~~ \u2570\u2192 android.widget.Button instance Leaking: YES (View.mContext references a destroyed activity) To learn more, see this AOSP issue: ObjectAnimator.mTarget weak ref creates memory leaks on infinite animators .","title":"ObjectAnimator leaks"},{"location":"changelog/#leak-detection-in-tests","text":"Previous releases of leakcanary-android-instrumentation introduced a FailTestOnLeakRunListener which could run leak detection after each UI tests. Unfortunately FailTestOnLeakRunListener relied on a hack around androidx.test internals to report failures. The internals keep changing with every androidx.test release and breaking FailTestOnLeakRunListener \ud83d\ude2d. FailTestOnLeakRunListener is now deprecated (\ud83d\udc4b) and replaced by the DetectLeaksAfterTestSuccess test rule, which you can add to your test like any normal test rule. Additionally, you can call LeakAssertions.assertNoLeak() from anywhere in your instrumentation tests. You can also annotate tests with @SkipLeakDetection (for that to work you\u2019ll also need to set up the TestDescriptionHolder test rule). class CartTest { @get : Rule val rules = RuleChain . outerRule ( TestDescriptionHolder ) . around ( DetectLeaksAfterTestSuccess ()) . around ( ActivityScenarioRule ( CartActivity :: class . java )) @Test fun addItemToCart () { // ... } @SkipLeakDetection ( \"See #1234\" ) @Test fun removeItemFromCart () { // ... } }","title":"Leak detection in tests"},{"location":"changelog/#android-12","text":"Hopefully this time we fixed everything that Android 12 broke: missing exported:true tags, missing pending intent flags, and ForegroundServiceStartNotAllowedException crashes. If not, let us know! Can\u2019t wait for Android 13 to break everything again \ud83e\udd2c.","title":"Android 12"},{"location":"changelog/#workmanager","text":"Running an Android Service without crashing ( ForegroundServiceStartNotAllowedException \u2026) is becoming harder with every release of Android, so I got rid of the LeakCanary heap analyzer service! Instead, LeakCanary leverages WorkManager if you already have it as a dependency. If you don\u2019t use WorkManager, then LeakCanary will fall back to using a simple thread. Note: I recommend using at least WorkManager 2.7.0 as it adds the WorkRequest.Builder.setExpedited() API which LeakCanarty leverages if available.","title":"WorkManager"},{"location":"changelog/#multi-process","text":"Switching to WorkManager also impacts the LeakCanary multi process approach, which now leverages WorkManager remote jobs. Blog on how I got this working: WorkManager multi-process for libraries . Multi process is harder to get right so you should only use this if LeakCanary frequently runs out of memory while performing the heap analysis. Here are the updated set up steps: 1) Add the leakcanary-android-process dependency and keep the leakcanary-android dependency . dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8' debugImplementation 'com.squareup.leakcanary:leakcanary-android-process:2.8' } 2) Skip the initialization code in the Application class class ExampleApplication : Application () { override fun onCreate () { super . onCreate () if ( LeakCanaryProcess . isInAnalyzerProcess ( this )) { return } // normal init goes here, skipped in :leakcanary process. } } That\u2019s it! Note that event listeners (see below) related to the analysis will fire in the remote process.","title":"Multi process"},{"location":"changelog/#androidx-app-startup","text":"LeakCanary now optionally supports the AndroidX App Startup library . All you need to do is replace the leakcanary-android dependency with leakcanary-android-startup : dependencies { // Remove the normal leakcanary-android dependency // debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8' debugImplementation 'com.squareup.leakcanary:leakcanary-android-startup:2.8' } Note 1: leakcanary-android adds the code for automatic installl to leakcanary-android-core . If you\u2019re calling AppWatcher.manualInstall() , you can depend directly on leakcanary-android-core instead of leakcanary-android , and you won\u2019t need the disable any automatic install. Note 2: the same principle applies to leakcanary-object-watcher-android : it depends on leakcanary-object-watcher-android-core and adds automatic install, while leakcanary-object-watcher-android-startup leverages the App Startup library. Same for plumber-android , plumber-android-core and plumber-android-startup .","title":"AndroidX App Startup"},{"location":"changelog/#event-listeners","text":"LeakCanary.Config has a new eventListeners field allowing you to react to LeakCanary\u2019s lifecycle. If you want to customize this, you most likely should be keeping the default list of listeners and add or remove from it. For example, if you want to disable the LeakCanary toast: LeakCanary . config = LeakCanary . config . run { copy ( eventListeners = eventListeners . filter { it ! is ToastEventListener } ) } If you want to upload heap analysis results: LeakCanary . config = LeakCanary . config . run { copy ( eventListeners = eventListeners + EventListener { event -> if ( event is HeapAnalysisSucceeded ) { // Upload event.heapAnalysis } } ) } Note: Leakcanary.Config.onHeapAnalyzedListener still works but is now deprecated. Feedback welcome on this new API!","title":"Event listeners"},{"location":"changelog/#other-bug-fixes-and-improvements","text":"#2096 Opening / sharing heap dump files now supports LeakCanary as an option. #2210 First Compose dedicated object inspectors! #2121 Support for customizing the heap dumper. This list reflects only a subset of all changes. For more details, see the 2.8 Milestone and the full diff .","title":"Other bug fixes and improvements \ud83d\udc1b\ud83d\udd28"},{"location":"changelog/#version-27-2021-03-26","text":"Please thank @chao2zhang , @ihrupin , @jzbrooks , @msfjarvis , @reneargento , @Unpublished for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.","title":"Version 2.7 (2021-03-26)"},{"location":"changelog/#finer-grained-root-view-watching","text":"In version 2.6, LeakCanary added detection of root views retained after View.onDetachedFromWindow() . This helps find more leaks, but unfortunately some Android widgets keep a detached root view around to reattach it later (e.g. spinner). App developers also sometimes do the same with dialogs, keeping a single instance around and calling show() and hide() as needed. As a result, LeakCanary would report leaks that were actually not leaks. In version 2.7, the default behavior changed: LeakCanary will continue to detect leaks of toasts, but will ignore root views created by a PopupWindow (which is what Android widgets use). It will also ignore root views created by a dialog by default, and you can turn this back on by setting the leak_canary_watcher_watch_dismissed_dialogs resource boolean to true: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"leak_canary_watcher_watch_dismissed_dialogs\" > true </bool> </resources> This is implemented using a new Square library: Curtains .","title":"Finer grained root view watching"},{"location":"changelog/#targeting-android-12","text":"We fixed two issues for apps that want to target Android 12: #2074 Activities that use intent filters must declare the android:exported attribute. #2079 PendingIntent requires the FLAG_IMMUTABLE flag.","title":"Targeting Android 12"},{"location":"changelog/#bug-fixes-and-improvements","text":"#2075 Fixed crash when sharing heap dumps. #2067 Fixed crash when opening leaks from older versions (before 2.6) of LeakCanary. #2049 Fixed Plumber crash due to R8 shaking AndroidLeakFixes. #2084 Fixed Shark crash when used from multiple threads. #2054 \ud83d\ude48\ud83d\ude49\ud83d\ude4a Blocked Monkeys from deleting leaks. #2069 Added X button to the root leak activity (for custom devices with no back button) #2091 Added receiver details if LoadedApk shows up in the leaktrace. #2083 Added service status details (created or not) to leaktrace. #2099 Retry button if analysis fails. #2066 When heap analysis in UI tests is skipped and NoAnalysis is returned, NoAnalysis now includes a reason to help debug why it didn\u2019t run. #2000 The LeakCanary CI now leverages GitHub actions instead of Travis. For more details, see the 2.7 Milestone and the full diff .","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28"},{"location":"changelog/#version-26-christmas-release-2020-12-24","text":"Please thank @chao2zhang , @ChaosLeung , @LitterSun , @mickverm , @opatry , @Thomas-Vos , @tricknology , @rahul-a , @samoylenkodmitry , @sing0055 , @ubiratansoares for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f. This Christmas Release includes several external contributions and a bunch of cool new features! \ud83c\udf81\ud83c\udf81","title":"Version 2.6 - Christmas Release \ud83c\udf84 (2020-12-24)"},{"location":"changelog/#detecting-root-views-retained-after-viewondetachedfromwindow","text":"On Android, every displayed view hierarchy is attached to a window, whether it be the view hierarchy of an activity, a dialog, a toast or a chat head . After a view hierarchy is detached from its window, it should be garbage collected. LeakCanary already detects leaks of activity view hierarchies because retained detached views reference their activity context and LeakCanary detects activities retained after Activity.onDestroy() . In this new release, LeakCanary will now detect the leak of a dialog view hierarchy as soon as that dialog is dismissed, or any other view that is passed to WindowManager.removeView() .","title":"Detecting root views retained after View.onDetachedFromWindow()"},{"location":"changelog/#detecting-services-retained-after-serviceondestroy","text":"After an Android service is destroyed, it should be garbage collected. Unfortunately, the Android SDK does not provide any generic API to observe the service lifecycle. We worked around that using reflection on greylist APIs (details in #2014 ). Let\u2019s hope this motivates the Android team to build the APIs developers need .","title":"Detecting services retained after Service.onDestroy()"},{"location":"changelog/#configuring-retained-object-detection","text":"With the detection of 2 new types of retained objects, we\u2019re also adding APIs to configure which watchers should be installed as well as adding filtering capabilities. First, disable the automatic install: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"leak_canary_watcher_auto_install\" > false </bool> </resources> Then you can install LeakCanary manually. LeakCanary 2.6 comes with 4 watchers installed by default: ActivityWatcher , FragmentAndViewModelWatcher , RootViewWatcher , ServiceWatcher . Here\u2019s an example to get all the default watchers except ServiceWatcher : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val watchersToInstall = AppWatcher . appDefaultWatchers ( application ) . filter { it ! is ServiceWatcher } AppWatcher . manualInstall ( application = application , watchersToInstall = watchersToInstall ) } } LeakCanary introduces a new functional (SAM) interface implemented by ObjectWatcher : ReachabilityWatcher , with a ReachabilityWatcher.expectWeaklyReachable() method that replaces the now deprecated ObjectWatcher.watch() method. You can create the default watcher instances with a custom ReachabilityWatcher that delegates to AppWatcher.objectWatcher but filters out specific instances (e.g. BadSdkLeakingFragment ): class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val delegate = ReachabilityWatcher { watchedObject , description -> if ( watchedObject ! is BadSdkLeakingFragment ) { AppWatcher . objectWatcher . expectWeaklyReachable ( watchedObject , description ) } } val watchersToInstall = AppWatcher . appDefaultWatchers ( application , delegate ) AppWatcher . manualInstall ( application = application , watchersToInstall = watchersToInstall ) } } With these new configuration options, AppWatcher.config is now deprecated and a no-op.","title":"Configuring retained object detection"},{"location":"changelog/#dumping-the-heap-on-screen-off","text":"The default threshold to dump the heap is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . Up until now, visible meant \u201cthe app has at least one activity in started state\u201d. In LeakCanary 2.6, the app will now be considered not visible if the device screen is off , lowering the threshold to trigger heap dumps when you turn off the device screen.","title":"Dumping the heap on screen off"},{"location":"changelog/#leakcanary-for-releases","text":"LeakCanary 2.6 introduces a new artifact: leakcanary-android-release . This artifact exposes APIs to run a heap analysis in release builds, in production. Danger Everything about this is experimental. Running a heap analysis in production is not a very common thing to do, and we\u2019re still learning and experimenting with this. Also, both the artifact name and the APIs may change. dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6' // NEW: LeakCanary for releases! releaseImplementation 'com.squareup.leakcanary:leakcanary-android-release:2.6' // Optional: detect retained objects. This helps but is not required. releaseImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.6' } Here\u2019s a code example that runs a heap analysis when the screen is turned off or the app enters background, checking first if a Firebase Remote Config flag is turned on, and uploading the result to Bugsnag: class ReleaseExampleApplication : ExampleApplication () { // Cancels heap analysis if \"heap_analysis_flag\" is false. private val flagInterceptor by lazy { object : HeapAnalysisInterceptor { val remoteConfig : FirebaseRemoteConfig = TODO () override fun intercept ( chain : Chain ): HeapAnalysisJob . Result { if ( remoteConfig . getBoolean ( \"heap_analysis_flag\" )) { chain . job . cancel ( \"heap_analysis_flag false\" ) } return chain . proceed () } } } private val analysisClient by lazy { HeapAnalysisClient ( // Use private app storage. cacheDir is never backed up which is important. heapDumpDirectoryProvider = { cacheDir }, // stripHeapDump: remove all user data from hprof before analysis. config = HeapAnalysisConfig ( stripHeapDump = true ), // Default interceptors may cancel analysis for several other reasons. interceptors = listOf ( flagInterceptor ) + HeapAnalysisClient . defaultInterceptors ( this ) ) } private val analysisExecutor by lazy { Executors . newSingleThreadExecutor { thread ( start = false , name = \"Heap analysis executor\" ) { android . os . Process . setThreadPriority ( THREAD_PRIORITY_BACKGROUND ) it . run () } } } private val analysisCallback : ( Result ) -> Unit by lazy { val uploader = BugsnagHeapAnalysisUploader ( this @ReleaseExampleApplication ) { result -> if ( result is Done ) { uploader . upload ( result . analysis ) } } } override fun onCreate () { super . onCreate () // Delete any remaining heap dump (if we crashed) analysisExecutor . execute { analysisClient . deleteHeapDumpFiles () } // Starts heap analysis on background importance BackgroundTrigger ( application = this , analysisClient = analysisClient , analysisExecutor = analysisExecutor , analysisCallback = analysisCallback ). start () // Starts heap analysis when screen off ScreenOffTrigger ( application = this , analysisClient = analysisClient , analysisExecutor = analysisExecutor , analysisCallback = analysisCallback ). start () } /** * Call this to trigger heap analysis manually, e.g. from * a help button. * * This method returns a `HeapAnalysisJob` on which you can * call `HeapAnalysisJob.cancel()` at any time. */ fun triggerHeapAnalysisNow (): HeapAnalysisJob { val job = analysisClient . newJob () analysisExecutor . execute { val result = job . execute () analysisCallback ( result ) } return job } } The Bugsnag uploader: class BugsnagHeapAnalysisUploader ( applicationContext : Application ) { private val bugsnagClient : Client init { bugsnagClient = Client ( applicationContext , BUGSNAG_API_KEY , DO_NOT_ENABLE_EXCEPTION_HANDLER ) bugsnagClient . setSendThreads ( false ) } fun upload ( heapAnalysis : HeapAnalysis ) { when ( heapAnalysis ) { is HeapAnalysisSuccess -> { val exception = HeapAnalysisReport () bugsnagClient . notify ( exception ) { report -> val metaData = report . error . metaData metaData . addToTab ( \"Heap Analysis\" , \"result\" , heapAnalysis . toString ()) } } is HeapAnalysisFailure -> { // Please file any reported failure to // https://github.com/square/leakcanary/issues bugsnagClient . notify ( heapAnalysis . exception ) } } } // Exception with fake unique stacktrace to send all reports to the same error entry. class HeapAnalysisReport : Exception ( \"Check the HEAP ANALYSIS tab\" ) { override fun fillInStackTrace (): Throwable { stackTrace = arrayOf ( StackTraceElement ( \"HeapAnalysisReport\" , \"analyzeHeap\" , \"HeapAnalysisReport.kt\" , 1 ) ) return this } } companion object { private const val BUGSNAG_API_KEY = YOUR_BUGSNAG_API_KEY private const val DO_NOT_ENABLE_EXCEPTION_HANDLER = false } }","title":"LeakCanary for releases"},{"location":"changelog/#more-leak-fixes-in-plumber","text":"We added 3 new automatic fixes for known AOSP leaks in plumber-android (details: #1993 ). As a reminder, plumber-android is automatically included when you add leakcanary-android , and you can add it manually for build types that don\u2019t include LeakCanary: dependencies { // leakcanary-android adds plumber-android to debug builds debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6' // This adds plumber-android to all build types implementation 'com.squareup.leakcanary:plumber-android:2.6' }","title":"More leak fixes in Plumber"},{"location":"changelog/#bug-fixes-and-improvements_1","text":"#1948 Leakcanary is now compiled against Kotlin 1.4 (while staying 1.3 compatible) to support Functional (SAM) interfaces . #1956 The retained object size is displayed as a human readable output (KB, MB, \u2026). #1976 Improved default object inspectors and leak finders for View and Context . #1972 Fields are printed with the parent class name that holds the field in leak traces. #1981 Fixed StrictMode policy violation (main thread read from disk). #1977 Report objects that are not strongly reachable. #2018 & #2019 Fixed crashes in LeakCanary UI (discovered by Monkey tests). #2015 Fixed crash on Android < 16. #2023 Fixed crash in plugin projects. For more details, see the 2.6 Milestone and the full diff .","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28"},{"location":"changelog/#version-25-2020-10-01","text":"Please thank @Amokrane , @Armaxis , @askont , @chao2zhang , @daniil-shevtsov , @eygraber , @msfjarvis , @mzgreen , @lchen8 , @rpattabi , @sahil2441 , @SylvainGirod , @vhow for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.","title":"Version 2.5 (2020-10-01)"},{"location":"changelog/#heap-analysis-is-twice-as-fast","text":"No one asked, so we delivered! We rewrote several core components in Shark (LeakCanary\u2019s heap analyzer) to dramatically reduce IO reads and allocations while keeping memory constant. More details on Twitter: thread by @ArtemChubaryan and thread by @Piwai .","title":"Heap analysis is twice as fast \ud83d\udc24\ud83d\udca8"},{"location":"changelog/#compute-retained-size-within-the-leak-trace","text":"Previously, LeakCanary computed the retained size for the leaking object (the last object in the leak trace). However, the bad reference causing objects to leak is often higher up in the leak trace and everything that it holds onto is actually leaking. So LeakCanary now computes the retained size for all the objects in the leaktrace that have a LEAKING or UNKNOWN status : \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 com.example.MySingleton class \u2502 Leaking: NO (a class is never leaking) \u2502 \u2193 static MySingleton.leakedView \u2502 ~~~~~~~~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 Retaining 46326 bytes in 942 objects \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.MainActivity instance \u200b Leaking: YES (Activity#mDestroyed is true) \u200b Retaining 1432 bytes in 36 objects","title":"Compute retained size within the leak trace"},{"location":"changelog/#disable-leakcanary-from-the-ui","text":"New toggle to disable heap dumping , which can be useful for QA, or when doing a product demo. LeakCanary will still show a notification when an object is retained.","title":"Disable LeakCanary from the UI"},{"location":"changelog/#deobfuscating-hprof-files","text":"The Shark CLI can now deobfuscate heap dumps : brew install leakcanary-shark shark-cli --hprof heapdump.hprof -m mapping.txt deobfuscate-hprof","title":"Deobfuscating hprof files"},{"location":"changelog/#bug-fixes-and-improvements_2","text":"Heap analysis text results now wrap to a max width when sharing them from the LeakCanary activity or printing to logcat. This will make it harder to miss details that are lost at the end of long lines of text. The leak_canary_watcher_auto_install , leak_canary_allow_in_non_debuggable_build and leak_canary_plumber_auto_install resource booleans were meant to be public . We sprinkled a few @JvmStatic to help Java consummers . Fixed crash when no browser installed . Use distinct group for LeakCanary notifications . The heap analysis result now includes the heap dump duration because it looks like Android 11 heap dumps are sometimes super slow . We also added more perf related metrics . Disable logging when AppWatcher runs in release builds. Highlight library leak patterns directly within the leak traces . Improved inspections for Context, View and ContextImpl . For more details, see the 2.5 Milestone and the full diff .","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28"},{"location":"changelog/#version-24-2020-06-10","text":"Please thank @0x109 , @andersu , @antoniomerlin , @bishiboosh , @ckesc , @jrodbx , @LouisCAD , @marcardar , @OlivierGenez , @pyricau , @runningcode , @seljad , @worldsnas for their contributions, bug reports and feature requests.","title":"Version 2.4 (2020-06-10)"},{"location":"changelog/#plumber-android-is-a-new-artifact-that-fixes-known-android-leaks","text":"LeakCanary reports all leaks, including leaks caused by a known bug in 3 rd party code that you do not have control over (reported as Library leaks ). That can be annoying! LeakCanary now ships with a new dependency, plumber-android , which performs hacks at runtime to fix some of these known leaks. This releases has fixes for 11 known leaks , but this is just the beginning. Contributions welcome! \ud83d\ude4f Note that since the leakcanary-android dependency is usually added as a debugImplementation dependency, the plumber-android is transitively added only in debug builds, so it will not fix leaks in your release builds. You can add the dependency directly as implementation to get these fixes in release builds as well: dependencies { implementation 'com.squareup.leakcanary:plumber-android:2.4' } Warning While several of these fixes already ship in release builds of Square apps, this is the first official release of plumber-android , so you should consider it experimental .","title":"plumber-android is a new artifact that fixes known Android leaks \ud83d\udebd\ud83d\udd27"},{"location":"changelog/#analyzing-leaks-from-the-cli-is-easier-than-ever","text":"The Shark CLI can now be installed via Homebrew brew install leakcanary-shark You can then look for leaks in apps on any connected device, for example: $ shark-cli --device emulator-5554 --process com.example.app.debug analyze","title":"Analyzing leaks from the CLI is easier than ever \ud83c\udf7a"},{"location":"changelog/#support-for-android-test-orchestrator","text":"If you set up LeakCanary to report test failures when detecting leaks in instrumentation tests , it now works with Android Test Orchestrator as well. No change required, LeakCanary will automatically detect thatAndroid Test Orchestrator is running and hook into it.","title":"Support for Android Test Orchestrator \ud83c\udfbc"},{"location":"changelog/#no-more-master-branch","text":"The branch name master comes from the master / slave terminology. We renamed the default branch to main , a small step towards making the LeakCanary community a safer space. Here\u2019s a good thread on this topic .","title":"No more master branch"},{"location":"changelog/#bug-fixes-and-improvements_3","text":"URLs in Library Leak descriptions are now clickable Fixed ordering issues causing improper config with manual setup. A related change is that AppWatcher.Config.enabled is now deprecated. Fixed possible OutOfMemoryError failure when computing retained size: we were loading to memory large arrays from the heap dump just to get their size. For more details, see the 2.4 Milestone and the full diff .","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28"},{"location":"changelog/#version-23-2020-04-08","text":"This is a minor release on the feature front, but a large release on the documentation front! Many thanks to @adamfit , @Amokrane , @Armaxis , @artnc , @burakeregar , @ClaasJG , @clementcontet , @ckesc , @cketti , @fbenbassat , @Guneetgstar , @Igorxp5 , @JLLeitschuh , @KidAndroid , @ligi , @mzgreen , @pyricau , @sprintuu , @tevjef , @thrlr123 for the contributions, bug reports and feature requests. We asked for help and immediately started seeing more contributions. Thanks all! Check out the How to help page.","title":"Version 2.3 (2020-04-08)"},{"location":"changelog/#leakcanary-will-now-crash-in-release-builds","text":"Despite the documentation insisting on using debugImplementation , we\u2019ve seen apps ship LeakCanary in release builds . Mistakes happen, so we\u2019ve made that mistake harder to miss by making LeakCanary crash when included in release builds . Learn More: LeakCanary in release builds .","title":"LeakCanary will now crash in release builds"},{"location":"changelog/#doc-site","text":"The doc site content has changed quite a bit! We applied advice from Google\u2019s tech writing guide . If you\u2019ve been confused by Library Leaks before, check out see the new Categorizing leaks section. Take a look around, let us know what you think.","title":"Doc site \ud83d\udec0\ud83d\udca5"},{"location":"changelog/#bug-fixes-and-improvements_4","text":"The new deobfuscation Gradle plugin wasn\u2019t working with Gradle 3.6 , this is now fixed. Also removed the requirement for the plugin to be applied after AGP . Fixed 2 crashes ( #1768 & #1769 ) in the LeakCanary UI found by a sneaky monkey runner \ud83d\ude48. The LeakCanary UI updates immediately when a heap analysis is added or deleted. Fixed a crash when updating from LeakCanary 2.0 . The About section of the LeakCanary now surfaces whether heap dumping is currently enabled . Fixed process not exiting in SharkCLI on Windows. Improved error message when obfuscation mappings appear to be missing. For more details, see the 2.3 Milestone and the full diff .","title":"Bug fixes and improvements \ud83d\ude09"},{"location":"changelog/#version-22-2020-02-05","text":"We\u2019ve got some good stuff for the first release of the decade! Many thanks to @AndroidInternal , @Armaxis , @lic2050 , @mzgreen , @orenktaboola , @personshelldon , @Plastix , @pyricau for the contributions, bug reports and feature requests.","title":"Version 2.2 (2020-02-05)"},{"location":"changelog/#viewmodel-leak-detection","text":"Android ViewModels are really cool! Their lifecycle is much nicer than fragments or activities, but sometimes mistakes happen. LeakCanary will now automatically detect ViewModel leaks and report any ViewModel instance retained after its onCleared() method was called.","title":"ViewModel leak detection"},{"location":"changelog/#android-tv","text":"LeakCanary is finally coming to big screens near you! Best part - no additional setup is required, just enable it like you would for a mobile device . Now whenever there\u2019s a leak - you will see a helpful Toast appear with all the details. Make sure to check out our new Android TV section and chill!","title":"Android TV"},{"location":"changelog/#java-friendly-config-builders","text":"It was brought to our attention that configuring LeakCanary and AppWatcher was a miserable experience from Java code. Well, not anymore! Now you can use LeakCanary.Config.Builder and AppWatcher.Config.Builder to have idiomatic Java when updating the configurations. For example: LeakCanary.Config config = LeakCanary.getConfig().newBuilder() .retainedVisibleThreshold(3) .computeRetainedHeapSize(false) .build(); LeakCanary.setConfig(config); If you notice any other problems when using LeakCanary from Java, please file an issue ! We take Java-interop seriously and will be happy to improve LeakCanary\u2019s API! For more details, see the 2.2 Milestone and the full diff .","title":"Java-friendly Config builders"},{"location":"changelog/#version-21-2019-12-31","text":"A special New Year\u2019s Eve release \ud83e\udd73, the next release will be in another decade \ud83d\ude0e! Many thanks to @adamfit , @alexander-smityuk , @Armaxis , @BraisGabin , @devism , @ditclear , @jrodbx , @jstefanowski , @Maragues , @mzgreen , @pyricau for the contributions, bug reports and feature requests.","title":"Version 2.1 (2019-12-31)"},{"location":"changelog/#a-gradle-plugin-for-obfuscated-apps","text":"It\u2019s fairly common for teams to have a QA build that is tested before making the release build. Usually that build will be obfuscated (via Proguard or R8), but also add LeakCanary to detect leaks during QA. This leads to obfuscated leak traces, which are hard to understand \ud83e\udd2f. Check out our new Gradle deobfuscation plugin and rejoice!","title":"A Gradle plugin for obfuscated apps"},{"location":"changelog/#ui-twix-tweaks","text":"In 2.0 we changed the LeakCanary UI and UX, and built a foundation on which 2.1 extends. Since 2.0, Leaks are grouped by their distinct signature. In 2.1 there\u2019s a New tag that will show until you open up a leak. There\u2019s also a Library Leak tag for leaks that are known to be caused by a bug in the Android Framework or Google libraries, and the library leak description now shows up in the UI. The type of the Java objects (class, instance, array) is now displayed in the LeakTrace, e.g. see FontsContract class and ExampleApplication instance above. The type of the GC root now shows up at the root of the leak trace. Makes sense! The leak result notification has an importance now set to MAX so that it\u2019ll show up right in your face. If you turn it off, the canary will haunt you in your dreams \ud83d\udc24\ud83d\udc7b. To save your sanity and your device battery, automatic heap dumps now won\u2019t happen more often than once per minute. The resource id name for View instances is now displayed in the leak trace. You shouldn\u2019t look at the implementation . \u251c\u2500 android.widget.TextView instance \u2502 View.mID = R.id.helper_text","title":"UI twix tweaks"},{"location":"changelog/#documentation-goodies","text":"The Fundamentals page was entirely rewritten, split into 3 pages and moved to its own tab. Please read it and provide feedback! At Square, we have been uploading leaks to Bugsnag for 3 years now, so that no leak ever gets missed. Follow this recipe ! Did you know you can run LeakCanary in a JVM ?","title":"Documentation goodies"},{"location":"changelog/#api-breaking-bettering-changes","text":"The APIs of the Leak and LeakTrace classes have significantly changed, e.g. all LeakTrace instances with an identical signature are grouped under the same Leak object. Despite these breaking changes, this release version is a minor update. Oh noes, what about semantic versioning \ud83d\ude31? Ask Don Quixote. You can now customize the way LeakCanary finds the leaking objects in the heap dump. For example, here\u2019s the configuration SharkCli uses to find leaks in heap dumps of apps that don\u2019t even have the LeakCanary dependency: LeakCanary . config = LeakCanary . config . copy ( leakingObjectFinder = FilteringLeakingObjectFinder ( AndroidObjectInspectors . appLeakingObjectFilters ) ) LeakCanary automatically disables itself in tests by detecting that the org.junit.Test is in the classpath. Unfortunately, some apps ship Junit in their app debug classpath (e.g. when using OkHttp MockWebServer). You can now customize which class is used to detect tests: <resources> <string name= \"leak_canary_test_class_name\" > assertk.Assert </string> </resources>","title":"API breaking bettering changes"},{"location":"changelog/#interactive-cli","text":"Shark CLI was rewritten on top of Clikt : $ shark-cli Usage: shark-cli [ OPTIONS ] COMMAND [ ARGS ] ... ^ ` . . = \"\" = . ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / ` ~~~--__ \\ / \\ / { \\_ __----~~ ' `~~-_/' - = \\/ = - '\\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / ' . . ' ' ._. ' _ | ` ~~ ` | _ / | \\ / | \\ Options: -p, --process NAME Full or partial name of a process, e.g. \"example\" would match \"com.example.app\" -d, --device ID device/emulator id -m, --obfuscation-mapping PATH path to obfuscation mapping file --verbose / --no-verbose provide additional details as to what shark-cli is doing -h, --hprof FILE path to a .hprof file --help Show this message and exit Commands: interactive Explore a heap dump. analyze Analyze a heap dump. dump-process Dump the heap and pull the hprof file. strip-hprof Replace all primitive arrays from the provided heap dump with arrays of zeroes and generate a new \"-stripped.hprof\" file. There\u2019s a new interactive command which enables exploring the heap dump from the command line: $ shark-cli -h heapdump.hprof interactive Enter command [ help ] : help Available commands: analyze Analyze the heap dump. class NAME@ID Show class with a matching NAME and Object ID. instance CLASS_NAME@ID Show instance with a matching CLASS_NAME and Object ID. array CLASS_NAME@ID Show array instance with a matching CLASS_NAME and Object ID. ->instance CLASS_NAME@ID Show path from GC Roots to instance. ~>instance CLASS_NAME@ID Show path from GC Roots to instance, highlighting suspect references. help Show this message. exit Exit this interactive prompt. We\u2019re currently exploring the idea of adding support for SQL queries , feedback welcome! For more details, see the 2.1 Milestone and the full diff .","title":"Interactive CLI"},{"location":"changelog/#version-20-2019-11-27","text":"In the past 7 months, LeakCanary went through 3 alphas and 5 betas, encompassing 23 contributors over 493 commits, 35826 insertions and 10156 deletions.","title":"Version 2.0 (2019-11-27)"},{"location":"changelog/#should-i-upgrade","text":"YES! LeakCanary 2 is so much better, it might make you excited when you see a new memory leak. Follow the upgrade guide , you won\u2019t regret it!","title":"Should I upgrade?"},{"location":"changelog/#so-whats-changed-since-163","text":"Everything. The LeakCanary codebase went from ~6000 lines of Java to ~16000 lines of Kotlin, excluding comments & blanks. Isn\u2019t Kotlin supposed to drastically reduce the amount of boilerplate code? Absolutely! And it did. But then, we wrote more code. LeakCanary used to depend on HAHA , a repackaging of perflib , the heap dump parser used by Android Studio. Unfortunately perflib was slow and used too much memory, so LeakCanary now includes its own heap dump parser: Shark . The extra code comes from Shark, but also from having a lot more automated tests, and an improved UI layer. One major difference: when the app is in foreground, LeakCanary 2 will not trigger on every retained instance. Instead it will wait until the app goes in background or to reach a threashold of 5 retained instances in foreground. The analysis will then find all the leaks at once, and group identical leaks in the results UI. Please read the Fundamentals section to learn more!","title":"So, what's changed since 1.6.3?"},{"location":"changelog/#random-facts","text":"You can customize the Leaks launcher icon and label: learn more here . If you ` press on your main activity launcher icon, you should see a LeakCanary dynamic shortcut. You can then long press that to drop it on your home screen, and the launcher shows that it\u2019s the leaks launcher for your app. Out of the box, LeakCanary tracks all fragments flavors: AOSP, Support Library and Android X. From within the leak screen, you can share a leak to stack overflow. You can also share a heap dump, or import and analyze a heap dump from another device. You can run LeakCanary from your computer command line, on any debuggable app even if that app doesn\u2019t have LeakCanary: learn more here . The new documentation is fully searchable and includes the API documentation. Try the search bar \u2934. A large 160Mb heap dump uses 2Gb memory when opening it in Android Studio, but only 40Mb with Shark.","title":"Random facts"},{"location":"changelog/#changes-since-20-beta-5","text":"Shark CLI supports multiple connected devices #1642 Fixed missing sources from Maven Central #1643 Updated notification icon to avoid confusion with Twitter DM notifications, and added icons to bottom navigation bar #1648 Automatic leak detection for support library fragments #1611 Many thanks to @AndreasBoehm , @jrodbx , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0 Milestone and the full diff .","title":"Changes since 2.0 Beta 5"},{"location":"changelog/#version-20-beta-5-2019-11-25","text":"Major bugfix: native gc roots were accidentally ignored in Beta 4, as a result some leaks were not found #1634 Fixed Lint warning ( leak_canary_about_message string triggered multiple substitutions warning) #1630 Many thanks to @DanEdgarTarget , @msfjarvis , @PaulWoitaschek , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-5 Milestone and the full diff .","title":"Version 2.0 Beta 5 (2019-11-25)"},{"location":"changelog/#version-20-beta-4-2019-11-18","text":"Improved string rendering for heap analysis results UX redesign #1445 Support for pattern matching of native reference leaks #1562 Added support for deobfuscation using Proguard mapping files in Shark #1499 . This isn\u2019t directly supported in LeakCanary yet. Added support for extracting metadata from the heap dump (see the recipe ) #1519 Improved auto disabling of LeakCanary in Unit and UI tests #1552 Several performance improvements when parsing heap dumps Fixed several bugs and crashes Added new known leak patterns Many thanks to @Armaxis , @BraisGabin , @bric3 , @elihart , @fernandospr , @flickator , @gabrysgab , @JorgeDLS , @lannyf77 , @msfjarvis , @mzgreen , @ozmium , @PaulWoitaschek , @pyricau , @shelpy , @vRallev , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-4 Milestone and the full diff .","title":"Version 2.0 Beta 4 (2019-11-18)"},{"location":"changelog/#version-20-beta-3-2019-08-22","text":"Baseline memory usage for large hprofs divided by 3 and removed memory spikes #1543 Fixed crash when LeakCanary is initialized from another process #1529 Java local references are deprioritized to look for longer alternative paths #1525 Fixed JavaLocalPattern not matching on Lollipop #1524 Many thanks to @Armaxis , @elihart , @emartynov , @hmcgreevy-instil , @pyricau for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-3 Milestone and the full diff .","title":"Version 2.0 Beta 3 (2019-08-22)"},{"location":"changelog/#version-20-beta-2-2019-08-02","text":"Fixed Leak analysis failed: Object id not found in heap dump. #1516 10x speed increase of hprof indexing on large heap dumps #1520 Many thanks to @kolphi , @pyricau , @ZacSweers for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-2 Milestone and the full diff .","title":"Version 2.0 Beta 2 (2019-08-02)"},{"location":"changelog/#version-20-beta-1-2019-07-30","text":"New standalone library! Shark is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a CLI : you can now run shark-cli analyze-process com.example.myapp from your computer. New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select \u201cHeap Explorer\u201d. This is still experimental and not very user friendly, contributions welcome! Large API rewrite to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became AppWatcher , RefWatcher became ObjectWatcher , AndroidExcludedRefs became AndroidReferenceMatchers , AnalysisResultListener became OnHeapAnalyzedListener , AndroidLeakTraceInspectors became AndroidObjectInspectors . The entire API surface is now documented and the documentation is available on this website: see the LeakCanary API tab at the top. Removed the dependency on Android X . No more configuration issues! #1462 Added Proguard rules for LeakCanary and ObjectWatcher. #1500 Display LeakCanary version in the About screen. #1448 Bug fixes, new reference matchers and object inspectors Many thanks to @arctouch-carlosottoboni , @jemaystermind , @kushagrakumar27 , @pyricau , @snkashis for the contributions, bug reports and feature requests. For more details, see the 2.0-beta-1 Milestone and the full diff .","title":"Version 2.0 Beta 1 (2019-07-30)"},{"location":"changelog/#version-20-alpha-3-2019-07-04","text":"#1401 LeakCanary can now import all hprof files created from prior LeakCanary versions. #1414 New API: RefWatcher.retainedInstances which returns the instances that are currently considered retained. #1419 New APIs: LeakCanary.Config.maxStoredHeapDumps (default 7) and LeakCanary.Config.requestWriteExternalStoragePermission (default false). LeakCanary won\u2019t ask for the external storage permission anymore by default. #1338 API change: LeakCanary.Config.exclusionsFactory replaced with LeakCanary.Config.knownReferences (simpler use), LeakCanary.Config.leakInspectors and LeakCanary.Config.labelers merged into LeakCanary.Config.leakTraceInspectors which provides access to the entire leak trace as well as a new graph oriented API that replaces the low level hprof parser API. #1382 LeakCanary now disables automatic heap dumping when running in AndroidX UI tests. #1424 API rename: RefWatcher.hasRetainedReferences => RefWatcher.hasRetainedInstances , RefWatcher.retainedReferenceCount => RefWatcher.retainedInstanceCount , RefWatcher.hasWatchedReferences => RefWatcher.hasWatchedInstances , RefWatcher.removeKeysRetainedBeforeHeapDump => RefWatcher.removeInstancesRetainedBeforeHeapDump , RefWatcher.clearWatchedReferences => RefWatcher.clearWatchedInstances . #1432 #1438 #1440 New \u201cwon\u2019t fix\u201d leaks and leak trace inspectors #1374 #1364 #1366 #1417 #1399 #1416 #1407 #1427 #1385 Bug and crash fixes Many thanks to @1step2hell , @afollestad , @ansman , @bjdodson , @BraisGabin , @EBfVince , @jaredsburrows , @pforhan , @pyricau , @tellypresence , @wiyarmir for the contributions, bug reports and feature requests. For more details, see the 2.0-alpha-3 Milestone and the full diff .","title":"Version 2.0 Alpha 3 (2019-07-04)"},{"location":"changelog/#version-20-alpha-2-2019-05-21","text":"#1040 Import and analyze hprof files from other devices #1344 Computing retained size #1325 New notification showing current count of retained instances #1079 \u201cExcluded\u201d leaks have been renamed to \u201cWon\u2019t fix\u201d leaks to clarify meaning. #1328 New leaks are called out in the UI. #1327 LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds. #1173 Experimental: now reporting leaks that only go through weak references (previously reported as \u201cno path to instance\u201d) #1339 Readded support for Thread name based exclusions #1312 Fixed bug causing LeakCanary to stop detecting leaks after the app is killed. #1310 #1313 #1314 #1340 #1337 Many API changes #1296 #1293 #1306 #1336 Fixed several crashes. Many thanks to @forrestbice , @Foso , @Goddchen , @marcosholgado , @orionlee , @pyricau , @satoshun , @ZacSweers for the contributions! For more details, see the 2.0-alpha-2 Milestone and the full diff .","title":"Version 2.0 Alpha 2 (2019-05-21)"},{"location":"changelog/#version-20-alpha-1-2019-04-23","text":"New logo , thanks @flickator ! Entirely rewritten to 100% Kotlin Multiple leaks detected in one analysis The heap is dumped when the app goes in the background, or when a minimum of 5 leaks is reached in the foreground. Leak grouping Leaks that share similar causes are grouped in the UI. New screens to see the list of groups and each group. Improved leaktrace strings to highlight leak causes. Leaks can be shared to Stack Overflow New library: LeakSentry . Detects when objects are leaking and triggers LeakCanary Can be used independently in production, for instance to report the number of leaking instances on an OutOfMemoryError crash. New heap parser Uses 90% less memory and 6 times faster than the prior heap parser. Runs in the same process as the app on a low priority thread. No more dependency on Perflib and TroveJ. New dependency on Okio. The old parser is still available as leakcanary-android-perflib but will be removed after alpha. Labelers can add any string content to leak elements 0 code setup, just add the one debug dependency. Simpler configuration options Updated from support library to Android X Many thanks to @BraisGabin , @colinmarsch , @jrodbx , @flickator , @JakeWharton , @pyricau , @WhatsEmo for the contributions! For more details, see the 2.0-alpha-1 Milestone and the full diff .","title":"Version 2.0 Alpha 1 (2019-04-23)"},{"location":"changelog/#version-163-2019-01-10","text":"#1163 Fixed leaks being incorrectly classified as \u201cno leak\u201d due to missed GC Roots. #1153 LeakCanary.isInAnalyzerProcess now correctly returns true in the analyzer process prior to any first leak (could be triggered by starting the leak result activity). #1158 Stopped enabling DisplayLeakActivity when not using DisplayLeakService. #1135 Fixed IndexOutOfBoundsException for leak traces of size 1. #1163 Keep \u201cno leak\u201d heap dumps. Many thanks to @KMaragh , @pyricau , @SebRut for the code contributions! For more details, see the 1.6.3 Milestone and the full diff .","title":"Version 1.6.3 (2019-01-10)"},{"location":"changelog/#version-162-2018-10-16","text":"#1067 Fixed TransactionTooLargeException crash (leak analysis would never complete). #1061 Detection of Fragment view leaks after Fragment#onDestroyView(). #1076 Added the FOREGROUND_SERVICE permission for Android P. #1062 The LeakCanary toast now always shows correctly. It doesn\u2019t show if there is no activity in foreground. #1115 Reenabled the DisplayLeakActivity icon on fresh installs. #1100 Added nullability annotations to improve Kotlin support. Updates to excluded leaks ( commits ). Updates to reachability inspectors ( commits ). Many thanks to @fractalwrench , @ZacSweers , @Goddchen , @igokoro , @IlyaGulya , @JakeWharton , @javmarina , @jokermonn , @jrodbx , @Parseus , @pyricau , @scottkennedy for the code contributions!","title":"Version 1.6.2 (2018-10-16)"},{"location":"changelog/#public-api-changes","text":"Subclasses of AbstractAnalysisResultService should now override onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap) instead of onHeapAnalyzed(@NonNull HeapDump heapDump, @NonNull AnalysisResult result) For more details, see the 1.6.2 Milestone and the full diff .","title":"Public API changes"},{"location":"changelog/#version-161-2018-06-21","text":"#727 Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak. #1011 We noticed that computing the retained heap size could take a long time, so it\u2019s now optional and off by default. #633 Support for detecting leaks in instrumentation tests ( see the wiki ). #985 Ability to convert leak traces into stack traces for easy remote reporting ( see the wiki ). #983 Support for watching destroyed Fragments. #846 LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+. The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found. #775 Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library. #930 DisplayLeakActivity has a responsive icon. #685 Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors). #999 Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1). Several bug and crash fixes. Many thanks to @AdityaAnand1 , @alhah , @christxph , @csoon03 , @daqi , @JakeWharton , @jankovd , @jrodbx , @kurtisnelson , @NightlyNexus , @pyricau , @SalvatoreT , @shmuelr , @tokou , @xueqiushi for the code contributions! Note: we made a 1.6 release but quickly followed up with 1.6.1 due to #1058 .","title":"Version 1.6.1 (2018-06-21)"},{"location":"changelog/#public-api-changes_1","text":"The installed ref watcher singleton is now available via LeakCanary.installedRefWatcher() AnalysisResult.leakTraceAsFakeException() returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics. New InstrumentationLeakDetector and FailTestOnLeakRunListener APIs for detecting leaks in instrumentation tests. New Reachability.Inspector and RefWatcherBuilder.stethoscopeClasses() API to establish reachability and help identify leak causes. Watching activities can be disabled with AndroidRefWatcherBuilder.watchActivities(false) , watching fragments can be disabled with AndroidRefWatcherBuilder.watchFragments(false) LeakCanary.setDisplayLeakActivityDirectoryProvider() is deprecated and replaced with LeakCanary.setLeakDirectoryProvider() New RefWatcherBuilder.computeRetainedHeapSize() API to enable the computing of the retained heap size (off by default). For more details, see the 1.6.1 Milestone and the full diff .","title":"Public API changes"},{"location":"changelog/#version-154-2017-09-22","text":"Restore Java 7 compatibility in leakcanary-watcher","title":"Version 1.5.4 (2017-09-22)"},{"location":"changelog/#version-153-2017-09-17","text":"Fix broken 1.5.2 build Convert leakcanary-watcher from Android library to Java library Disable finish animations in RequestStoragePermissionActivity Corrected README sample for Robolectric tests For more details, see the full diff .","title":"Version 1.5.3 (2017-09-17)"},{"location":"changelog/#version-152-2017-08-09","text":"New excluded leaks Move Leakcanary UI into leak analyzer process Ignore computing retained sizes for bitmaps on O+ Add notification channel for persistent messages on O+ Exclude permission activity from recents menu Updated README and sample for handling Robolectric tests For more details, see the full diff .","title":"Version 1.5.2 (2017-08-09)"},{"location":"changelog/#version-151-2017-04-25","text":"New excluded leaks Fix java.util.MissingFormatArgumentException in DisplayLeakService Separate task affinities for different apps Bump minSdk to 14 Fix HahaHelper for O Preview For more details, see the full diff .","title":"Version 1.5.1 (2017-04-25)"},{"location":"changelog/#version-15-2016-09-28","text":"New excluded leaks Added LeakCanary.isInAnalyzerProcess() to the no-op jar Fixed several file access issues: No more cleanup on startup, we rotate the heap dump files on every new heap dump. LeakCanary now falls back to the app directory until it can write to the external storage. Leak notifications now each use a distinct notification instead of erasing each other. If LeakCanary can\u2019t perform a heap dump for any reason (e.g. analysis in progress, debugger attached), it retries later with an exponential backoff. Added confirmation dialog when user deletes all leaks. Replace the two LeakCanary configuration methods with a builder that provides more flexibility, see LeakCanary.refWatcher() . For more details, see the full diff .","title":"Version 1.5 (2016-09-28)"},{"location":"changelog/#public-api-changes_2","text":"New HeapAnalyzer.findTrackedReferences() method for headless analysis when you have no context on what leaked. Added LeakCanary.isInAnalyzerProcess() to the no-op jar Added LeakCanary.refWatcher() which returns an AndroidRefWatcherBuilder that extends RefWatcherBuilder and lets you fully customize the RefWatcher instance. Removed LeakCanary.install(Application, Class) and LeakCanary.androidWatcher(Context, HeapDump.Listener, ExcludedRefs) . Removed R.integer.leak_canary_max_stored_leaks and R.integer.leak_canary_watch_delay_millis , those can now be set via LeakCanary.refWatcher() . Updated the LeakDirectoryProvider API to centralize all file related responsibilities. RefWatcher is now constructed with a WatchExecutor which executes a Retryable , instead of an Executor that executes a Runnable . HeapDumper.NO_DUMP was renamed HeapDumper.RETRY_LATER","title":"Public API changes"},{"location":"changelog/#version-14-2016-09-11","text":"Fix false negative where GC root is of type android.os.Binder #482 Update HAHA to 2.0.3; clear compiler warnings #563 Correct some mistakes in German translation #516 Don\u2019t loop when storage permission denied #422 Remove old references to \u201c__\u201d prefixed resources #477 Fix permission crash for DisplayLeakActivity on M #382 Fix NPE when thread name not found in heap dump #417 Add version info to stacktrace #473","title":"Version 1.4 (2016-09-11)"},{"location":"changelog/#version-14-beta2-2016-03-23","text":"Add reason for ignoring to analysis result #365 . Lower memory usage when parsing heap dumps on M #223 . Fix NPE in LeakCanaryInternals.isInServiceProcess() #449 . New ignored Android SDK leaks #297 , #322 . Use leakcanary-android-no-op in test builds #143 . Fixes to allow LeakCanary to work with ProGuard #398 . Optimize png assets #406 . Fix delete button not working on error views #408 . Add German translation #437 .","title":"Version 1.4-beta2 (2016-03-23)"},{"location":"changelog/#version-14-beta1-2016-01-08","text":"Switched to HAHA 2.0.2 with uses Perflib instead of MAT under the hood #219 . This fixes crashes and improves speed a lot. We can now parse Android M heap dumps #267 , although there are still memory issues (see #223 ). Excluded leaks are now reported as well and available in the display leak activity. Added ProGuard configuration for #132 . Many new ignored Android SDK leaks. Added excluded leaks to text report #119 . Added LeakCanary SHA to text report #120 . Added CanaryLog API to replace the logger: #201 . Renamed all resources to begin with leak_canary_ instead of __leak_canary #161 No crash when heap dump fails #226 . Add retained size to leak reports #162 .","title":"Version 1.4-beta1 (2016-01-08)"},{"location":"changelog/#public-api-changes_3","text":"AnalysisResult.failure is now a Throwable instead of an Exception . Main goal is to catch and correctly report OOMs while parsing. Added ARRAY_ENTRY to LeakTraceElement.Type for references through array entries. Renamed ExcludedRefs fields. Each ExcludedRef entry can now be ignored entirely or \u201ckept only if no other path\u201d. Added support for ignoring all fields (static and non static) for a given class.","title":"Public API changes"},{"location":"changelog/#version-131-2015-05-16","text":"Heap dumps and analysis results are now saved on the sd card: #21 . ExcludedRef and AndroidExcludedRefs are customizable: #12 #73 . 7 new ignored Android SDK leaks: #1 #4 #32 #89 #82 #97 . Fixed 3 crashes in LeakCanary: #37 #46 #66 . Fixed StrictMode thread policy violations: #15 . Updated minSdkVersion from 9 to 8 : #57 . Added LeakCanary version name to LeakCanary.leakInfo() : #49 . leakcanary-android-no-op is lighter, it does not depend on leakcanary-watcher anymore, only 2 classes now: #74 . Adding field state details to the text leak trace. A Toast is displayed while the heap dump is in progress to warn that the UI will freeze: #20 . You can customize the toast by providing your own layout named __leak_canary_heap_dump_toast.xml (e.g. you could make it an empty layout). If the analysis fails, the result and heap dump are kept so that it can be reported to LeakCanary: #102 . Update to HAHA 1.3 to fix a 2 crashes #3 46","title":"Version 1.3.1 (2015-05-16)"},{"location":"changelog/#public-api-changes_4","text":"When upgrading from 1.3 to 1.3.1, previously saved heap dumps will not be readable any more, but they won\u2019t be removed from the app directory. You should probably uninstall your app. Added android.permission.WRITE_EXTERNAL_STORAGE to leakcanary-android artifact. LeakCanary.androidWatcher() parameter types have changed (+ExcludedRefs). LeakCanary.leakInfo() parameter types have changed (+boolean) ExcludedRef is now serializable and immutable, instances can be created using ExcludedRef.Builder . ExcludedRef is available in HeapDump AndroidExcludedRefs is an enum, you can now pick the leaks you want to ignore in AndroidExcludedRefs by creating an EnumSet and calling AndroidExcludedRefs.createBuilder() . AndroidExcludedRefs.createAppDefaults() & AndroidExcludedRefs.createAndroidDefaults() return a ExcludedRef.Builder . ExcludedRef moved from leakcanary-analyzer to leakcanary-watcher","title":"Public API changes"},{"location":"changelog/#version-13-2015-05-08","text":"Initial release.","title":"Version 1.3 (2015-05-08)"},{"location":"changelog/#dependencies","text":"","title":"Dependencies"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"dev-env/","text":"Dev Environment for LeakCanary contributors \u00b6 Setup \u00b6 Download Android Studio . We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles . Build with ./gradlew build . Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-android-sample:connectedCheck . Normal UI tests: ./gradlew leakcanary-android-core:connectedCheck . Static Code Analysis \u00b6 LeakCanary uses Detekt for static Code analysis. Analyze the entire project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There\u2019s also a git pre-push hook that will run analysis automatically before pushing a branch to the remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in the console and saved to /moduleDir/build/reports/ . Deploying locally \u00b6 To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9-SNAPSHOT' } repositories { mavenLocal() } Deploying the docs locally \u00b6 Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Dev Environment"},{"location":"dev-env/#dev-environment-for-leakcanary-contributors","text":"","title":"Dev Environment for LeakCanary contributors"},{"location":"dev-env/#setup","text":"Download Android Studio . We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles . Build with ./gradlew build . Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-android-sample:connectedCheck . Normal UI tests: ./gradlew leakcanary-android-core:connectedCheck .","title":"Setup"},{"location":"dev-env/#static-code-analysis","text":"LeakCanary uses Detekt for static Code analysis. Analyze the entire project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There\u2019s also a git pre-push hook that will run analysis automatically before pushing a branch to the remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in the console and saved to /moduleDir/build/reports/ .","title":"Static Code Analysis"},{"location":"dev-env/#deploying-locally","text":"To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9-SNAPSHOT' } repositories { mavenLocal() }","title":"Deploying locally"},{"location":"dev-env/#deploying-the-docs-locally","text":"Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Deploying the docs locally"},{"location":"faq/","text":"FAQ \u00b6 Can a leak be caused by the Android SDK? \u00b6 Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to recognize, called Library Leaks (see Categorizing leaks ). If you find a new one, please create an issue (choose \ud83e\udd16Leak in Android SDK / support library ) and follow these steps: Provide the entire leak trace information (including metadata), and use backticks (`) for formatting. Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions by switching branches on the GitHub mirror: android/platform_frameworks_base . Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed. If it\u2019s still happening, build a simple repro case. File an issue on b.android.com with the leak trace and the repro case. Please remember to follow up the issue when there are new responses. b/176886060 is a good example of effective and respectful communication. Create a PR in LeakCanary to update AndroidReferenceMatchers . Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it. How do I know if LeakCanary is running? \u00b6 You can confirm that LeakCanary starts correctly by filtering on the LeakCanary tag in Logcat: $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher If you do not see Installing AppWatcher in the logs, check your dependencies ( ./gradlew app:dependencies ) and make sure LeakCanary is there. Note that LeakCanary is automatically disabled in tests (see Running LeakCanary in instrumentation tests ): $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher D/LeakCanary: JUnit detected in classpath, app is running tests => disabling heap dumping & analysis D/LeakCanary: Updated LeakCanary.config: Config(dumpHeap=false) Where does LeakCanary store heap dumps? \u00b6 The default behavior is to store heap dumps in a leakcanary folder under the app directory. If the app has been granted the android.permission.WRITE_EXTERNAL_STORAGE permission, then heap dumps will be stored in a leakcanary-com.example folder (where com.example is your app package name) under the Download folder of the external storage. If the app has not been granted the android.permission.WRITE_EXTERNAL_STORAGE permission but that permission is listed in AndroidManifest.xml then LeakCanary will show a notification that can be tapped to grant permission. How can I dig beyond the leak trace? \u00b6 Sometimes the leak trace isn\u2019t enough and you need to dig into a heap dump with MAT or YourKit . Go to a heap analysis screen, click the overflow menu and select Share Heap Dump . Here\u2019s how you can find the leaking instance in the heap dump: Look for all instances of leakcanary.KeyedWeakReference . For each of these, look at the key field. Find the KeyedWeakReference that has a key field equal to the reference key reported by LeakCanary. The referent field of that KeyedWeakReference is your leaking object. From then on, the matter is in your hands. A good start is to look at the shortest path to GC Roots (excluding weak references). How does LeakCanary get installed by only adding a dependency? \u00b6 On Android, content providers are created after the Application instance is created but before Application.onCreate() is called. The leakcanary-object-watcher-android artifact has a non exported ContentProvider defined in its AndroidManifest.xml file. When that ContentProvider is installed, it adds activity and fragment lifecycle listeners to the application. How many methods does LeakCanary add? \u00b6 0 . LeakCanary is a debug only library. How do I use the SNAPSHOT version? \u00b6 Update your dependencies to the latest SNAPSHOT (see build.gradle ): dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9-SNAPSHOT' } Add Sonatype\u2019s snapshots repository: repositories { mavenCentral() maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' } } Status of the snapshot build: Who\u2019s behind LeakCanary? \u00b6 LeakCanary was created and open sourced by @pyricau , with many contributions from the community. Why is it called LeakCanary? \u00b6 The name LeakCanary is a reference to the expression canary in a coal mine , because LeakCanary is a sentinel used to detect risks by providing advance warning of a danger. Props to @edenman for suggesting it! Who made the logo? \u00b6 @pyricau quickly made the first version of the logo. It was based on cliparts from Android Asset Studio , mixed with the selection from a photo of a Canary. The exclamation mark means danger, the shield stands for protection, and the bird, well, is a canary. @romainguy turned the ugly logo into a nice vector asset . @flickator designed a much nicer logo for LeakCanary 2.0!","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#can-a-leak-be-caused-by-the-android-sdk","text":"Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to recognize, called Library Leaks (see Categorizing leaks ). If you find a new one, please create an issue (choose \ud83e\udd16Leak in Android SDK / support library ) and follow these steps: Provide the entire leak trace information (including metadata), and use backticks (`) for formatting. Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions by switching branches on the GitHub mirror: android/platform_frameworks_base . Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed. If it\u2019s still happening, build a simple repro case. File an issue on b.android.com with the leak trace and the repro case. Please remember to follow up the issue when there are new responses. b/176886060 is a good example of effective and respectful communication. Create a PR in LeakCanary to update AndroidReferenceMatchers . Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it.","title":"Can a leak be caused by the Android SDK?"},{"location":"faq/#how-do-i-know-if-leakcanary-is-running","text":"You can confirm that LeakCanary starts correctly by filtering on the LeakCanary tag in Logcat: $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher If you do not see Installing AppWatcher in the logs, check your dependencies ( ./gradlew app:dependencies ) and make sure LeakCanary is there. Note that LeakCanary is automatically disabled in tests (see Running LeakCanary in instrumentation tests ): $ adb logcat | grep LeakCanary D/LeakCanary: Installing AppWatcher D/LeakCanary: JUnit detected in classpath, app is running tests => disabling heap dumping & analysis D/LeakCanary: Updated LeakCanary.config: Config(dumpHeap=false)","title":"How do I know if LeakCanary is running?"},{"location":"faq/#where-does-leakcanary-store-heap-dumps","text":"The default behavior is to store heap dumps in a leakcanary folder under the app directory. If the app has been granted the android.permission.WRITE_EXTERNAL_STORAGE permission, then heap dumps will be stored in a leakcanary-com.example folder (where com.example is your app package name) under the Download folder of the external storage. If the app has not been granted the android.permission.WRITE_EXTERNAL_STORAGE permission but that permission is listed in AndroidManifest.xml then LeakCanary will show a notification that can be tapped to grant permission.","title":"Where does LeakCanary store heap dumps?"},{"location":"faq/#how-can-i-dig-beyond-the-leak-trace","text":"Sometimes the leak trace isn\u2019t enough and you need to dig into a heap dump with MAT or YourKit . Go to a heap analysis screen, click the overflow menu and select Share Heap Dump . Here\u2019s how you can find the leaking instance in the heap dump: Look for all instances of leakcanary.KeyedWeakReference . For each of these, look at the key field. Find the KeyedWeakReference that has a key field equal to the reference key reported by LeakCanary. The referent field of that KeyedWeakReference is your leaking object. From then on, the matter is in your hands. A good start is to look at the shortest path to GC Roots (excluding weak references).","title":"How can I dig beyond the leak trace?"},{"location":"faq/#how-does-leakcanary-get-installed-by-only-adding-a-dependency","text":"On Android, content providers are created after the Application instance is created but before Application.onCreate() is called. The leakcanary-object-watcher-android artifact has a non exported ContentProvider defined in its AndroidManifest.xml file. When that ContentProvider is installed, it adds activity and fragment lifecycle listeners to the application.","title":"How does LeakCanary get installed by only adding a dependency?"},{"location":"faq/#how-many-methods-does-leakcanary-add","text":"0 . LeakCanary is a debug only library.","title":"How many methods does LeakCanary add?"},{"location":"faq/#how-do-i-use-the-snapshot-version","text":"Update your dependencies to the latest SNAPSHOT (see build.gradle ): dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9-SNAPSHOT' } Add Sonatype\u2019s snapshots repository: repositories { mavenCentral() maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' } } Status of the snapshot build:","title":"How do I use the SNAPSHOT version?"},{"location":"faq/#whos-behind-leakcanary","text":"LeakCanary was created and open sourced by @pyricau , with many contributions from the community.","title":"Who's behind LeakCanary?"},{"location":"faq/#why-is-it-called-leakcanary","text":"The name LeakCanary is a reference to the expression canary in a coal mine , because LeakCanary is a sentinel used to detect risks by providing advance warning of a danger. Props to @edenman for suggesting it!","title":"Why is it called LeakCanary?"},{"location":"faq/#who-made-the-logo","text":"@pyricau quickly made the first version of the logo. It was based on cliparts from Android Asset Studio , mixed with the selection from a photo of a Canary. The exclamation mark means danger, the shield stands for protection, and the bird, well, is a canary. @romainguy turned the ugly logo into a nice vector asset . @flickator designed a much nicer logo for LeakCanary 2.0!","title":"Who made the logo?"},{"location":"fundamentals-fixing-a-memory-leak/","text":"A memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. Somewhere in the code, there\u2019s a reference that should have been cleared and wasn\u2019t. Follow these 4 steps to fix memory leaks: Find the leak trace. Narrow down the suspect references. Find the reference causing the leak. Fix the leak. LeakCanary helps you with the first two steps. The last two steps are up to you! 1. Find the leak trace \u00b6 A leak trace is a shorter name for the best strong reference path from garbage collection roots to the retained object , ie the path of references that is holding an object in memory, therefore preventing it from being garbage collected. For example, let\u2019s store a helper singleton in a static field: class Helper { } class Utils { public static Helper helper = new Helper (); } Let\u2019s tell LeakCanary that the singleton instance is expected to be garbage collected: AppWatcher.objectWatcher.watch(Utils.helper) The leak trace for that singleton looks like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper Let\u2019s break it down! At the top, a PathClassLoader instance is held by a garbage collection (GC) root , more specifically a local variable in native code. GC roots are special objects that are always reachable, ie they cannot be garbage collected. There are 4 main types of GC root: Local variables , which belong to the stack of a thread. Instances of active Java threads . System Classes , which never unload. Native references , which are controlled by native code. \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance A line starting with \u251c\u2500 represents a Java object (either a class, an object array or an instance), and a line starting with \u2502 \u2193 represents a reference to the Java object on the next line. PathClassLoader has a runtimeInternalObjects field that is a reference to an array of Object : \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array The element at position 43 in that array of Object is a reference to the Utils class. \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class A line starting with \u2570\u2192 represents the leaking object, ie the object that is passed to AppWatcher.objectWatcher.watch() . The Utils class has a static helper field which is a reference to the leaking object, which is the Helper singleton instance: \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper instance 2. Narrow down the suspect references \u00b6 A leak trace is a path of references. Initially, all references in that path are suspected of causing the leak, but LeakCanary can automatically narrow down the suspect references. To understand what that means, let\u2019s go through that process manually. Here\u2019s an example of bad Android code: class ExampleApplication : Application () { val leakedViews = mutableListOf < View >() } class MainActivity : Activity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . main_activity ) val textView = findViewById < View >( R . id . helper_text ) val app = application as ExampleApplication // This creates a leak, What a Terrible Failure! app . leakedViews . add ( textView ) } } LeakCanary produces a leak trace that looks like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 \u2193 ExampleApplication.leakedViews \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance Here\u2019s how to read that leak trace: The FontsContract class is a system class (see GC Root: System class ) and has an sContext static field which references an ExampleApplication instance which has a leakedViews field which references an ArrayList instance which references an array (the array backing the array list implementation) which has an element that references a TextView which has an mContext field which references a destroyed instance of MainActivity . LeakCanary highlights all references suspected of causing this leak using ~~~ underlines. Initially, all references are suspect: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u2502 ~~~~~~~~ \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance Then, LeakCanary makes deductions about the state and the lifecycle of the objects in the leak trace. In an Android app the Application instance is a singleton that is never garbage collected, so it\u2019s never leaking ( Leaking: NO (Application is a singleton) ). From that, LeakCanary concludes that the leak is not caused by FontsContract.sContext (removal of corresponding ~~~ ). Here\u2019s the updated leak trace: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance The TextView instance references the destroyed MainActivity instance via it\u2019s mContext field. Views should not survive the lifecycle of their context, so LeakCanary knows that this TextView instance is leaking ( Leaking: YES (View.mContext references a destroyed activity) ), and therefore that the leak is not caused by TextView.mContext (removal of corresponding ~~~ ). Here\u2019s the updated leak trace: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance To summarize, LeakCanary inspects the state of objects in the leak trace to figure out if these objects are leaking ( Leaking: YES vs Leaking: NO ), and leverages that information to narrow down the suspect references. You can provide custom ObjectInspector implementations to improve how LeakCanary works in your codebase (see Identifying leaking objects and labeling objects ). 3. Find the reference causing the leak \u00b6 In the previous example, LeakCanary narrowed down the suspect references to ExampleApplication.leakedViews , ArrayList.elementData and Object[].[0] : \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance ArrayList.elementData and Object[].[0] are implementation details of ArrayList , and it\u2019s unlikely that there\u2019s a bug in the ArrayList implementation, so the reference causing the leak is the only remaining reference: ExampleApplication.leakedViews . 4. Fix the leak \u00b6 Once you find the reference causing the leak, you need to figure out what that reference is about, when it should have been cleared and why it hasn\u2019t been. Sometimes it\u2019s obvious, like in the previous example. Sometimes you need more information to figure it out. You can add labels , or explore the hprof directly (see How can I dig beyond the leak trace? ). Warning Memory leaks cannot be fixed by replacing strong references with weak references. It\u2019s a common solution when attempting to quickly address memory issues, however it never works. The bugs that were causing references to be kept longer than necessary are still there. On top of that, it creates more bugs as some objects will now be garbage collected sooner than they should. It also makes the code much harder to maintain. What\u2019s next? Customize LeakCanary to your needs with code recipes !","title":"Fixing a memory leak"},{"location":"fundamentals-fixing-a-memory-leak/#1-find-the-leak-trace","text":"A leak trace is a shorter name for the best strong reference path from garbage collection roots to the retained object , ie the path of references that is holding an object in memory, therefore preventing it from being garbage collected. For example, let\u2019s store a helper singleton in a static field: class Helper { } class Utils { public static Helper helper = new Helper (); } Let\u2019s tell LeakCanary that the singleton instance is expected to be garbage collected: AppWatcher.objectWatcher.watch(Utils.helper) The leak trace for that singleton looks like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper Let\u2019s break it down! At the top, a PathClassLoader instance is held by a garbage collection (GC) root , more specifically a local variable in native code. GC roots are special objects that are always reachable, ie they cannot be garbage collected. There are 4 main types of GC root: Local variables , which belong to the stack of a thread. Instances of active Java threads . System Classes , which never unload. Native references , which are controlled by native code. \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 \u251c\u2500 dalvik.system.PathClassLoader instance A line starting with \u251c\u2500 represents a Java object (either a class, an object array or an instance), and a line starting with \u2502 \u2193 represents a reference to the Java object on the next line. PathClassLoader has a runtimeInternalObjects field that is a reference to an array of Object : \u251c\u2500 dalvik.system.PathClassLoader instance \u2502 \u2193 PathClassLoader.runtimeInternalObjects \u251c\u2500 java.lang.Object[] array The element at position 43 in that array of Object is a reference to the Utils class. \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[43] \u251c\u2500 com.example.Utils class A line starting with \u2570\u2192 represents the leaking object, ie the object that is passed to AppWatcher.objectWatcher.watch() . The Utils class has a static helper field which is a reference to the leaking object, which is the Helper singleton instance: \u251c\u2500 com.example.Utils class \u2502 \u2193 static Utils.helper \u2570\u2192 java.example.Helper instance","title":"1. Find the leak trace"},{"location":"fundamentals-fixing-a-memory-leak/#2-narrow-down-the-suspect-references","text":"A leak trace is a path of references. Initially, all references in that path are suspected of causing the leak, but LeakCanary can automatically narrow down the suspect references. To understand what that means, let\u2019s go through that process manually. Here\u2019s an example of bad Android code: class ExampleApplication : Application () { val leakedViews = mutableListOf < View >() } class MainActivity : Activity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . main_activity ) val textView = findViewById < View >( R . id . helper_text ) val app = application as ExampleApplication // This creates a leak, What a Terrible Failure! app . leakedViews . add ( textView ) } } LeakCanary produces a leak trace that looks like this: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 \u2193 ExampleApplication.leakedViews \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance Here\u2019s how to read that leak trace: The FontsContract class is a system class (see GC Root: System class ) and has an sContext static field which references an ExampleApplication instance which has a leakedViews field which references an ArrayList instance which references an array (the array backing the array list implementation) which has an element that references a TextView which has an mContext field which references a destroyed instance of MainActivity . LeakCanary highlights all references suspected of causing this leak using ~~~ underlines. Initially, all references are suspect: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u2502 ~~~~~~~~ \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance Then, LeakCanary makes deductions about the state and the lifecycle of the objects in the leak trace. In an Android app the Application instance is a singleton that is never garbage collected, so it\u2019s never leaking ( Leaking: NO (Application is a singleton) ). From that, LeakCanary concludes that the leak is not caused by FontsContract.sContext (removal of corresponding ~~~ ). Here\u2019s the updated leak trace: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 \u2193 TextView.mContext \u2502 ~~~~~~~~ \u2570\u2192 com.example.leakcanary.MainActivity instance The TextView instance references the destroyed MainActivity instance via it\u2019s mContext field. Views should not survive the lifecycle of their context, so LeakCanary knows that this TextView instance is leaking ( Leaking: YES (View.mContext references a destroyed activity) ), and therefore that the leak is not caused by TextView.mContext (removal of corresponding ~~~ ). Here\u2019s the updated leak trace: \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance To summarize, LeakCanary inspects the state of objects in the leak trace to figure out if these objects are leaking ( Leaking: YES vs Leaking: NO ), and leverages that information to narrow down the suspect references. You can provide custom ObjectInspector implementations to improve how LeakCanary works in your codebase (see Identifying leaking objects and labeling objects ).","title":"2. Narrow down the suspect references"},{"location":"fundamentals-fixing-a-memory-leak/#3-find-the-reference-causing-the-leak","text":"In the previous example, LeakCanary narrowed down the suspect references to ExampleApplication.leakedViews , ArrayList.elementData and Object[].[0] : \u252c\u2500\u2500\u2500 \u2502 GC Root: System class \u2502 \u251c\u2500 android.provider.FontsContract class \u2502 \u2193 static FontsContract.sContext \u251c\u2500 com.example.leakcanary.ExampleApplication instance \u2502 Leaking: NO (Application is a singleton) \u2502 \u2193 ExampleApplication.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) \u2502 \u2193 TextView.mContext \u2570\u2192 com.example.leakcanary.MainActivity instance ArrayList.elementData and Object[].[0] are implementation details of ArrayList , and it\u2019s unlikely that there\u2019s a bug in the ArrayList implementation, so the reference causing the leak is the only remaining reference: ExampleApplication.leakedViews .","title":"3. Find the reference causing the leak"},{"location":"fundamentals-fixing-a-memory-leak/#4-fix-the-leak","text":"Once you find the reference causing the leak, you need to figure out what that reference is about, when it should have been cleared and why it hasn\u2019t been. Sometimes it\u2019s obvious, like in the previous example. Sometimes you need more information to figure it out. You can add labels , or explore the hprof directly (see How can I dig beyond the leak trace? ). Warning Memory leaks cannot be fixed by replacing strong references with weak references. It\u2019s a common solution when attempting to quickly address memory issues, however it never works. The bugs that were causing references to be kept longer than necessary are still there. On top of that, it creates more bugs as some objects will now be garbage collected sooner than they should. It also makes the code much harder to maintain. What\u2019s next? Customize LeakCanary to your needs with code recipes !","title":"4. Fix the leak"},{"location":"fundamentals-how-leakcanary-works/","text":"Once LeakCanary is installed, it automatically detects and report memory leaks, in 4 steps: Detecting retained objects. Dumping the heap. Analyzing the heap. Categorizing leaks. 1. Detecting retained objects \u00b6 LeakCanary hooks into the Android lifecycle to automatically detect when activities and fragments are destroyed and should be garbage collected. These destroyed objects are passed to an ObjectWatcher , which holds weak references to them. LeakCanary automatically detects leaks for the following objects: destroyed Activity instances destroyed Fragment instances destroyed fragment View instances cleared ViewModel instances You can watch any objects that is no longer needed, for example a detached view or a destroyed presenter: AppWatcher . objectWatcher . watch ( myDetachedView , \"View was detached\" ) If the weak reference held by ObjectWatcher isn\u2019t cleared after waiting 5 seconds and running garbage collection, the watched object is considered retained , and potentially leaking. LeakCanary logs this to Logcat: D LeakCanary: Watching instance of com.example.leakcanary.MainActivity (Activity received Activity#onDestroy() callback) ... 5 seconds later ... D LeakCanary: Scheduling check for retained objects because found new object retained LeakCanary waits for the count of retained objects to reach a threshold before dumping the heap, and displays a notification with the latest count. Figure 1. LeakCanary found 4 retained objects. D LeakCanary: Rescheduling check for retained objects in 2000ms because found only 4 retained objects (< 5 while app visible) Info The default threshold is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . If you see the retained objects notification and then put the app in background (for example by pressing the Home button), then the threshold changes from 5 to 1 and LeakCanary dumps the heap within 5 seconds. Tapping the notification forces LeakCanary to dump the heap immediately. 2. Dumping the heap \u00b6 When the count of retained objects reaches a threshold, LeakCanary dumps the Java heap into a .hprof file (a heap dump ) stored onto the Android file system (see Where does LeakCanary store heap dumps? ). Dumping the heap freezes the app for a short amount of time, during which LeakCanary displays the following toast: Figure 2. LeakCanary shows a toast while dumping the heap. 3. Analyzing the heap \u00b6 LeakCanary parses the .hprof file using Shark and locates the retained objects in that heap dump. Figure 3. LeakCanary finds retained objects in the heap dump. For each retained object, LeakCanary finds the path of references that prevents that retained object from being garbage collected: its leak trace . You will learn to analyze a leak trace in the next section: Fixing a memory leak . Figure 4. LeakCanary computes the leak trace for each retained object. When the analysis is done, LeakCanary displays a notification with a summary, and also prints the result in Logcat . Notice below how the 4 retained objects are grouped as 2 distinct leaks . LeakCanary creates a signature for each leak trace , and groups together leaks that have the same signature, ie leaks that are caused by the same bug. Figure 5. The 4 leak traces turned into 2 distinct leak signatures. ==================================== HEAP ANALYSIS RESULT ==================================== 2 APPLICATION LEAKS Displaying only 1 leak trace out of 2 with the same signature Signature: ce9dee3a1feb859fd3b3a9ff51e3ddfd8efbc6 \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 ... Tapping the notification starts an activity that provides more details. Come back to it again later by tapping the LeakCanary launcher icon: Figure 6. LeakCanary adds a launcher icon for each app it\u2019s installed in. Each row corresponds to a group of leaks with the same signature . LeakCanary marks a row as New the first time the app triggers a leak with that signature. Figure 7. The 4 leaks grouped into 2 rows, one for each distinct leak signature. Tap on a leak to open up a screen with the leak trace. You can toggle between retained objects and their leak trace via a drop down. Figure 8. A screen showing 3 leaks grouped by their common leak signature. The leak signature is the hash of the concatenation of each reference suspected to cause the leak , ie each reference displayed with a red underline : Figure 9. A leak trace with 3 suspect references. These same suspicious references are underlined with ~~~ when the leak trace is shared as text: ... \u2502 \u251c\u2500 com.example.leakcanary.LeakingSingleton class \u2502 Leaking: NO (a class is never leaking) \u2502 \u2193 static LeakingSingleton.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 Leaking: UNKNOWN \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) ... In the example above, the signature of the leak would be computed as: val leakSignature = sha1Hash ( \"com.example.leakcanary.LeakingSingleton.leakedView\" + \"java.util.ArrayList.elementData\" + \"java.lang.Object[].[x]\" ) println ( leakSignature ) // dbfa277d7e5624792e8b60bc950cd164190a11aa 4. Categorizing leaks \u00b6 LeakCanary separates the leaks it finds in your app into two categories: Application Leaks and Library Leaks . A Library Leak is a leak caused by a known bug in 3 rd party code that you do not have control over. This leak is impacting your application, but unfortunately fixing it may not be in your control so LeakCanary separates it out. The two categories are separated in the result printed in Logcat : ==================================== HEAP ANALYSIS RESULT ==================================== 0 APPLICATION LEAKS ==================================== 1 LIBRARY LEAK ... \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 ... LeakCanary marks a row as a Library Leak in its list of leaks: Figure 10. LeakCanary found a Library Leak. LeakCanary ships with a database of known leaks, which it recognizes by pattern matching on reference names. For example: Leak pattern: instance field android.app.Activity$1#this$0 Description: Android Q added a new IRequestFinishCallback$Stub class [...] \u252c\u2500\u2500\u2500 \u2502 GC Root: Global variable in native code \u2502 \u251c\u2500 android.app.Activity$1 instance \u2502 Leaking: UNKNOWN \u2502 Anonymous subclass of android.app.IRequestFinishCallback$Stub \u2502 \u2193 Activity$1.this$0 \u2502 ~~~~~~ \u2570\u2192 com.example.MainActivity instance What did I do to cause this leak? Nothing wrong! You used an API the way it was intended but the implementation has a bug that is causing this leak. Is there anything I can do to prevent it? Maybe! Some Library Leaks can be fixed using reflection, others by exercising a code path that makes the leak go away. This type of fix tends to be hacky, so beware! Your best option might be to find the bug report or file one, and insist that the bug gets fixed. Since I can\u2019t do much about this leak, is there a way I can ask LeakCanary to ignore it? There\u2019s no way for LeakCanary to know whether a leak is a Library Leak prior to dumping the heap and analyzing it. If LeakCanary didn\u2019t show the result notification when a Library Leak is found then you\u2019d start wondering what happened to the LeakCanary analysis after the dumping toast. You can see the full list of known leaks in the AndroidReferenceMatchers class. If you find an Android SDK leak that isn\u2019t recognized, please report it . You can also customize the list of known Library Leaks . What\u2019s next? Learn how to fix a memory leak !","title":"How LeakCanary works"},{"location":"fundamentals-how-leakcanary-works/#1-detecting-retained-objects","text":"LeakCanary hooks into the Android lifecycle to automatically detect when activities and fragments are destroyed and should be garbage collected. These destroyed objects are passed to an ObjectWatcher , which holds weak references to them. LeakCanary automatically detects leaks for the following objects: destroyed Activity instances destroyed Fragment instances destroyed fragment View instances cleared ViewModel instances You can watch any objects that is no longer needed, for example a detached view or a destroyed presenter: AppWatcher . objectWatcher . watch ( myDetachedView , \"View was detached\" ) If the weak reference held by ObjectWatcher isn\u2019t cleared after waiting 5 seconds and running garbage collection, the watched object is considered retained , and potentially leaking. LeakCanary logs this to Logcat: D LeakCanary: Watching instance of com.example.leakcanary.MainActivity (Activity received Activity#onDestroy() callback) ... 5 seconds later ... D LeakCanary: Scheduling check for retained objects because found new object retained LeakCanary waits for the count of retained objects to reach a threshold before dumping the heap, and displays a notification with the latest count. Figure 1. LeakCanary found 4 retained objects. D LeakCanary: Rescheduling check for retained objects in 2000ms because found only 4 retained objects (< 5 while app visible) Info The default threshold is 5 retained objects when the app is visible , and 1 retained object when the app is not visible . If you see the retained objects notification and then put the app in background (for example by pressing the Home button), then the threshold changes from 5 to 1 and LeakCanary dumps the heap within 5 seconds. Tapping the notification forces LeakCanary to dump the heap immediately.","title":"1. Detecting retained objects"},{"location":"fundamentals-how-leakcanary-works/#2-dumping-the-heap","text":"When the count of retained objects reaches a threshold, LeakCanary dumps the Java heap into a .hprof file (a heap dump ) stored onto the Android file system (see Where does LeakCanary store heap dumps? ). Dumping the heap freezes the app for a short amount of time, during which LeakCanary displays the following toast: Figure 2. LeakCanary shows a toast while dumping the heap.","title":"2. Dumping the heap"},{"location":"fundamentals-how-leakcanary-works/#3-analyzing-the-heap","text":"LeakCanary parses the .hprof file using Shark and locates the retained objects in that heap dump. Figure 3. LeakCanary finds retained objects in the heap dump. For each retained object, LeakCanary finds the path of references that prevents that retained object from being garbage collected: its leak trace . You will learn to analyze a leak trace in the next section: Fixing a memory leak . Figure 4. LeakCanary computes the leak trace for each retained object. When the analysis is done, LeakCanary displays a notification with a summary, and also prints the result in Logcat . Notice below how the 4 retained objects are grouped as 2 distinct leaks . LeakCanary creates a signature for each leak trace , and groups together leaks that have the same signature, ie leaks that are caused by the same bug. Figure 5. The 4 leak traces turned into 2 distinct leak signatures. ==================================== HEAP ANALYSIS RESULT ==================================== 2 APPLICATION LEAKS Displaying only 1 leak trace out of 2 with the same signature Signature: ce9dee3a1feb859fd3b3a9ff51e3ddfd8efbc6 \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 ... Tapping the notification starts an activity that provides more details. Come back to it again later by tapping the LeakCanary launcher icon: Figure 6. LeakCanary adds a launcher icon for each app it\u2019s installed in. Each row corresponds to a group of leaks with the same signature . LeakCanary marks a row as New the first time the app triggers a leak with that signature. Figure 7. The 4 leaks grouped into 2 rows, one for each distinct leak signature. Tap on a leak to open up a screen with the leak trace. You can toggle between retained objects and their leak trace via a drop down. Figure 8. A screen showing 3 leaks grouped by their common leak signature. The leak signature is the hash of the concatenation of each reference suspected to cause the leak , ie each reference displayed with a red underline : Figure 9. A leak trace with 3 suspect references. These same suspicious references are underlined with ~~~ when the leak trace is shared as text: ... \u2502 \u251c\u2500 com.example.leakcanary.LeakingSingleton class \u2502 Leaking: NO (a class is never leaking) \u2502 \u2193 static LeakingSingleton.leakedViews \u2502 ~~~~~~~~~~~ \u251c\u2500 java.util.ArrayList instance \u2502 Leaking: UNKNOWN \u2502 \u2193 ArrayList.elementData \u2502 ~~~~~~~~~~~ \u251c\u2500 java.lang.Object[] array \u2502 Leaking: UNKNOWN \u2502 \u2193 Object[].[0] \u2502 ~~~ \u251c\u2500 android.widget.TextView instance \u2502 Leaking: YES (View.mContext references a destroyed activity) ... In the example above, the signature of the leak would be computed as: val leakSignature = sha1Hash ( \"com.example.leakcanary.LeakingSingleton.leakedView\" + \"java.util.ArrayList.elementData\" + \"java.lang.Object[].[x]\" ) println ( leakSignature ) // dbfa277d7e5624792e8b60bc950cd164190a11aa","title":"3. Analyzing the heap"},{"location":"fundamentals-how-leakcanary-works/#4-categorizing-leaks","text":"LeakCanary separates the leaks it finds in your app into two categories: Application Leaks and Library Leaks . A Library Leak is a leak caused by a known bug in 3 rd party code that you do not have control over. This leak is impacting your application, but unfortunately fixing it may not be in your control so LeakCanary separates it out. The two categories are separated in the result printed in Logcat : ==================================== HEAP ANALYSIS RESULT ==================================== 0 APPLICATION LEAKS ==================================== 1 LIBRARY LEAK ... \u252c\u2500\u2500\u2500 \u2502 GC Root: Local variable in native code \u2502 ... LeakCanary marks a row as a Library Leak in its list of leaks: Figure 10. LeakCanary found a Library Leak. LeakCanary ships with a database of known leaks, which it recognizes by pattern matching on reference names. For example: Leak pattern: instance field android.app.Activity$1#this$0 Description: Android Q added a new IRequestFinishCallback$Stub class [...] \u252c\u2500\u2500\u2500 \u2502 GC Root: Global variable in native code \u2502 \u251c\u2500 android.app.Activity$1 instance \u2502 Leaking: UNKNOWN \u2502 Anonymous subclass of android.app.IRequestFinishCallback$Stub \u2502 \u2193 Activity$1.this$0 \u2502 ~~~~~~ \u2570\u2192 com.example.MainActivity instance What did I do to cause this leak? Nothing wrong! You used an API the way it was intended but the implementation has a bug that is causing this leak. Is there anything I can do to prevent it? Maybe! Some Library Leaks can be fixed using reflection, others by exercising a code path that makes the leak go away. This type of fix tends to be hacky, so beware! Your best option might be to find the bug report or file one, and insist that the bug gets fixed. Since I can\u2019t do much about this leak, is there a way I can ask LeakCanary to ignore it? There\u2019s no way for LeakCanary to know whether a leak is a Library Leak prior to dumping the heap and analyzing it. If LeakCanary didn\u2019t show the result notification when a Library Leak is found then you\u2019d start wondering what happened to the LeakCanary analysis after the dumping toast. You can see the full list of known leaks in the AndroidReferenceMatchers class. If you find an Android SDK leak that isn\u2019t recognized, please report it . You can also customize the list of known Library Leaks . What\u2019s next? Learn how to fix a memory leak !","title":"4. Categorizing leaks"},{"location":"fundamentals/","text":"The fundamentals describe how LeakCanary works and how to use it to detect and fix memory leaks. This documentation is designed to help developers of all levels, so please don\u2019t hesitate to report any confusing section. What is a memory leak? \u00b6 In a Java based runtime, a memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. As a result, the memory allocated for that object cannot be reclaimed, eventually leading to an OutOfMemoryError (OOM) crash. For example, an Android Activity instance is no longer needed after its onDestroy() method is called, and storing a reference to that instance in a static field prevents it from being garbage collected. Common causes for memory leaks \u00b6 Most memory leaks are caused by bugs related to the lifecycle of objects. Here are a few common Android mistakes: Adding a Fragment instance to the backstack without clearing that Fragment\u2019s view fields in Fragment.onDestroyView() (more details in this StackOverflow answer ). Storing an Activity instance as a Context field in an object that survives activity recreation due to configuration changes. Registering a listener, broadcast receiver or RxJava subscription which references an object with lifecycle, and forgetting to unregister when the lifecycle reaches its end. Why should I use LeakCanary? \u00b6 Memory leaks are very common in Android apps and the accumulation of small memory leaks causes apps to run out of memory and crash with an OOM. LeakCanary will help you find and fix these memory leaks during development. When Square engineers first enabled LeakCanary in the Square Point Of Sale app, they were able to fix several leaks and reduced the OOM crash rate by 94% . Info Your crash reporting tool might not correctly report OOMs . When memory is low because of memory leak accumulation, an OOM can be thrown from anywhere in the app code, which means that every OOM has a different stacktrace. So instead of one crash entry with a 1000 crashes, OOMs get reported as 1000 distinct crashes and hide in the long tail of low occurring crashes. What\u2019s next? Learn how LeakCanary works !","title":"Introduction"},{"location":"fundamentals/#what-is-a-memory-leak","text":"In a Java based runtime, a memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. As a result, the memory allocated for that object cannot be reclaimed, eventually leading to an OutOfMemoryError (OOM) crash. For example, an Android Activity instance is no longer needed after its onDestroy() method is called, and storing a reference to that instance in a static field prevents it from being garbage collected.","title":"What is a memory leak?"},{"location":"fundamentals/#common-causes-for-memory-leaks","text":"Most memory leaks are caused by bugs related to the lifecycle of objects. Here are a few common Android mistakes: Adding a Fragment instance to the backstack without clearing that Fragment\u2019s view fields in Fragment.onDestroyView() (more details in this StackOverflow answer ). Storing an Activity instance as a Context field in an object that survives activity recreation due to configuration changes. Registering a listener, broadcast receiver or RxJava subscription which references an object with lifecycle, and forgetting to unregister when the lifecycle reaches its end.","title":"Common causes for memory leaks"},{"location":"fundamentals/#why-should-i-use-leakcanary","text":"Memory leaks are very common in Android apps and the accumulation of small memory leaks causes apps to run out of memory and crash with an OOM. LeakCanary will help you find and fix these memory leaks during development. When Square engineers first enabled LeakCanary in the Square Point Of Sale app, they were able to fix several leaks and reduced the OOM crash rate by 94% . Info Your crash reporting tool might not correctly report OOMs . When memory is low because of memory leak accumulation, an OOM can be thrown from anywhere in the app code, which means that every OOM has a different stacktrace. So instead of one crash entry with a 1000 crashes, OOMs get reported as 1000 distinct crashes and hide in the long tail of low occurring crashes. What\u2019s next? Learn how LeakCanary works !","title":"Why should I use LeakCanary?"},{"location":"getting_started/","text":"Getting started \u00b6 To use LeakCanary, add the leakcanary-android dependency to your app\u2019s build.gradle file: dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1' } That\u2019s it, there is no code change needed! Confirm that LeakCanary is running on startup by filtering on the LeakCanary tag in Logcat : D LeakCanary: LeakCanary is running and ready to detect leaks Info LeakCanary automatically detects leaks of the following objects: destroyed Activity instances destroyed Fragment instances destroyed fragment View instances cleared ViewModel instances What\u2019s next? Learn the Fundamentals !","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"To use LeakCanary, add the leakcanary-android dependency to your app\u2019s build.gradle file: dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1' } That\u2019s it, there is no code change needed! Confirm that LeakCanary is running on startup by filtering on the LeakCanary tag in Logcat : D LeakCanary: LeakCanary is running and ready to detect leaks Info LeakCanary automatically detects leaks of the following objects: destroyed Activity instances destroyed Fragment instances destroyed fragment View instances cleared ViewModel instances What\u2019s next? Learn the Fundamentals !","title":"Getting started"},{"location":"how_to_help/","text":"How to help \u00b6 \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f LeakCanary is maintained by volunteers. Your help is welcome and will benefit the entire Android community! Here\u2019s how you can help: Contribute to Help Wanted issues. Answer StackOverflow questions . Provide feedback on pull requests . Contribute code by forking the repository on GitHub and sending a pull request. Please read Dev Environment for LeakCanary contributors . When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"how_to_help/#how-to-help","text":"\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f LeakCanary is maintained by volunteers. Your help is welcome and will benefit the entire Android community! Here\u2019s how you can help: Contribute to Help Wanted issues. Answer StackOverflow questions . Provide feedback on pull requests . Contribute code by forking the repository on GitHub and sending a pull request. Please read Dev Environment for LeakCanary contributors . When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"recipes/","text":"Code Recipes \u00b6 This page contains code recipes to customize LeakCanary to your needs. Read through the section titles and cook your own meal! Also don\u2019t forget to check out the FAQ . Bug If you think a recipe might be missing or you\u2019re not sure that what you\u2019re trying to achieve is possible with the current APIs, please file an issue . Your feedback helps us make LeakCanary better for the entire community. Watching objects with a lifecycle \u00b6 The default configuration of LeakCanary will automatically watch Activity, Fragment, Fragment View and ViewModel instances. In your application, you may have other objects with a lifecycle, such as services, Dagger components, etc. Use AppWatcher.objectWatcher to watch instances that should be garbage collected: class MyService : Service { // ... override fun onDestroy () { super . onDestroy () AppWatcher . objectWatcher . watch ( watchedObject = this , description = \"MyService received Service#onDestroy() callback\" ) } } Configuration \u00b6 LeakCanary has a default configuration that works well for most apps. You can also customize it to your needs. The LeakCanary configuration is held by two singleton objects ( AppWatcher and LeakCanary ) and can be updated at any time. Most developers configure LeakCanary in their debug Application class: class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } Info Create a debug application class in your src/debug/java folder. Don\u2019t forget to also register it in src/debug/AndroidManifest.xml . To customize the detection of retained objects at runtime, update AppWatcher.config : AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) To customize the heap dumping & analysis, update LeakCanary.config : LeakCanary . config = LeakCanary . config . copy ( retainedVisibleThreshold = 3 ) Java In Java, use AppWatcher.Config.Builder and LeakCanary.Config.Builder instead: AppWatcher . Config config = AppWatcher . getConfig (). newBuilder () . watchFragmentViews ( false ) . build (); AppWatcher . setConfig ( config ); LeakCanary . Config config = LeakCanary . getConfig (). newBuilder () . retainedVisibleThreshold ( 3 ) . build (); LeakCanary . setConfig ( config ); Configure the LeakCanary UI by overriding the following resources: mipmap/leak_canary_icon see Icon and label string/leak_canary_display_activity_label see Icon and label bool/leak_canary_add_dynamic_shortcut see Disabling LeakCanary bool/leak_canary_add_launcher_icon see Disabling LeakCanary layout/leak_canary_heap_dump_toast the layout for the toast shown when the heap is dumped Disabling LeakCanary \u00b6 Sometimes it\u2019s necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you\u2019re trying to achieve: Create a build variant that does not include the LeakCanary dependencies, see Setting up LeakCanary for different product flavors . Disable the heap dumping & analysis: LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . Hide the leak display activity launcher icon: override R.bool.leak_canary_add_launcher_icon or call LeakCanary.showLeakDisplayActivityLauncherIcon(false) Info When you set LeakCanary.Config.dumpHeap to false , AppWatcher.objectWatcher will still keep track of retained objects, and LeakCanary will look for these objects when you change LeakCanary.Config.dumpHeap back to true . LeakCanary test environment detection \u00b6 By default, LeakCanary will look for the org.junit.Test class in your classpath and if found, will disable itself to avoid running in tests. However, some apps may ship JUnit in their debug classpaths (for example, when using OkHttp\u2019s MockWebServer) so we offer a way to customise the class that is used to determine that the app is running in a test environment. <resources> <string name= \"leak_canary_test_class_name\" > assertk.Assert </string> </resources> Counting retained instances in release builds \u00b6 The com.squareup.leakcanary:leakcanary-android dependency should only be used in debug builds. It depends on com.squareup.leakcanary:leakcanary-object-watcher-android which you can use in release builds to track and count retained instances. In your build.gradle : dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.8.1' } In your leak reporting code: val retainedInstanceCount = AppWatcher . objectWatcher . retainedObjectCount LeakCanary in release builds \u00b6 We do not recommend including LeakCanary in release builds, as it could negatively impact the experience of your customers. To avoid accidentally including the com.squareup.leakcanary:leakcanary-android dependency in a release build, LeakCanary crashes during initialization if the APK is not debuggable. You may have a good reason to create a non debuggable build that includes LeakCanary, for example for a QA build. If necessary, the crashing check can be disabled by overriding the bool/leak_canary_allow_in_non_debuggable_build resource, e.g. by creating a file under res/values with the following contents: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"leak_canary_allow_in_non_debuggable_build\" > true </bool> </resources> Running LeakCanary in instrumentation tests \u00b6 Running leak detection in UI tests means you can detect memory leaks automatically in Continuous Integration prior to those leaks being merged into the codebase. However, as LeakCanary runs with a 5 seconds delay and freezes the VM to take a heap dump, this can introduce flakiness to the UI tests. Therefore it is automatically disabled by setting LeakCanary.config.dumpHeap to false when JUnit is on the runtime classpath. LeakCanary provides an artifact dedicated to detecting leaks in UI tests which provides a run listener that waits for the end of a test, and if the test succeeds then it look for retained objects, trigger a heap dump if needed and perform an analysis. To set it up, add the leakcanary-android-instrumentation dependency to your instrumentation tests: androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" Add the dedicated run listener to defaultConfig in your build.gradle : android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" // If you're using Android Test Orchestrator testOptions { execution 'ANDROIDX_TEST_ORCHESTRATOR' } } } Run the instrumentation tests: ./gradlew leakcanary-android-sample:connectedCheck You can extend FailTestOnLeakRunListener to customize the behavior. Obfuscated instrumentation tests When running instrumentation tests against obfuscated release builds, the LeakCanary classes end up spread over the test APK and the main APK. Unfortunately there is a bug in the Android Gradle Plugin that leads to runtime crashes when running tests, because code from the main APK is changed without the using code in the test APK being updated accordingly. If you run into this issue, setting up the Keeper plugin should fix it. Android TV \u00b6 LeakCanary works on Android TV devices (FireTV, Nexus player, Nvidia Shield, MiBox, etc.) without any additional setup. However, there are couple things you need to be aware of: Android TV doesn\u2019t have notifications. LeakCanary will display Toast messages when objects become retained and when leak analysis completes. You can also check Logcat for more details. Due to lack of notifications, the only way to manually trigger a heap dump is to background the app. There\u2019s a bug on API 26+ devices that prevents the activity that displays leaks from appearing in apps list. As a workaround, LeakCanary prints an adb shell command in Logcat after heap dump analysis that launches leak list activity: adb shell am start -n \"com.your.package.name/leakcanary.internal.activity.LeakLauncherActivity\" Some Android TV devices have very little memory available per app process and this might impact LeakCanary. Running the LeakCanary analysis in a separate process might help in such cases. Icon and label \u00b6 The activity that displays leaks comes with a default icon and label, which you can change by providing R.mipmap.leak_canary_icon and R.string.leak_canary_display_activity_label in your app: res/ mipmap-hdpi/ leak_canary_icon.png mipmap-mdpi/ leak_canary_icon.png mipmap-xhdpi/ leak_canary_icon.png mipmap-xxhdpi/ leak_canary_icon.png mipmap-xxxhdpi/ leak_canary_icon.png mipmap-anydpi-v26/ leak_canary_icon.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"leak_canary_display_activity_label\" > MyLeaks </string> </resources> Customizing the handling of analysis results \u00b6 You can change the default behavior of what to do when LeakCanary is done analyzing a heap dump, for example to upload the analysis result to a server of your choosing. Create a custom OnHeapAnalyzedListener that delegates to DefaultOnHeapAnalyzedListener : class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } Info HeapAnalysis.toString() returns a large string describing the analysis result and metadata. This string is formatted to be printable to Logcat and shareable on sites like StackOverflow. Set LeakCanary.config.onHeapAnalyzedListener : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader ()) } } Uploading to Bugsnag \u00b6 A leak trace has a lot in common with a stack trace, so if you lack the engineering resources to build a backend for LeakCanary, you can instead upload leak traces to a crash reporting backend. The client needs to support grouping via custom client-side hashing as well as custom metadata with support for newlines. Info As of this writing, the only known library suitable for uploading leaks is the Bugsnag client. If you managed to make it work with another library, please file an issue . Create a Bugsnag account , create a new project for leak reporting and grab an API key . Make sure the app has the android.permission.INTERNET permission then add the latest version of the Bugsnag Android client library to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1' debugImplementation \"com.bugsnag:bugsnag-android:$bugsnagVersion\" } Info If you\u2019re only using Bugsnag for uploading leaks, then you do not need to set up the Bugsnag Gradle plugin or to configure the API key in your app manifest. Create a new BugsnagLeakUploader : import android.app.Application import com.bugsnag.android.Bugsnag import com.bugsnag.android.Client import com.bugsnag.android.Configuration import com.bugsnag.android.ErrorTypes import com.bugsnag.android.Event import com.bugsnag.android.ThreadSendPolicy import leakcanary.DefaultOnHeapAnalyzedListener import leakcanary.OnHeapAnalyzedListener import shark.HeapAnalysis import shark.HeapAnalysisFailure import shark.HeapAnalysisSuccess import shark.Leak import shark.LeakTrace import shark.LibraryLeak class BugsnagLeakUploader ( applicationContext : Application ) : OnHeapAnalyzedListener { private val defaultLeakListener = DefaultOnHeapAnalyzedListener . create () private val bugsnagClient : Client init { bugsnagClient = Bugsnag . start ( applicationContext , Configuration ( BUGSNAG_API_KEY ). apply { enabledErrorTypes = DISABLE_ALL_ERROR_TYPES sendThreads = ThreadSendPolicy . NEVER } ) } override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { // Delegate to default behavior (notification and saving result) defaultLeakListener . onHeapAnalyzed ( heapAnalysis ) when ( heapAnalysis ) { is HeapAnalysisSuccess -> { val allLeakTraces = heapAnalysis . allLeaks . toList () . flatMap { leak -> leak . leakTraces . map { leakTrace -> leak to leakTrace } } allLeakTraces . forEach { ( leak , leakTrace ) -> val exception = FakeReportingException ( leak . shortDescription ) bugsnagClient . notify ( exception ) { event -> event . addHeapAnalysis ( heapAnalysis ) event . addLeak ( leak ) event . addLeakTrace ( leakTrace ) event . groupingHash = leak . signature true } } } is HeapAnalysisFailure -> { // Please file any reported failure to // https://github.com/square/leakcanary/issues bugsnagClient . notify ( heapAnalysis . exception ) } } } private fun Event . addHeapAnalysis ( heapAnalysis : HeapAnalysisSuccess ) { addMetadata ( \"Leak\" , \"heapDumpPath\" , heapAnalysis . heapDumpFile . absolutePath ) heapAnalysis . metadata . forEach { ( key , value ) -> addMetadata ( \"Leak\" , key , value ) } addMetadata ( \"Leak\" , \"analysisDurationMs\" , heapAnalysis . analysisDurationMillis ) } private fun Event . addLeak ( leak : Leak ) { addMetadata ( \"Leak\" , \"libraryLeak\" , leak is LibraryLeak ) if ( leak is LibraryLeak ) { addMetadata ( \"Leak\" , \"libraryLeakPattern\" , leak . pattern . toString ()) addMetadata ( \"Leak\" , \"libraryLeakDescription\" , leak . description ) } } private fun Event . addLeakTrace ( leakTrace : LeakTrace ) { addMetadata ( \"Leak\" , \"retainedHeapByteSize\" , leakTrace . retainedHeapByteSize ) addMetadata ( \"Leak\" , \"signature\" , leakTrace . signature ) addMetadata ( \"Leak\" , \"leakTrace\" , leakTrace . toString ()) } class FakeReportingException ( message : String ) : RuntimeException ( message ) companion object { private const val BUGSNAG_API_KEY = YOUR_BUGSNAG_API_KEY private const val DISABLE_ALL_ERROR_TYPES = ErrorTypes ( anrs = false , ndkCrashes = false , unhandledExceptions = false , unhandledRejections = false ) } } Set LeakCanary.config.onHeapAnalyzedListener to BugsnagLeakUploader : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = BugsnagLeakUploader ( applicationContext = this ) ) } } You should start seeing leaks reported into Bugsnag, grouped by their leak signature: The LEAK tab contains the leak trace: Matching known library leaks \u00b6 Set LeakCanary.Config.referenceMatchers to a list that builds on top of AndroidReferenceMatchers.appDefaults : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( className = \"com.samsing.SomeSingleton\" , fieldName = \"sContext\" , description = \"SomeSingleton has a static field leaking a context.\" , patternApplies = { manufacturer == \"Samsing\" && sdkInt == 26 } ) ) } } Ignoring specific activities or fragment classes \u00b6 Sometimes a 3 rd party library provides its own activities or fragments which contain a number of bugs leading to leaks of those specific 3 rd party activities and fragments. You should push hard on that library to fix their memory leaks as it\u2019s directly impacting your application. That being said, until those are fixed, you have two options: Add the specific leaks as known library leaks (see Matching known library leaks ). LeakCanary will run when those leaks are detected and then report them as known library leaks. Disable LeakCanary automatic activity or fragment watching (e.g. AppWatcher.config = AppWatcher.config.copy(watchActivities = false) ) and then manually pass objects to AppWatcher.objectWatcher.watch . Identifying leaking objects and labeling objects \u00b6 class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val addEntityIdLabel = ObjectInspector { reporter -> reporter . whenInstanceOf ( \"com.example.DbEntity\" ) { instance -> val databaseIdField = instance [ \"com.example.DbEntity\" , \"databaseId\" ] !! val databaseId = databaseIdField . value . asInt !! labels += \"DbEntity.databaseId = $databaseId\" } } val singletonsInspector = AppSingletonInspector ( \"com.example.MySingleton\" , \"com.example.OtherSingleton\" ) val mmvmInspector = ObjectInspector { reporter -> reporter . whenInstanceOf ( \"com.mmvm.SomeViewModel\" ) { instance -> val destroyedField = instance [ \"com.mmvm.SomeViewModel\" , \"destroyed\" ] !! if ( destroyedField . value . asBoolean !! ) { leakingReasons += \"SomeViewModel.destroyed is true\" } else { notLeakingReasons += \"SomeViewModel.destroyed is false\" } } } LeakCanary . config = LeakCanary . config . copy ( objectInspectors = AndroidObjectInspectors . appDefaults + listOf ( addObjectIdLabel , singletonsInspector , mmvmInspector ) ) } } Running the LeakCanary analysis in a separate process \u00b6 LeakCanary runs in your main app process. LeakCanary 2 is optimized to keep memory usage low while analysing and runs in a background thread with priority Process.THREAD_PRIORITY_BACKGROUND . If you find that LeakCanary is still using too much memory or impacting the app process performance, you can configure it to run the analysis in a separate process. All you have to do is replace the leakcanary-android dependency with leakcanary-android-process : dependencies { // debugImplementation 'com.squareup.leakcanary:leakcanary-android:${version}' debugImplementation 'com.squareup.leakcanary:leakcanary-android-process:${version}' } You can call LeakCanaryProcess.isInAnalyzerProcess to check if your Application class is being created in the LeakCanary process. This is useful when configuring libraries like Firebase that may crash when running in an unexpected process. Setting up LeakCanary for different product flavors \u00b6 You can setup LeakCanary to run in a specific product flavors of your app. For example, create: android { flavorDimensions \"default\" productFlavors { prod { // ... } qa { // ... } dev { // ... } } } Then, define a custom configuration for the flavor for which you want to enable LeakCanary: android { // ... } configurations { devDebugImplementation {} } You can now add the LeakCanary dependency for that configuration: dependencies { devDebugImplementation \"com.squareup.leakcanary:leakcanary-android:${version}\" } Extracting metadata from the heap dump \u00b6 LeakCanary.Config.metadataExtractor extracts metadata from a heap dump. The metadata is then available in HeapAnalysisSuccess.metadata . LeakCanary.Config.metadataExtractor defaults to AndroidMetadataExtractor but you can replace it to extract additional metadata from the hprof. For example, if you want to include the app version name in your heap analysis reports, you need to first store it in memory (e.g. in a static field) and then you can retrieve it in MetadataExtractor . class DebugExampleApplication : ExampleApplication () { companion object { @JvmStatic lateinit var savedVersionName : String } override fun onCreate () { super . onCreate () val packageInfo = packageManager . getPackageInfo ( packageName , 0 ) savedVersionName = packageInfo . versionName LeakCanary . config = LeakCanary . config . copy ( metadataExtractor = MetadataExtractor { graph -> val companionClass = graph . findClassByName ( \"com.example.DebugExampleApplication\" ) !! val versionNameField = companionClass [ \"savedVersionName\" ] !! val versionName = versionNameField . valueAsInstance !! . readAsJavaString () !! val defaultMetadata = AndroidMetadataExtractor . extractMetadata ( graph ) mapOf ( \"App Version Name\" to versionName ) + defaultMetadata }) } } Using LeakCanary with obfuscated apps \u00b6 If obfuscation is turned on then leak traces will be obfuscated. It\u2019s possible to automatically deobfuscate leak traces by using a deobfuscation gradle plugin provided by LeakCanary. You have to add a plugin dependency in your root build.gradle file: buildscript { dependencies { classpath 'com.squareup.leakcanary:leakcanary-deobfuscation-gradle-plugin:${version}' } } And then you need to apply and configure the plugin in your app (or library) specific build.gradle file: apply plugin: 'com.android.application' apply plugin: 'com.squareup.leakcanary.deobfuscation' leakCanary { // LeakCanary needs to know which variants have obfuscation turned on filterObfuscatedVariants { variant -> variant . name == \"debug\" } } Now you can run LeakCanary on an obfuscated app and leak traces will be automatically deobfuscated. Important: never use this plugin on a release variant. This plugin copies obfuscation mapping file and puts it inside the .apk, so if you use it on release build then the obfuscation becomes pointless because the code can be easily deobfuscated using mapping file. Warning: R8 (Google Proguard replacement) can now understand Kotlin language constructs but the side effect is that mapping files can get very large (a couple dozen megabytes). It means that the size of .apk containing copied mapping file will increase as well. This is another reason for not using this plugin on a release variant. Detecting leaks in JVM applications \u00b6 While LeakCanary was designed to work out of the box on Android, it can run on any JVM with a bit of configuration. Add the ObjectWatcher and Shark dependencies to your build file: dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher:2.8.1' implementation 'com.squareup.leakcanary:shark:2.8.1' } Define a HotSpotHeapDumper to dump the heap: import com.sun.management.HotSpotDiagnosticMXBean import java.lang.management.ManagementFactory object HotSpotHeapDumper { private val mBean : HotSpotDiagnosticMXBean by lazy { val server = ManagementFactory . getPlatformMBeanServer () ManagementFactory . newPlatformMXBeanProxy ( server , \"com.sun.management:type=HotSpotDiagnostic\" , HotSpotDiagnosticMXBean :: class . java ) } fun dumpHeap ( fileName : String ) { mBean . dumpHeap ( fileName , LIVE ) } private const val LIVE = true } Define a JvmHeapAnalyzer to analyze the heap when objects are retained and print the result to the console: import leakcanary.GcTrigger import leakcanary.ObjectWatcher import leakcanary.OnObjectRetainedListener import java.io.File import java.text.SimpleDateFormat import java.util.Date import java.util.Locale.US class JvmHeapAnalyzer ( private val objectWatcher : ObjectWatcher ) : OnObjectRetainedListener { private val fileNameFormat = SimpleDateFormat ( DATE_PATTERN , US ) override fun onObjectRetained () { GcTrigger . Default . runGc () if ( objectWatcher . retainedObjectCount == 0 ) { return } val fileName = fileNameFormat . format ( Date ()) val hprofFile = File ( fileName ) println ( \"Dumping the heap to ${hprofFile.absolutePath}\" ) HotSpotHeapDumper . dumpHeap ( hprofFile . absolutePath ) val analyzer = HeapAnalyzer ( OnAnalysisProgressListener { step -> println ( \"Analysis in progress, working on: ${step.name}\" ) }) val heapDumpAnalysis = analyzer . analyze ( heapDumpFile = hprofFile , leakingObjectFinder = KeyedWeakReferenceFinder , computeRetainedHeapSize = true , objectInspectors = ObjectInspectors . jdkDefaults ) println ( heapDumpAnalysis ) } companion object { private const val DATE_PATTERN = \"yyyy-MM-dd_HH-mm-ss_SSS'.hprof'\" } } Create an ObjectWatcher instance and configure it to watch objects for 5 seconds before notifying a JvmHeapAnalyzer instance: val scheduledExecutor = Executors . newSingleThreadScheduledExecutor () val objectWatcher = ObjectWatcher ( clock = Clock { System . currentTimeMillis () }, checkRetainedExecutor = Executor { command -> scheduledExecutor . schedule ( command , 5 , SECONDS ) } ) val heapAnalyzer = JvmHeapAnalyzer ( objectWatcher ) objectWatcher . addOnObjectRetainedListener ( heapAnalyzer ) Pass objects that you expect to be garbage collected (e.g. closed resources) to the ObjectWatcher instance: objectWatcher . watch ( watchedObject = closedResource , description = \"$closedResource is closed and should be garbage collected\" ) If you end up using LeakCanary on a JVM, the community will definitely benefit from your experience, so don\u2019t hesitate to let us know ! PackageManager.getLaunchIntentForPackage() returns LeakLauncherActivity \u00b6 LeakCanary adds a main activity that has a Intent#CATEGORY_LAUNCHER category. PackageManager.getLaunchIntentForPackage() looks for a main activity in the category Intent#CATEGORY_INFO , and next for a main activity in the category Intent#CATEGORY_LAUNCHER . PackageManager.getLaunchIntentForPackage() returns the first activity that matches in the merged manifest of your app. If your app relies on PackageManager.getLaunchIntentForPackage() , you have two options: Add Intent#CATEGORY_INFO to your main activity intent filter, so that it gets picked up first. This is what the Android documentation recommends. Disable the leakcanary launcher activity by setting the leak_canary_add_launcher_icon resource boolean to false.","title":"Code recipes"},{"location":"recipes/#code-recipes","text":"This page contains code recipes to customize LeakCanary to your needs. Read through the section titles and cook your own meal! Also don\u2019t forget to check out the FAQ . Bug If you think a recipe might be missing or you\u2019re not sure that what you\u2019re trying to achieve is possible with the current APIs, please file an issue . Your feedback helps us make LeakCanary better for the entire community.","title":"Code Recipes"},{"location":"recipes/#watching-objects-with-a-lifecycle","text":"The default configuration of LeakCanary will automatically watch Activity, Fragment, Fragment View and ViewModel instances. In your application, you may have other objects with a lifecycle, such as services, Dagger components, etc. Use AppWatcher.objectWatcher to watch instances that should be garbage collected: class MyService : Service { // ... override fun onDestroy () { super . onDestroy () AppWatcher . objectWatcher . watch ( watchedObject = this , description = \"MyService received Service#onDestroy() callback\" ) } }","title":"Watching objects with a lifecycle"},{"location":"recipes/#configuration","text":"LeakCanary has a default configuration that works well for most apps. You can also customize it to your needs. The LeakCanary configuration is held by two singleton objects ( AppWatcher and LeakCanary ) and can be updated at any time. Most developers configure LeakCanary in their debug Application class: class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } Info Create a debug application class in your src/debug/java folder. Don\u2019t forget to also register it in src/debug/AndroidManifest.xml . To customize the detection of retained objects at runtime, update AppWatcher.config : AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) To customize the heap dumping & analysis, update LeakCanary.config : LeakCanary . config = LeakCanary . config . copy ( retainedVisibleThreshold = 3 ) Java In Java, use AppWatcher.Config.Builder and LeakCanary.Config.Builder instead: AppWatcher . Config config = AppWatcher . getConfig (). newBuilder () . watchFragmentViews ( false ) . build (); AppWatcher . setConfig ( config ); LeakCanary . Config config = LeakCanary . getConfig (). newBuilder () . retainedVisibleThreshold ( 3 ) . build (); LeakCanary . setConfig ( config ); Configure the LeakCanary UI by overriding the following resources: mipmap/leak_canary_icon see Icon and label string/leak_canary_display_activity_label see Icon and label bool/leak_canary_add_dynamic_shortcut see Disabling LeakCanary bool/leak_canary_add_launcher_icon see Disabling LeakCanary layout/leak_canary_heap_dump_toast the layout for the toast shown when the heap is dumped","title":"Configuration"},{"location":"recipes/#disabling-leakcanary","text":"Sometimes it\u2019s necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you\u2019re trying to achieve: Create a build variant that does not include the LeakCanary dependencies, see Setting up LeakCanary for different product flavors . Disable the heap dumping & analysis: LeakCanary.config = LeakCanary.config.copy(dumpHeap = false) . Hide the leak display activity launcher icon: override R.bool.leak_canary_add_launcher_icon or call LeakCanary.showLeakDisplayActivityLauncherIcon(false) Info When you set LeakCanary.Config.dumpHeap to false , AppWatcher.objectWatcher will still keep track of retained objects, and LeakCanary will look for these objects when you change LeakCanary.Config.dumpHeap back to true .","title":"Disabling LeakCanary"},{"location":"recipes/#leakcanary-test-environment-detection","text":"By default, LeakCanary will look for the org.junit.Test class in your classpath and if found, will disable itself to avoid running in tests. However, some apps may ship JUnit in their debug classpaths (for example, when using OkHttp\u2019s MockWebServer) so we offer a way to customise the class that is used to determine that the app is running in a test environment. <resources> <string name= \"leak_canary_test_class_name\" > assertk.Assert </string> </resources>","title":"LeakCanary test environment detection"},{"location":"recipes/#counting-retained-instances-in-release-builds","text":"The com.squareup.leakcanary:leakcanary-android dependency should only be used in debug builds. It depends on com.squareup.leakcanary:leakcanary-object-watcher-android which you can use in release builds to track and count retained instances. In your build.gradle : dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.8.1' } In your leak reporting code: val retainedInstanceCount = AppWatcher . objectWatcher . retainedObjectCount","title":"Counting retained instances in release builds"},{"location":"recipes/#leakcanary-in-release-builds","text":"We do not recommend including LeakCanary in release builds, as it could negatively impact the experience of your customers. To avoid accidentally including the com.squareup.leakcanary:leakcanary-android dependency in a release build, LeakCanary crashes during initialization if the APK is not debuggable. You may have a good reason to create a non debuggable build that includes LeakCanary, for example for a QA build. If necessary, the crashing check can be disabled by overriding the bool/leak_canary_allow_in_non_debuggable_build resource, e.g. by creating a file under res/values with the following contents: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"leak_canary_allow_in_non_debuggable_build\" > true </bool> </resources>","title":"LeakCanary in release builds"},{"location":"recipes/#running-leakcanary-in-instrumentation-tests","text":"Running leak detection in UI tests means you can detect memory leaks automatically in Continuous Integration prior to those leaks being merged into the codebase. However, as LeakCanary runs with a 5 seconds delay and freezes the VM to take a heap dump, this can introduce flakiness to the UI tests. Therefore it is automatically disabled by setting LeakCanary.config.dumpHeap to false when JUnit is on the runtime classpath. LeakCanary provides an artifact dedicated to detecting leaks in UI tests which provides a run listener that waits for the end of a test, and if the test succeeds then it look for retained objects, trigger a heap dump if needed and perform an analysis. To set it up, add the leakcanary-android-instrumentation dependency to your instrumentation tests: androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" Add the dedicated run listener to defaultConfig in your build.gradle : android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\", \"leakcanary.FailTestOnLeakRunListener\" // If you're using Android Test Orchestrator testOptions { execution 'ANDROIDX_TEST_ORCHESTRATOR' } } } Run the instrumentation tests: ./gradlew leakcanary-android-sample:connectedCheck You can extend FailTestOnLeakRunListener to customize the behavior. Obfuscated instrumentation tests When running instrumentation tests against obfuscated release builds, the LeakCanary classes end up spread over the test APK and the main APK. Unfortunately there is a bug in the Android Gradle Plugin that leads to runtime crashes when running tests, because code from the main APK is changed without the using code in the test APK being updated accordingly. If you run into this issue, setting up the Keeper plugin should fix it.","title":"Running LeakCanary in instrumentation tests"},{"location":"recipes/#android-tv","text":"LeakCanary works on Android TV devices (FireTV, Nexus player, Nvidia Shield, MiBox, etc.) without any additional setup. However, there are couple things you need to be aware of: Android TV doesn\u2019t have notifications. LeakCanary will display Toast messages when objects become retained and when leak analysis completes. You can also check Logcat for more details. Due to lack of notifications, the only way to manually trigger a heap dump is to background the app. There\u2019s a bug on API 26+ devices that prevents the activity that displays leaks from appearing in apps list. As a workaround, LeakCanary prints an adb shell command in Logcat after heap dump analysis that launches leak list activity: adb shell am start -n \"com.your.package.name/leakcanary.internal.activity.LeakLauncherActivity\" Some Android TV devices have very little memory available per app process and this might impact LeakCanary. Running the LeakCanary analysis in a separate process might help in such cases.","title":"Android TV"},{"location":"recipes/#icon-and-label","text":"The activity that displays leaks comes with a default icon and label, which you can change by providing R.mipmap.leak_canary_icon and R.string.leak_canary_display_activity_label in your app: res/ mipmap-hdpi/ leak_canary_icon.png mipmap-mdpi/ leak_canary_icon.png mipmap-xhdpi/ leak_canary_icon.png mipmap-xxhdpi/ leak_canary_icon.png mipmap-xxxhdpi/ leak_canary_icon.png mipmap-anydpi-v26/ leak_canary_icon.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"leak_canary_display_activity_label\" > MyLeaks </string> </resources>","title":"Icon and label"},{"location":"recipes/#customizing-the-handling-of-analysis-results","text":"You can change the default behavior of what to do when LeakCanary is done analyzing a heap dump, for example to upload the analysis result to a server of your choosing. Create a custom OnHeapAnalyzedListener that delegates to DefaultOnHeapAnalyzedListener : class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } Info HeapAnalysis.toString() returns a large string describing the analysis result and metadata. This string is formatted to be printable to Logcat and shareable on sites like StackOverflow. Set LeakCanary.config.onHeapAnalyzedListener : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader ()) } }","title":"Customizing the handling of analysis results"},{"location":"recipes/#uploading-to-bugsnag","text":"A leak trace has a lot in common with a stack trace, so if you lack the engineering resources to build a backend for LeakCanary, you can instead upload leak traces to a crash reporting backend. The client needs to support grouping via custom client-side hashing as well as custom metadata with support for newlines. Info As of this writing, the only known library suitable for uploading leaks is the Bugsnag client. If you managed to make it work with another library, please file an issue . Create a Bugsnag account , create a new project for leak reporting and grab an API key . Make sure the app has the android.permission.INTERNET permission then add the latest version of the Bugsnag Android client library to build.gradle : dependencies { // debugImplementation because LeakCanary should only run in debug builds. debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1' debugImplementation \"com.bugsnag:bugsnag-android:$bugsnagVersion\" } Info If you\u2019re only using Bugsnag for uploading leaks, then you do not need to set up the Bugsnag Gradle plugin or to configure the API key in your app manifest. Create a new BugsnagLeakUploader : import android.app.Application import com.bugsnag.android.Bugsnag import com.bugsnag.android.Client import com.bugsnag.android.Configuration import com.bugsnag.android.ErrorTypes import com.bugsnag.android.Event import com.bugsnag.android.ThreadSendPolicy import leakcanary.DefaultOnHeapAnalyzedListener import leakcanary.OnHeapAnalyzedListener import shark.HeapAnalysis import shark.HeapAnalysisFailure import shark.HeapAnalysisSuccess import shark.Leak import shark.LeakTrace import shark.LibraryLeak class BugsnagLeakUploader ( applicationContext : Application ) : OnHeapAnalyzedListener { private val defaultLeakListener = DefaultOnHeapAnalyzedListener . create () private val bugsnagClient : Client init { bugsnagClient = Bugsnag . start ( applicationContext , Configuration ( BUGSNAG_API_KEY ). apply { enabledErrorTypes = DISABLE_ALL_ERROR_TYPES sendThreads = ThreadSendPolicy . NEVER } ) } override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { // Delegate to default behavior (notification and saving result) defaultLeakListener . onHeapAnalyzed ( heapAnalysis ) when ( heapAnalysis ) { is HeapAnalysisSuccess -> { val allLeakTraces = heapAnalysis . allLeaks . toList () . flatMap { leak -> leak . leakTraces . map { leakTrace -> leak to leakTrace } } allLeakTraces . forEach { ( leak , leakTrace ) -> val exception = FakeReportingException ( leak . shortDescription ) bugsnagClient . notify ( exception ) { event -> event . addHeapAnalysis ( heapAnalysis ) event . addLeak ( leak ) event . addLeakTrace ( leakTrace ) event . groupingHash = leak . signature true } } } is HeapAnalysisFailure -> { // Please file any reported failure to // https://github.com/square/leakcanary/issues bugsnagClient . notify ( heapAnalysis . exception ) } } } private fun Event . addHeapAnalysis ( heapAnalysis : HeapAnalysisSuccess ) { addMetadata ( \"Leak\" , \"heapDumpPath\" , heapAnalysis . heapDumpFile . absolutePath ) heapAnalysis . metadata . forEach { ( key , value ) -> addMetadata ( \"Leak\" , key , value ) } addMetadata ( \"Leak\" , \"analysisDurationMs\" , heapAnalysis . analysisDurationMillis ) } private fun Event . addLeak ( leak : Leak ) { addMetadata ( \"Leak\" , \"libraryLeak\" , leak is LibraryLeak ) if ( leak is LibraryLeak ) { addMetadata ( \"Leak\" , \"libraryLeakPattern\" , leak . pattern . toString ()) addMetadata ( \"Leak\" , \"libraryLeakDescription\" , leak . description ) } } private fun Event . addLeakTrace ( leakTrace : LeakTrace ) { addMetadata ( \"Leak\" , \"retainedHeapByteSize\" , leakTrace . retainedHeapByteSize ) addMetadata ( \"Leak\" , \"signature\" , leakTrace . signature ) addMetadata ( \"Leak\" , \"leakTrace\" , leakTrace . toString ()) } class FakeReportingException ( message : String ) : RuntimeException ( message ) companion object { private const val BUGSNAG_API_KEY = YOUR_BUGSNAG_API_KEY private const val DISABLE_ALL_ERROR_TYPES = ErrorTypes ( anrs = false , ndkCrashes = false , unhandledExceptions = false , unhandledRejections = false ) } } Set LeakCanary.config.onHeapAnalyzedListener to BugsnagLeakUploader : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = BugsnagLeakUploader ( applicationContext = this ) ) } } You should start seeing leaks reported into Bugsnag, grouped by their leak signature: The LEAK tab contains the leak trace:","title":"Uploading to Bugsnag"},{"location":"recipes/#matching-known-library-leaks","text":"Set LeakCanary.Config.referenceMatchers to a list that builds on top of AndroidReferenceMatchers.appDefaults : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( className = \"com.samsing.SomeSingleton\" , fieldName = \"sContext\" , description = \"SomeSingleton has a static field leaking a context.\" , patternApplies = { manufacturer == \"Samsing\" && sdkInt == 26 } ) ) } }","title":"Matching known library leaks"},{"location":"recipes/#ignoring-specific-activities-or-fragment-classes","text":"Sometimes a 3 rd party library provides its own activities or fragments which contain a number of bugs leading to leaks of those specific 3 rd party activities and fragments. You should push hard on that library to fix their memory leaks as it\u2019s directly impacting your application. That being said, until those are fixed, you have two options: Add the specific leaks as known library leaks (see Matching known library leaks ). LeakCanary will run when those leaks are detected and then report them as known library leaks. Disable LeakCanary automatic activity or fragment watching (e.g. AppWatcher.config = AppWatcher.config.copy(watchActivities = false) ) and then manually pass objects to AppWatcher.objectWatcher.watch .","title":"Ignoring specific activities or fragment classes"},{"location":"recipes/#identifying-leaking-objects-and-labeling-objects","text":"class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () val addEntityIdLabel = ObjectInspector { reporter -> reporter . whenInstanceOf ( \"com.example.DbEntity\" ) { instance -> val databaseIdField = instance [ \"com.example.DbEntity\" , \"databaseId\" ] !! val databaseId = databaseIdField . value . asInt !! labels += \"DbEntity.databaseId = $databaseId\" } } val singletonsInspector = AppSingletonInspector ( \"com.example.MySingleton\" , \"com.example.OtherSingleton\" ) val mmvmInspector = ObjectInspector { reporter -> reporter . whenInstanceOf ( \"com.mmvm.SomeViewModel\" ) { instance -> val destroyedField = instance [ \"com.mmvm.SomeViewModel\" , \"destroyed\" ] !! if ( destroyedField . value . asBoolean !! ) { leakingReasons += \"SomeViewModel.destroyed is true\" } else { notLeakingReasons += \"SomeViewModel.destroyed is false\" } } } LeakCanary . config = LeakCanary . config . copy ( objectInspectors = AndroidObjectInspectors . appDefaults + listOf ( addObjectIdLabel , singletonsInspector , mmvmInspector ) ) } }","title":"Identifying leaking objects and labeling objects"},{"location":"recipes/#running-the-leakcanary-analysis-in-a-separate-process","text":"LeakCanary runs in your main app process. LeakCanary 2 is optimized to keep memory usage low while analysing and runs in a background thread with priority Process.THREAD_PRIORITY_BACKGROUND . If you find that LeakCanary is still using too much memory or impacting the app process performance, you can configure it to run the analysis in a separate process. All you have to do is replace the leakcanary-android dependency with leakcanary-android-process : dependencies { // debugImplementation 'com.squareup.leakcanary:leakcanary-android:${version}' debugImplementation 'com.squareup.leakcanary:leakcanary-android-process:${version}' } You can call LeakCanaryProcess.isInAnalyzerProcess to check if your Application class is being created in the LeakCanary process. This is useful when configuring libraries like Firebase that may crash when running in an unexpected process.","title":"Running the LeakCanary analysis in a separate process"},{"location":"recipes/#setting-up-leakcanary-for-different-product-flavors","text":"You can setup LeakCanary to run in a specific product flavors of your app. For example, create: android { flavorDimensions \"default\" productFlavors { prod { // ... } qa { // ... } dev { // ... } } } Then, define a custom configuration for the flavor for which you want to enable LeakCanary: android { // ... } configurations { devDebugImplementation {} } You can now add the LeakCanary dependency for that configuration: dependencies { devDebugImplementation \"com.squareup.leakcanary:leakcanary-android:${version}\" }","title":"Setting up LeakCanary for different product flavors"},{"location":"recipes/#extracting-metadata-from-the-heap-dump","text":"LeakCanary.Config.metadataExtractor extracts metadata from a heap dump. The metadata is then available in HeapAnalysisSuccess.metadata . LeakCanary.Config.metadataExtractor defaults to AndroidMetadataExtractor but you can replace it to extract additional metadata from the hprof. For example, if you want to include the app version name in your heap analysis reports, you need to first store it in memory (e.g. in a static field) and then you can retrieve it in MetadataExtractor . class DebugExampleApplication : ExampleApplication () { companion object { @JvmStatic lateinit var savedVersionName : String } override fun onCreate () { super . onCreate () val packageInfo = packageManager . getPackageInfo ( packageName , 0 ) savedVersionName = packageInfo . versionName LeakCanary . config = LeakCanary . config . copy ( metadataExtractor = MetadataExtractor { graph -> val companionClass = graph . findClassByName ( \"com.example.DebugExampleApplication\" ) !! val versionNameField = companionClass [ \"savedVersionName\" ] !! val versionName = versionNameField . valueAsInstance !! . readAsJavaString () !! val defaultMetadata = AndroidMetadataExtractor . extractMetadata ( graph ) mapOf ( \"App Version Name\" to versionName ) + defaultMetadata }) } }","title":"Extracting metadata from the heap dump"},{"location":"recipes/#using-leakcanary-with-obfuscated-apps","text":"If obfuscation is turned on then leak traces will be obfuscated. It\u2019s possible to automatically deobfuscate leak traces by using a deobfuscation gradle plugin provided by LeakCanary. You have to add a plugin dependency in your root build.gradle file: buildscript { dependencies { classpath 'com.squareup.leakcanary:leakcanary-deobfuscation-gradle-plugin:${version}' } } And then you need to apply and configure the plugin in your app (or library) specific build.gradle file: apply plugin: 'com.android.application' apply plugin: 'com.squareup.leakcanary.deobfuscation' leakCanary { // LeakCanary needs to know which variants have obfuscation turned on filterObfuscatedVariants { variant -> variant . name == \"debug\" } } Now you can run LeakCanary on an obfuscated app and leak traces will be automatically deobfuscated. Important: never use this plugin on a release variant. This plugin copies obfuscation mapping file and puts it inside the .apk, so if you use it on release build then the obfuscation becomes pointless because the code can be easily deobfuscated using mapping file. Warning: R8 (Google Proguard replacement) can now understand Kotlin language constructs but the side effect is that mapping files can get very large (a couple dozen megabytes). It means that the size of .apk containing copied mapping file will increase as well. This is another reason for not using this plugin on a release variant.","title":"Using LeakCanary with obfuscated apps"},{"location":"recipes/#detecting-leaks-in-jvm-applications","text":"While LeakCanary was designed to work out of the box on Android, it can run on any JVM with a bit of configuration. Add the ObjectWatcher and Shark dependencies to your build file: dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher:2.8.1' implementation 'com.squareup.leakcanary:shark:2.8.1' } Define a HotSpotHeapDumper to dump the heap: import com.sun.management.HotSpotDiagnosticMXBean import java.lang.management.ManagementFactory object HotSpotHeapDumper { private val mBean : HotSpotDiagnosticMXBean by lazy { val server = ManagementFactory . getPlatformMBeanServer () ManagementFactory . newPlatformMXBeanProxy ( server , \"com.sun.management:type=HotSpotDiagnostic\" , HotSpotDiagnosticMXBean :: class . java ) } fun dumpHeap ( fileName : String ) { mBean . dumpHeap ( fileName , LIVE ) } private const val LIVE = true } Define a JvmHeapAnalyzer to analyze the heap when objects are retained and print the result to the console: import leakcanary.GcTrigger import leakcanary.ObjectWatcher import leakcanary.OnObjectRetainedListener import java.io.File import java.text.SimpleDateFormat import java.util.Date import java.util.Locale.US class JvmHeapAnalyzer ( private val objectWatcher : ObjectWatcher ) : OnObjectRetainedListener { private val fileNameFormat = SimpleDateFormat ( DATE_PATTERN , US ) override fun onObjectRetained () { GcTrigger . Default . runGc () if ( objectWatcher . retainedObjectCount == 0 ) { return } val fileName = fileNameFormat . format ( Date ()) val hprofFile = File ( fileName ) println ( \"Dumping the heap to ${hprofFile.absolutePath}\" ) HotSpotHeapDumper . dumpHeap ( hprofFile . absolutePath ) val analyzer = HeapAnalyzer ( OnAnalysisProgressListener { step -> println ( \"Analysis in progress, working on: ${step.name}\" ) }) val heapDumpAnalysis = analyzer . analyze ( heapDumpFile = hprofFile , leakingObjectFinder = KeyedWeakReferenceFinder , computeRetainedHeapSize = true , objectInspectors = ObjectInspectors . jdkDefaults ) println ( heapDumpAnalysis ) } companion object { private const val DATE_PATTERN = \"yyyy-MM-dd_HH-mm-ss_SSS'.hprof'\" } } Create an ObjectWatcher instance and configure it to watch objects for 5 seconds before notifying a JvmHeapAnalyzer instance: val scheduledExecutor = Executors . newSingleThreadScheduledExecutor () val objectWatcher = ObjectWatcher ( clock = Clock { System . currentTimeMillis () }, checkRetainedExecutor = Executor { command -> scheduledExecutor . schedule ( command , 5 , SECONDS ) } ) val heapAnalyzer = JvmHeapAnalyzer ( objectWatcher ) objectWatcher . addOnObjectRetainedListener ( heapAnalyzer ) Pass objects that you expect to be garbage collected (e.g. closed resources) to the ObjectWatcher instance: objectWatcher . watch ( watchedObject = closedResource , description = \"$closedResource is closed and should be garbage collected\" ) If you end up using LeakCanary on a JVM, the community will definitely benefit from your experience, so don\u2019t hesitate to let us know !","title":"Detecting leaks in JVM applications"},{"location":"recipes/#packagemanagergetlaunchintentforpackage-returns-leaklauncheractivity","text":"LeakCanary adds a main activity that has a Intent#CATEGORY_LAUNCHER category. PackageManager.getLaunchIntentForPackage() looks for a main activity in the category Intent#CATEGORY_INFO , and next for a main activity in the category Intent#CATEGORY_LAUNCHER . PackageManager.getLaunchIntentForPackage() returns the first activity that matches in the merged manifest of your app. If your app relies on PackageManager.getLaunchIntentForPackage() , you have two options: Add Intent#CATEGORY_INFO to your main activity intent filter, so that it gets picked up first. This is what the Android documentation recommends. Disable the leakcanary launcher activity by setting the leak_canary_add_launcher_icon resource boolean to false.","title":"PackageManager.getLaunchIntentForPackage() returns LeakLauncherActivity"},{"location":"recorded-presentations/","text":"Live leak investigations , investigating leaks on Stack Overflow and fixes for AOSP leaks Fixing leaks in Firefox Shark: Diving into the guts of LeakCanary\u2019s Hprof parser LeakCanary 2: Leaner, Better, Faster, Kotliner! LeakCanary, then what? Nuking Nasty Memory Leaks Memory Leak Hunt , a live investigation. Installing LeakCanary (LeakCanary 1.5) How to use LeakCanary Your presentation should be here, please update this list! Any technical level welcome.","title":"Recorded Presentations"},{"location":"releasing/","text":"Releasing LeakCanary \u00b6 Preparing the release environment \u00b6 Set up your Sonatype OSSRH account \u00b6 Create a Sonatype OSSRH JIRA account . Create a ticket to request access to the com.squareup.leakcanary project. Here\u2019s an example: OSSRH-54959 . Then ask someone with deployer role from the LeakCanary team to confirm access. Set up your signing key \u00b6 # Create a new key gpg --gen-key # List local keys. Key id is last 8 characters gpg -K cd ~/.gnupg # Export key locally gpg --export-secret-keys -o secring.gpg # Upload key to Ubuntu servers gpg --send-keys --keyserver keyserver.ubuntu.com <KEY ID> # Confirm the key can now be found gpg --recv-keys --keyserver keyserver.ubuntu.com <KEY ID> Set up your home gradle.properties \u00b6 Add this to your ~/.gradle/gradle.properties : signing.keyId=<KEY ID> signing.password=<KEY PASSWORD> signing.secretKeyRingFile=/Users/YOUR_USERNAME_/.gnupg/secring.gpg SONATYPE_NEXUS_USERNAME=<SONATYPE_USERNAME> SONATYPE_NEXUS_PASSWORD=<SONATYPE_PASSWORD> Set up the Google Analytics docs key \u00b6 Add this to your ~/.bashrc : export LEAKCANARY_GOOGLE_ANALYTICS_KEY = \"UA-142834539-1\" Set up GitHub CLI \u00b6 Install GitHub CLI brew install gh Install jq, a CLI Json processor brew install jq Set up aliases for milestone management: gh alias set listOpenMilestones \"api graphql -F owner=':owner' -F name=':repo' -f query=' query ListOpenMilestones(\\$name: String\\!, \\$owner: String\\!) { repository(owner: \\$owner, name: \\$name) { milestones(first: 100, states: OPEN) { nodes { title number description dueOn url state closed closedAt updatedAt } } } } '\" gh alias set --shell createMilestone \"gh api --method POST repos/:owner/:repo/milestones --input - | jq '{ html_url: .html_url, state: .state, created_at: .created_at }'\" gh alias set --shell closeMilestone \"echo '{\\\"state\\\": \\\"closed\\\"}' | gh api --method PATCH repos/:owner/:repo/milestones/\\$1 --input - | jq '{ html_url: .html_url, state: .state, closed_at: .closed_at }'\" Install the doc generation dependencies \u00b6 pip3 install mkdocs-material Releasing \u00b6 Create a local release branch from main git checkout main git pull git checkout -b release_2.9 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) sed -i '' 's/VERSION_NAME=2.9-SNAPSHOT/VERSION_NAME=2.9/' gradle.properties Update the current version and next version in mkdocs.yml sed -i '' 's/2.9/REPLACE_WITH_NEXT_VERSION_NUMBER/' mkdocs.yml sed -i '' 's/2.8.1/2.9/' mkdocs.yml Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka plumber-android:dokka leakcanary-android-release:dokka Update the changelog ( commit list ) mate docs/changelog.md Deploy the docs locally then open the changelog and check everything looks good mkdocs serve Commit all local changes git commit -am \"Prepare 2.9 release\" Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v2.9 git push origin v2.9 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://s01.oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to main git checkout main git pull git merge --no-ff release_2.9 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) sed -i '' 's/VERSION_NAME=2.9/VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT/' gradle.properties Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Close the currently open milestone gh listOpenMilestones | jq '.data.repository.milestones.nodes[0].number' | xargs gh closeMilestone Create a milestone for the new version echo '{ \"title\": \"REPLACE_WITH_NEXT_VERSION_NUMBER\", \"state\": \"open\", \"description\": \"\" }' | gh createMilestone Redeploy the docs mkdocs gh-deploy Create a new release gh release create v2.9 ./shark-cli/build/distributions/shark-cli-2.9.zip --title v2.9 --notes 'See [Change Log](https://square.github.io/leakcanary/changelog)' Open the v2.9 release to confirm everything looks good. Upload shark-cli to brew : brew bump-formula-pr --url https://github.com/square/leakcanary/releases/download/v2.9/shark-cli-2.9.zip leakcanary-shark Wait for the release to be available on Maven Central . Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing"},{"location":"releasing/#releasing-leakcanary","text":"","title":"Releasing LeakCanary"},{"location":"releasing/#preparing-the-release-environment","text":"","title":"Preparing the release environment"},{"location":"releasing/#set-up-your-sonatype-ossrh-account","text":"Create a Sonatype OSSRH JIRA account . Create a ticket to request access to the com.squareup.leakcanary project. Here\u2019s an example: OSSRH-54959 . Then ask someone with deployer role from the LeakCanary team to confirm access.","title":"Set up your Sonatype OSSRH account"},{"location":"releasing/#set-up-your-signing-key","text":"# Create a new key gpg --gen-key # List local keys. Key id is last 8 characters gpg -K cd ~/.gnupg # Export key locally gpg --export-secret-keys -o secring.gpg # Upload key to Ubuntu servers gpg --send-keys --keyserver keyserver.ubuntu.com <KEY ID> # Confirm the key can now be found gpg --recv-keys --keyserver keyserver.ubuntu.com <KEY ID>","title":"Set up your signing key"},{"location":"releasing/#set-up-your-home-gradleproperties","text":"Add this to your ~/.gradle/gradle.properties : signing.keyId=<KEY ID> signing.password=<KEY PASSWORD> signing.secretKeyRingFile=/Users/YOUR_USERNAME_/.gnupg/secring.gpg SONATYPE_NEXUS_USERNAME=<SONATYPE_USERNAME> SONATYPE_NEXUS_PASSWORD=<SONATYPE_PASSWORD>","title":"Set up your home gradle.properties"},{"location":"releasing/#set-up-the-google-analytics-docs-key","text":"Add this to your ~/.bashrc : export LEAKCANARY_GOOGLE_ANALYTICS_KEY = \"UA-142834539-1\"","title":"Set up the Google Analytics docs key"},{"location":"releasing/#set-up-github-cli","text":"Install GitHub CLI brew install gh Install jq, a CLI Json processor brew install jq Set up aliases for milestone management: gh alias set listOpenMilestones \"api graphql -F owner=':owner' -F name=':repo' -f query=' query ListOpenMilestones(\\$name: String\\!, \\$owner: String\\!) { repository(owner: \\$owner, name: \\$name) { milestones(first: 100, states: OPEN) { nodes { title number description dueOn url state closed closedAt updatedAt } } } } '\" gh alias set --shell createMilestone \"gh api --method POST repos/:owner/:repo/milestones --input - | jq '{ html_url: .html_url, state: .state, created_at: .created_at }'\" gh alias set --shell closeMilestone \"echo '{\\\"state\\\": \\\"closed\\\"}' | gh api --method PATCH repos/:owner/:repo/milestones/\\$1 --input - | jq '{ html_url: .html_url, state: .state, closed_at: .closed_at }'\"","title":"Set up GitHub CLI"},{"location":"releasing/#install-the-doc-generation-dependencies","text":"pip3 install mkdocs-material","title":"Install the doc generation dependencies"},{"location":"releasing/#releasing","text":"Create a local release branch from main git checkout main git pull git checkout -b release_2.9 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) sed -i '' 's/VERSION_NAME=2.9-SNAPSHOT/VERSION_NAME=2.9/' gradle.properties Update the current version and next version in mkdocs.yml sed -i '' 's/2.9/REPLACE_WITH_NEXT_VERSION_NUMBER/' mkdocs.yml sed -i '' 's/2.8.1/2.9/' mkdocs.yml Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka plumber-android:dokka leakcanary-android-release:dokka Update the changelog ( commit list ) mate docs/changelog.md Deploy the docs locally then open the changelog and check everything looks good mkdocs serve Commit all local changes git commit -am \"Prepare 2.9 release\" Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v2.9 git push origin v2.9 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://s01.oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to main git checkout main git pull git merge --no-ff release_2.9 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) sed -i '' 's/VERSION_NAME=2.9/VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT/' gradle.properties Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Close the currently open milestone gh listOpenMilestones | jq '.data.repository.milestones.nodes[0].number' | xargs gh closeMilestone Create a milestone for the new version echo '{ \"title\": \"REPLACE_WITH_NEXT_VERSION_NUMBER\", \"state\": \"open\", \"description\": \"\" }' | gh createMilestone Redeploy the docs mkdocs gh-deploy Create a new release gh release create v2.9 ./shark-cli/build/distributions/shark-cli-2.9.zip --title v2.9 --notes 'See [Change Log](https://square.github.io/leakcanary/changelog)' Open the v2.9 release to confirm everything looks good. Upload shark-cli to brew : brew bump-formula-pr --url https://github.com/square/leakcanary/releases/download/v2.9/shark-cli-2.9.zip leakcanary-shark Wait for the release to be available on Maven Central . Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing"},{"location":"shark/","text":"Shark \ud83e\udd88 \u00b6 Shark : S m a r t H e a p A n a l y s i s R e p o r t s f o r K o t l i n Shark is the heap analyzer that powers LeakCanary 2. It\u2019s a Kotlin standalone heap analysis library that runs at high speed with a low memory footprint . Shark is released in layers: Shark Hprof : Read and write records in hprof files. Shark Graph : Navigate the heap object graph. Shark : Generate heap analysis reports. Shark Android : Android heuristics to generate tailored heap analysis reports. Shark CLI : Analyze the heap of debuggable apps installed on an Android device connected to your desktop. The output is similar to the output of LeakCanary, except you don\u2019t have to add the LeakCanary dependency to your app. LeakCanary : Builds on top. It automatically watches destroyed activities and fragments, triggers a heap dump, runs Shark Android and then displays the result. A few more things: Shark is built on top of Okio. Okio makes it easy to parse heap dumps efficiently. Shark is a 100% Kotlin library, and Kotlin is essential to its design, because Shark relies heavily on sealed classes and sequences to save memory. Shark has the unique ability to help narrow down the cause of memory leaks through platform specific heuristics . Shark is heavily tested (80% test coverage). Shark can run in both Java and Android VMs, with no other dependency than Okio and Kotlin. Shark can analyze both Java and Android VM hprof files. Shark can deobfuscate hprof records if it has access to obfuscation mapping file. Shark CLI \u00b6 The Shark Command Line Interface (CLI) enables you to analyze heaps directly from your computer. It can dump the heap of an app installed on a connected Android device, analyze it, and even strip a heap dump of any sensitive data (e.g. PII, passwords or encryption keys) which is useful when sharing a heap dump. Install it via Homebrew : brew install leakcanary-shark You can also download it here . You can then look for leaks in apps on any connected device, for example: $ shark-cli --device emulator-5554 --process com.example.app.debug analyze Info shark-cli works with all debuggable apps, even if they don\u2019t include the leakcanary-android dependency. Run shark-cli to see usage instructions: $ shark-cli Usage: shark-cli [OPTIONS] COMMAND [ARGS]... ^`. .=\"\"=. ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / `~~~--__ \\ /\\ / { \\___----~~' `~~-_/'-=\\/=-'\\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / '. .' '._.' _|`~~`|_ /|\\ /|\\ Options: -p, --process TEXT Full or partial name of a process, e.g. \"example\" would match \"com.example.app\" -d, --device ID device/emulator id -m, --obfuscation-mapping PATH path to obfuscation mapping file --verbose / --no-verbose provide additional details as to what shark-cli is doing -h, --hprof FILE path to a .hprof file --help Show this message and exit Commands: interactive Explore a heap dump. analyze Analyze a heap dump. dump-process Dump the heap and pull the hprof file. strip-hprof Replace all primitive arrays from the provided heap dump with arrays of zeroes and generate a new \"-stripped.hprof\" file. Shark code examples \u00b6 Reading records in a hprof file \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark-hprof:$sharkVersion' } // Prints all class and field names Hprof . open ( heapDumpFile ) . use { hprof -> hprof . reader . readHprofRecords ( recordTypes = setOf ( StringRecord :: class ), listener = OnHprofRecordListener { position , record -> println (( record as StringRecord ). string ) }) } Navigating the heap object graph \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark-graph:$sharkVersion' } // Prints all thread names Hprof . open ( heapDumpFile ) . use { hprof -> val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val threadClass = heapGraph . findClassByName ( \"java.lang.Thread\" ) !! val threadNames : Sequence < String > = threadClass . instances . map { instance -> val nameField = instance [ \"java.lang.Thread\" , \"name\" ] !! nameField . value . readAsJavaString () !! } threadNames . forEach { println ( it ) } } Generating a heap analysis report \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark:$sharkVersion' } // Marks any instance of com.example.ThingWithLifecycle with // ThingWithLifecycle.destroyed=true as leaking val leakingObjectFilter = object : LeakingObjectFilter { override fun isLeakingObject ( heapObject : HeapObject ): Boolean { return if ( heapObject instanceOf \"com.example.ThingWithLifecycle\" ) { val instance = heapObject as HeapInstance val destroyedField = instance [ \"com.example.ThingWithLifecycle\" , \"destroyed\" ] !! destroyedField . value . asBoolean !! } else false } } val leakingObjectFinder = FilteringLeakingObjectFinder ( listOf ( leakingObjectFilter )) val heapAnalysis = Hprof . open ( heapDumpFile ) . use { hprof -> val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) heapAnalyzer . analyze ( heapDumpFile = heapDumpFile , graph = heapGraph , leakingObjectFinder = leakingObjectFinder , ) } println ( analysis ) Generating an Android heap analysis report \u00b6 dependencies { implementation 'com.squareup.leakcanary:shark-android:$sharkVersion' } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , referenceMatchers = AndroidReferenceMatchers . appDefaults , objectInspectors = AndroidObjectInspectors . appDefaults ) println ( analysis )","title":"Overview"},{"location":"shark/#shark","text":"Shark : S m a r t H e a p A n a l y s i s R e p o r t s f o r K o t l i n Shark is the heap analyzer that powers LeakCanary 2. It\u2019s a Kotlin standalone heap analysis library that runs at high speed with a low memory footprint . Shark is released in layers: Shark Hprof : Read and write records in hprof files. Shark Graph : Navigate the heap object graph. Shark : Generate heap analysis reports. Shark Android : Android heuristics to generate tailored heap analysis reports. Shark CLI : Analyze the heap of debuggable apps installed on an Android device connected to your desktop. The output is similar to the output of LeakCanary, except you don\u2019t have to add the LeakCanary dependency to your app. LeakCanary : Builds on top. It automatically watches destroyed activities and fragments, triggers a heap dump, runs Shark Android and then displays the result. A few more things: Shark is built on top of Okio. Okio makes it easy to parse heap dumps efficiently. Shark is a 100% Kotlin library, and Kotlin is essential to its design, because Shark relies heavily on sealed classes and sequences to save memory. Shark has the unique ability to help narrow down the cause of memory leaks through platform specific heuristics . Shark is heavily tested (80% test coverage). Shark can run in both Java and Android VMs, with no other dependency than Okio and Kotlin. Shark can analyze both Java and Android VM hprof files. Shark can deobfuscate hprof records if it has access to obfuscation mapping file.","title":"Shark \ud83e\udd88"},{"location":"shark/#shark-cli","text":"The Shark Command Line Interface (CLI) enables you to analyze heaps directly from your computer. It can dump the heap of an app installed on a connected Android device, analyze it, and even strip a heap dump of any sensitive data (e.g. PII, passwords or encryption keys) which is useful when sharing a heap dump. Install it via Homebrew : brew install leakcanary-shark You can also download it here . You can then look for leaks in apps on any connected device, for example: $ shark-cli --device emulator-5554 --process com.example.app.debug analyze Info shark-cli works with all debuggable apps, even if they don\u2019t include the leakcanary-android dependency. Run shark-cli to see usage instructions: $ shark-cli Usage: shark-cli [OPTIONS] COMMAND [ARGS]... ^`. .=\"\"=. ^_ \\ \\ / _ _ \\ \\ \\ { \\ | d b | { \\ / `~~~--__ \\ /\\ / { \\___----~~' `~~-_/'-=\\/=-'\\, \\ /// a `~. \\ \\ / /~~~~-, ,__. , /// __,,,,) \\ | \\/ \\/ `~~~; ,---~~-_`/ \\ / \\/ / / '. .' '._.' _|`~~`|_ /|\\ /|\\ Options: -p, --process TEXT Full or partial name of a process, e.g. \"example\" would match \"com.example.app\" -d, --device ID device/emulator id -m, --obfuscation-mapping PATH path to obfuscation mapping file --verbose / --no-verbose provide additional details as to what shark-cli is doing -h, --hprof FILE path to a .hprof file --help Show this message and exit Commands: interactive Explore a heap dump. analyze Analyze a heap dump. dump-process Dump the heap and pull the hprof file. strip-hprof Replace all primitive arrays from the provided heap dump with arrays of zeroes and generate a new \"-stripped.hprof\" file.","title":"Shark CLI"},{"location":"shark/#shark-code-examples","text":"","title":"Shark code examples"},{"location":"shark/#reading-records-in-a-hprof-file","text":"dependencies { implementation 'com.squareup.leakcanary:shark-hprof:$sharkVersion' } // Prints all class and field names Hprof . open ( heapDumpFile ) . use { hprof -> hprof . reader . readHprofRecords ( recordTypes = setOf ( StringRecord :: class ), listener = OnHprofRecordListener { position , record -> println (( record as StringRecord ). string ) }) }","title":"Reading records in a hprof file"},{"location":"shark/#navigating-the-heap-object-graph","text":"dependencies { implementation 'com.squareup.leakcanary:shark-graph:$sharkVersion' } // Prints all thread names Hprof . open ( heapDumpFile ) . use { hprof -> val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val threadClass = heapGraph . findClassByName ( \"java.lang.Thread\" ) !! val threadNames : Sequence < String > = threadClass . instances . map { instance -> val nameField = instance [ \"java.lang.Thread\" , \"name\" ] !! nameField . value . readAsJavaString () !! } threadNames . forEach { println ( it ) } }","title":"Navigating the heap object graph"},{"location":"shark/#generating-a-heap-analysis-report","text":"dependencies { implementation 'com.squareup.leakcanary:shark:$sharkVersion' } // Marks any instance of com.example.ThingWithLifecycle with // ThingWithLifecycle.destroyed=true as leaking val leakingObjectFilter = object : LeakingObjectFilter { override fun isLeakingObject ( heapObject : HeapObject ): Boolean { return if ( heapObject instanceOf \"com.example.ThingWithLifecycle\" ) { val instance = heapObject as HeapInstance val destroyedField = instance [ \"com.example.ThingWithLifecycle\" , \"destroyed\" ] !! destroyedField . value . asBoolean !! } else false } } val leakingObjectFinder = FilteringLeakingObjectFinder ( listOf ( leakingObjectFilter )) val heapAnalysis = Hprof . open ( heapDumpFile ) . use { hprof -> val heapGraph = HprofHeapGraph . indexHprof ( hprof ) val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) heapAnalyzer . analyze ( heapDumpFile = heapDumpFile , graph = heapGraph , leakingObjectFinder = leakingObjectFinder , ) } println ( analysis )","title":"Generating a heap analysis report"},{"location":"shark/#generating-an-android-heap-analysis-report","text":"dependencies { implementation 'com.squareup.leakcanary:shark-android:$sharkVersion' } val heapAnalyzer = HeapAnalyzer ( AnalyzerProgressListener . NONE ) val analysis = heapAnalyzer . checkForLeaks ( heapDumpFile = heapDumpFile , referenceMatchers = AndroidReferenceMatchers . appDefaults , objectInspectors = AndroidObjectInspectors . appDefaults ) println ( analysis )","title":"Generating an Android heap analysis report"},{"location":"support/","text":"LeakCanary Support \u00b6 If you\u2019re looking for help with LeakCanary: Learn the Fundamentals Try the code recipes Read the FAQ Watch recorded presentations Read blog articles Ask a question on StackOverflow","title":"Support"},{"location":"support/#leakcanary-support","text":"If you\u2019re looking for help with LeakCanary: Learn the Fundamentals Try the code recipes Read the FAQ Watch recorded presentations Read blog articles Ask a question on StackOverflow","title":"LeakCanary Support"},{"location":"upgrading-to-leakcanary-2.0/","text":"LeakCanary 2 is a major rewrite. High level changes: New heap analyzer, reimplemented from scratch to use 10 times less memory ( see Shark ). APIs updated to simplify configuration and provide access to the new heap analyzer. Internals rewritten to 100% Kotlin. Multiple leaks detected in one analysis, grouped per leak type Dependencies \u00b6 Before \u00b6 dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3' releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3' // Optional, if you use support library fragments: debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3' } Now \u00b6 dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1' } Worth noting \u00b6 The leakcanary-android-no-op artifact is gone. If you have compile errors, see below. Question : if there\u2019s no no-op anymore, how do I ensure none of this runs during release builds? Answer : as long as you add leakcanary-android as debugImplementation , there won\u2019t be any code referencing LeakCanary in your release builds. LeakCanary does not depend on the support library anymore, and it doesn\u2019t depend on AndroidX either. Detection of AndroidX fragments is automatic if you have the AndroidX fragments dependency. Default setup code \u00b6 Before \u00b6 public class ExampleApplication extends Application { @Override public void onCreate () { super . onCreate (); if ( LeakCanary . isInAnalyzerProcess ( this )) { // This process is dedicated to LeakCanary for heap analysis. // You should not init your app in this process. return ; } LeakCanary . install ( this ); // Normal app init code... } } Now \u00b6 There is no more code for default setup. Worth noting \u00b6 LeakCanary auto installs itself LeakCanary analysis now runs in the main process so there is no need to call LeakCanary.isInAnalyzerProcess() . Retrieve the RefWatcher \u00b6 Before \u00b6 val refWatcher : RefWatcher = LeakCanary . installedRefWatcher () Now \u00b6 val objectWatcher : ObjectWatcher = AppWatcher . objectWatcher Compile errors because RefWatcher is used in release code \u00b6 If you were using RefWatcher in non debug code, you now get a compile error because the no-op artifact is gone. ObjectWatcher now lives in the object-watcher artifact, which is suitable for release builds. You have two options: Option 1: Add object-watcher-android to release builds. \u00b6 dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.8.1' } It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to AppWatcher.objectWatcher . It will not trigger heap dumps or anything else that LeakCanary does. It\u2019s very little code and should have a no impact on your release app. You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes: val retainedObjectCount = AppWatcher . objectWatcher . retainedObjectCount Option 2: Make your own ObjectWatcher interface \u00b6 // In shared code interface MaybeObjectWatcher { fun watch ( watchedObject : Any , description : String ) object None : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { } } } // In debug code class RealObjectWatcher : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { AppWatcher . objectWatcher . watch ( watchedObject , description ) } } Use MaybeObjectWatcher.None in release code and RealObjectWatcher in debug code. Configuring LeakCanary \u00b6 Before \u00b6 public class DebugExampleApplication extends ExampleApplication { @Override protected void installLeakCanary () { RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . watchActivities ( false ) . buildAndInstall (); } } Now \u00b6 AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing AppWatcher.config : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing LeakCanary.config : disableLeakCanaryButton . setOnClickListener { LeakCanary . config = LeakCanary . config . copy ( dumpHeap = false ) } Running LeakCanary in instrumentation tests \u00b6 Before \u00b6 In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"com.squareup.leakcanary.FailTestOnLeakRunListener\" } } In your test Application class: public class InstrumentationTestExampleApplication extends DebugExampleApplication { @Override protected void installLeakCanary () { InstrumentationLeakDetector . instrumentationRefWatcher ( this ) . buildAndInstall (); } } Now \u00b6 In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"leakcanary.FailTestOnLeakRunListener\" } } No code is necessary. Analysis listener / uploading to a server \u00b6 Before \u00b6 public class LeakUploadService extends DisplayLeakService { @Override protected void afterDefaultHandling ( HeapDump heapDump , AnalysisResult result , String leakInfo ) { // TODO Upload result to server } } RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . listenerServiceClass ( LeakUploadService . class ) . buildAndInstall (); <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" > <application android:name= \"com.example.DebugExampleApplication\" > <service android:name= \"com.example.LeakUploadService\" /> </application> </manifest> Now \u00b6 class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader () ) } } Matching known library leaks \u00b6 Before \u00b6 ExcludedRefs excludedRefs = AndroidExcludedRefs . createAppDefaults () . staticField ( \"com.samsing.SomeSingleton\" , \"sContext\" ) . build (); RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . excludedRefs ( excludedRefs ) . buildAndInstall (); } Now \u00b6 LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( \"com.samsing.SomeSingleton\" , \"sContext\" ) ) Info There is no equivalent API to ExcludedRefs.Builder.clazz() because it led to abuses. Instead see Ignoring specific activities or fragment classes . Public API packages \u00b6 Before \u00b6 All public APIs were in com.squareup.leakcanary.* Now \u00b6 All public APIs are in leakcanary.*","title":"Upgrading to LeakCanary 2"},{"location":"upgrading-to-leakcanary-2.0/#dependencies","text":"","title":"Dependencies"},{"location":"upgrading-to-leakcanary-2.0/#before","text":"dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3' releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3' // Optional, if you use support library fragments: debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3' }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now","text":"dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1' }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting","text":"The leakcanary-android-no-op artifact is gone. If you have compile errors, see below. Question : if there\u2019s no no-op anymore, how do I ensure none of this runs during release builds? Answer : as long as you add leakcanary-android as debugImplementation , there won\u2019t be any code referencing LeakCanary in your release builds. LeakCanary does not depend on the support library anymore, and it doesn\u2019t depend on AndroidX either. Detection of AndroidX fragments is automatic if you have the AndroidX fragments dependency.","title":"Worth noting"},{"location":"upgrading-to-leakcanary-2.0/#default-setup-code","text":"","title":"Default setup code"},{"location":"upgrading-to-leakcanary-2.0/#before_1","text":"public class ExampleApplication extends Application { @Override public void onCreate () { super . onCreate (); if ( LeakCanary . isInAnalyzerProcess ( this )) { // This process is dedicated to LeakCanary for heap analysis. // You should not init your app in this process. return ; } LeakCanary . install ( this ); // Normal app init code... } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_1","text":"There is no more code for default setup.","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting_1","text":"LeakCanary auto installs itself LeakCanary analysis now runs in the main process so there is no need to call LeakCanary.isInAnalyzerProcess() .","title":"Worth noting"},{"location":"upgrading-to-leakcanary-2.0/#retrieve-the-refwatcher","text":"","title":"Retrieve the RefWatcher"},{"location":"upgrading-to-leakcanary-2.0/#before_2","text":"val refWatcher : RefWatcher = LeakCanary . installedRefWatcher ()","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_2","text":"val objectWatcher : ObjectWatcher = AppWatcher . objectWatcher","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#compile-errors-because-refwatcher-is-used-in-release-code","text":"If you were using RefWatcher in non debug code, you now get a compile error because the no-op artifact is gone. ObjectWatcher now lives in the object-watcher artifact, which is suitable for release builds. You have two options:","title":"Compile errors because RefWatcher is used in release code"},{"location":"upgrading-to-leakcanary-2.0/#option-1-add-object-watcher-android-to-release-builds","text":"dependencies { implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.8.1' } It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to AppWatcher.objectWatcher . It will not trigger heap dumps or anything else that LeakCanary does. It\u2019s very little code and should have a no impact on your release app. You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes: val retainedObjectCount = AppWatcher . objectWatcher . retainedObjectCount","title":"Option 1: Add object-watcher-android to release builds."},{"location":"upgrading-to-leakcanary-2.0/#option-2-make-your-own-objectwatcher-interface","text":"// In shared code interface MaybeObjectWatcher { fun watch ( watchedObject : Any , description : String ) object None : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { } } } // In debug code class RealObjectWatcher : MaybeObjectWatcher { override fun watch ( watchedObject : Any , description : String ) { AppWatcher . objectWatcher . watch ( watchedObject , description ) } } Use MaybeObjectWatcher.None in release code and RealObjectWatcher in debug code.","title":"Option 2: Make your own ObjectWatcher interface"},{"location":"upgrading-to-leakcanary-2.0/#configuring-leakcanary","text":"","title":"Configuring LeakCanary"},{"location":"upgrading-to-leakcanary-2.0/#before_3","text":"public class DebugExampleApplication extends ExampleApplication { @Override protected void installLeakCanary () { RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . watchActivities ( false ) . buildAndInstall (); } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_3","text":"AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing AppWatcher.config : class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () AppWatcher . config = AppWatcher . config . copy ( watchFragmentViews = false ) } } LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing LeakCanary.config : disableLeakCanaryButton . setOnClickListener { LeakCanary . config = LeakCanary . config . copy ( dumpHeap = false ) }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#running-leakcanary-in-instrumentation-tests","text":"","title":"Running LeakCanary in instrumentation tests"},{"location":"upgrading-to-leakcanary-2.0/#before_4","text":"In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"com.squareup.leakcanary.FailTestOnLeakRunListener\" } } In your test Application class: public class InstrumentationTestExampleApplication extends DebugExampleApplication { @Override protected void installLeakCanary () { InstrumentationLeakDetector . instrumentationRefWatcher ( this ) . buildAndInstall (); } }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_4","text":"In your build.gradle file: dependencies { androidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\" } android { defaultConfig { // ... testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" testInstrumentationRunnerArgument \"listener\" , \"leakcanary.FailTestOnLeakRunListener\" } } No code is necessary.","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#analysis-listener-uploading-to-a-server","text":"","title":"Analysis listener / uploading to a server"},{"location":"upgrading-to-leakcanary-2.0/#before_5","text":"public class LeakUploadService extends DisplayLeakService { @Override protected void afterDefaultHandling ( HeapDump heapDump , AnalysisResult result , String leakInfo ) { // TODO Upload result to server } } RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . listenerServiceClass ( LeakUploadService . class ) . buildAndInstall (); <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" > <application android:name= \"com.example.DebugExampleApplication\" > <service android:name= \"com.example.LeakUploadService\" /> </application> </manifest>","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_5","text":"class LeakUploader : OnHeapAnalyzedListener { val defaultListener = DefaultOnHeapAnalyzedListener . create () override fun onHeapAnalyzed ( heapAnalysis : HeapAnalysis ) { TODO ( \"Upload heap analysis to server\" ) // Delegate to default behavior (notification and saving result) defaultListener . onHeapAnalyzed ( heapAnalysis ) } } class DebugExampleApplication : ExampleApplication () { override fun onCreate () { super . onCreate () LeakCanary . config = LeakCanary . config . copy ( onHeapAnalyzedListener = LeakUploader () ) } }","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#matching-known-library-leaks","text":"","title":"Matching known library leaks"},{"location":"upgrading-to-leakcanary-2.0/#before_6","text":"ExcludedRefs excludedRefs = AndroidExcludedRefs . createAppDefaults () . staticField ( \"com.samsing.SomeSingleton\" , \"sContext\" ) . build (); RefWatcher refWatcher = LeakCanary . refWatcher ( this ) . excludedRefs ( excludedRefs ) . buildAndInstall (); }","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_6","text":"LeakCanary . config = LeakCanary . config . copy ( referenceMatchers = AndroidReferenceMatchers . appDefaults + AndroidReferenceMatchers . staticFieldLeak ( \"com.samsing.SomeSingleton\" , \"sContext\" ) ) Info There is no equivalent API to ExcludedRefs.Builder.clazz() because it led to abuses. Instead see Ignoring specific activities or fragment classes .","title":"Now"},{"location":"upgrading-to-leakcanary-2.0/#public-api-packages","text":"","title":"Public API packages"},{"location":"upgrading-to-leakcanary-2.0/#before_7","text":"All public APIs were in com.squareup.leakcanary.*","title":"Before"},{"location":"upgrading-to-leakcanary-2.0/#now_7","text":"All public APIs are in leakcanary.*","title":"Now"},{"location":"api/","text":"// plumber-android-core plumber-android-core \u00b6 Packages \u00b6 Name leakcanary","title":"Index"},{"location":"api/#plumber-android-core","text":"","title":"plumber-android-core"},{"location":"api/#packages","text":"Name leakcanary","title":"Packages"},{"location":"api/leakcanary-android-core/leakcanary/","text":"// leakcanary-android-core / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary AndroidDebugHeapDumper [androidJvm] object AndroidDebugHeapDumper : HeapDumper Dumps the Android heap using Debug.dumpHprofData . BackgroundThreadHeapAnalyzer [androidJvm] object BackgroundThreadHeapAnalyzer : EventListener Starts heap analysis on a background HandlerThread when receiving a HeapDump event. EventListener [androidJvm] fun interface EventListener HeapDumper [androidJvm] fun interface HeapDumper LazyForwardingEventListener [androidJvm] class LazyForwardingEventListener (lazyEventListener: () -> EventListener ) : EventListener Forwards events to the EventListener provided by lazyEventListener which is evaluated lazily, when the first comes in. LeakCanary [androidJvm] object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher. AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LogcatEventListener [androidJvm] object LogcatEventListener : EventListener NotificationEventListener [androidJvm] object NotificationEventListener : EventListener RemoteWorkManagerHeapAnalyzer [androidJvm] object RemoteWorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis in a dedicated :leakcanary process ToastEventListener [androidJvm] object ToastEventListener : EventListener TvEventListener [androidJvm] object TvEventListener : EventListener WorkManagerHeapAnalyzer [androidJvm] object WorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis.","title":"LeakCanary"},{"location":"api/leakcanary-android-core/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-core/leakcanary/#types","text":"Name Summary AndroidDebugHeapDumper [androidJvm] object AndroidDebugHeapDumper : HeapDumper Dumps the Android heap using Debug.dumpHprofData . BackgroundThreadHeapAnalyzer [androidJvm] object BackgroundThreadHeapAnalyzer : EventListener Starts heap analysis on a background HandlerThread when receiving a HeapDump event. EventListener [androidJvm] fun interface EventListener HeapDumper [androidJvm] fun interface HeapDumper LazyForwardingEventListener [androidJvm] class LazyForwardingEventListener (lazyEventListener: () -> EventListener ) : EventListener Forwards events to the EventListener provided by lazyEventListener which is evaluated lazily, when the first comes in. LeakCanary [androidJvm] object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher. AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LogcatEventListener [androidJvm] object LogcatEventListener : EventListener NotificationEventListener [androidJvm] object NotificationEventListener : EventListener RemoteWorkManagerHeapAnalyzer [androidJvm] object RemoteWorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis in a dedicated :leakcanary process ToastEventListener [androidJvm] object ToastEventListener : EventListener TvEventListener [androidJvm] object TvEventListener : EventListener WorkManagerHeapAnalyzer [androidJvm] object WorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-android-debug-heap-dumper/","text":"// leakcanary-android-core / leakcanary / AndroidDebugHeapDumper AndroidDebugHeapDumper \u00b6 [androidJvm]\\ object AndroidDebugHeapDumper : HeapDumper Dumps the Android heap using Debug.dumpHprofData . Note: despite being part of the Debug class, Debug.dumpHprofData can be called from non debuggable non profileable builds. Functions \u00b6 Name Summary dumpHeap [androidJvm] open override fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-android-debug-heap-dumper/#androiddebugheapdumper","text":"[androidJvm]\\ object AndroidDebugHeapDumper : HeapDumper Dumps the Android heap using Debug.dumpHprofData . Note: despite being part of the Debug class, Debug.dumpHprofData can be called from non debuggable non profileable builds.","title":"AndroidDebugHeapDumper"},{"location":"api/leakcanary-android-core/leakcanary/-android-debug-heap-dumper/#functions","text":"Name Summary dumpHeap [androidJvm] open override fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-android-debug-heap-dumper/dump-heap/","text":"// leakcanary-android-core / leakcanary / AndroidDebugHeapDumper / dumpHeap dumpHeap \u00b6 [androidJvm]\\ open override fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed. Implementations can throw a runtime exception if heap dumping failed.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-android-debug-heap-dumper/dump-heap/#dumpheap","text":"[androidJvm]\\ open override fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed. Implementations can throw a runtime exception if heap dumping failed.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-background-thread-heap-analyzer/","text":"// leakcanary-android-core / leakcanary / BackgroundThreadHeapAnalyzer BackgroundThreadHeapAnalyzer \u00b6 [androidJvm]\\ object BackgroundThreadHeapAnalyzer : EventListener Starts heap analysis on a background HandlerThread when receiving a HeapDump event. Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-background-thread-heap-analyzer/#backgroundthreadheapanalyzer","text":"[androidJvm]\\ object BackgroundThreadHeapAnalyzer : EventListener Starts heap analysis on a background HandlerThread when receiving a HeapDump event.","title":"BackgroundThreadHeapAnalyzer"},{"location":"api/leakcanary-android-core/leakcanary/-background-thread-heap-analyzer/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-background-thread-heap-analyzer/on-event/","text":"// leakcanary-android-core / leakcanary / BackgroundThreadHeapAnalyzer / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-background-thread-heap-analyzer/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/","text":"// leakcanary-android-core / leakcanary / EventListener EventListener \u00b6 [androidJvm]\\ fun interface EventListener Types \u00b6 Name Summary Event [androidJvm] sealed class Event : Serializable Note: Event is Serializable for convenience but we currently make no guarantee that the Serialization is backward / forward compatible across LeakCanary versions, so plan accordingly. This is convenient for passing events around processes, and shouldn\u2019t be used to store them. Functions \u00b6 Name Summary onEvent [androidJvm] abstract fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done. Inheritors \u00b6 Name BackgroundThreadHeapAnalyzer LazyForwardingEventListener LogcatEventListener NotificationEventListener RemoteWorkManagerHeapAnalyzer ToastEventListener TvEventListener WorkManagerHeapAnalyzer","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/#eventlistener","text":"[androidJvm]\\ fun interface EventListener","title":"EventListener"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/#types","text":"Name Summary Event [androidJvm] sealed class Event : Serializable Note: Event is Serializable for convenience but we currently make no guarantee that the Serialization is backward / forward compatible across LeakCanary versions, so plan accordingly. This is convenient for passing events around processes, and shouldn\u2019t be used to store them.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/#functions","text":"Name Summary onEvent [androidJvm] abstract fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/#inheritors","text":"Name BackgroundThreadHeapAnalyzer LazyForwardingEventListener LogcatEventListener NotificationEventListener RemoteWorkManagerHeapAnalyzer ToastEventListener TvEventListener WorkManagerHeapAnalyzer","title":"Inheritors"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/on-event/","text":"// leakcanary-android-core / leakcanary / EventListener / onEvent onEvent \u00b6 [androidJvm]\\ abstract fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/on-event/#onevent","text":"[androidJvm]\\ abstract fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/","text":"// leakcanary-android-core / leakcanary / EventListener / Event Event \u00b6 [androidJvm]\\ sealed class Event : Serializable Note: Event is Serializable for convenience but we currently make no guarantee that the Serialization is backward / forward compatible across LeakCanary versions, so plan accordingly. This is convenient for passing events around processes, and shouldn\u2019t be used to store them. Types \u00b6 Name Summary DumpingHeap [androidJvm] class DumpingHeap (uniqueId: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. HeapAnalysisDone [androidJvm] sealed class HeapAnalysisDone < T : HeapAnalysis> : EventListener.Event Sent from the thread performing the analysis. HeapAnalysisProgress [androidJvm] class HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double ) : EventListener.Event progressPercent is a value between 0..1 HeapDump [androidJvm] class HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. HeapDumpFailed [androidJvm] class HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. Properties \u00b6 Name Summary uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent. Inheritors \u00b6 Name DumpingHeap HeapDump HeapDumpFailed HeapAnalysisProgress HeapAnalysisDone","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/#event","text":"[androidJvm]\\ sealed class Event : Serializable Note: Event is Serializable for convenience but we currently make no guarantee that the Serialization is backward / forward compatible across LeakCanary versions, so plan accordingly. This is convenient for passing events around processes, and shouldn\u2019t be used to store them.","title":"Event"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/#types","text":"Name Summary DumpingHeap [androidJvm] class DumpingHeap (uniqueId: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. HeapAnalysisDone [androidJvm] sealed class HeapAnalysisDone < T : HeapAnalysis> : EventListener.Event Sent from the thread performing the analysis. HeapAnalysisProgress [androidJvm] class HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double ) : EventListener.Event progressPercent is a value between 0..1 HeapDump [androidJvm] class HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. HeapDumpFailed [androidJvm] class HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/#properties","text":"Name Summary uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/#inheritors","text":"Name DumpingHeap HeapDump HeapDumpFailed HeapAnalysisProgress HeapAnalysisDone","title":"Inheritors"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/unique-id/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / uniqueId uniqueId \u00b6 [androidJvm]\\ val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Unique id"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/unique-id/#uniqueid","text":"[androidJvm]\\ val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"uniqueId"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-dumping-heap/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / DumpingHeap DumpingHeap \u00b6 [androidJvm]\\ class DumpingHeap (uniqueId: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. Constructors \u00b6 DumpingHeap [androidJvm] fun DumpingHeap (uniqueId: String ) Properties \u00b6 Name Summary uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-dumping-heap/#dumpingheap","text":"[androidJvm]\\ class DumpingHeap (uniqueId: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread.","title":"DumpingHeap"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-dumping-heap/#constructors","text":"DumpingHeap [androidJvm] fun DumpingHeap (uniqueId: String )","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-dumping-heap/#properties","text":"Name Summary uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-dumping-heap/-dumping-heap/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / DumpingHeap / DumpingHeap DumpingHeap \u00b6 [androidJvm]\\ fun DumpingHeap (uniqueId: String )","title":" dumping heap"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-dumping-heap/-dumping-heap/#dumpingheap","text":"[androidJvm]\\ fun DumpingHeap (uniqueId: String )","title":"DumpingHeap"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone HeapAnalysisDone \u00b6 [androidJvm]\\ sealed class HeapAnalysisDone < T : HeapAnalysis> : EventListener.Event Sent from the thread performing the analysis. Types \u00b6 Name Summary HeapAnalysisFailed [androidJvm] class HeapAnalysisFailed (uniqueId: String , heapAnalysis: HeapAnalysisFailure, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisFailure> HeapAnalysisSucceeded [androidJvm] class HeapAnalysisSucceeded (uniqueId: String , heapAnalysis: HeapAnalysisSuccess, unreadLeakSignatures: Set < String >, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisSuccess> Properties \u00b6 Name Summary heapAnalysis [androidJvm] val heapAnalysis : T showIntent [androidJvm] val showIntent : Intent uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent. Inheritors \u00b6 Name HeapAnalysisSucceeded HeapAnalysisFailed","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/#heapanalysisdone","text":"[androidJvm]\\ sealed class HeapAnalysisDone < T : HeapAnalysis> : EventListener.Event Sent from the thread performing the analysis.","title":"HeapAnalysisDone"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/#types","text":"Name Summary HeapAnalysisFailed [androidJvm] class HeapAnalysisFailed (uniqueId: String , heapAnalysis: HeapAnalysisFailure, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisFailure> HeapAnalysisSucceeded [androidJvm] class HeapAnalysisSucceeded (uniqueId: String , heapAnalysis: HeapAnalysisSuccess, unreadLeakSignatures: Set < String >, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisSuccess>","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/#properties","text":"Name Summary heapAnalysis [androidJvm] val heapAnalysis : T showIntent [androidJvm] val showIntent : Intent uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/#inheritors","text":"Name HeapAnalysisSucceeded HeapAnalysisFailed","title":"Inheritors"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/heap-analysis/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone / heapAnalysis heapAnalysis \u00b6 [androidJvm]\\ val heapAnalysis : T","title":"Heap analysis"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/heap-analysis/#heapanalysis","text":"[androidJvm]\\ val heapAnalysis : T","title":"heapAnalysis"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/show-intent/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone / showIntent showIntent \u00b6 [androidJvm]\\ val showIntent : Intent","title":"Show intent"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/show-intent/#showintent","text":"[androidJvm]\\ val showIntent : Intent","title":"showIntent"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-failed/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone / HeapAnalysisFailed HeapAnalysisFailed \u00b6 [androidJvm]\\ class HeapAnalysisFailed (uniqueId: String , heapAnalysis: HeapAnalysisFailure, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisFailure> Properties \u00b6 Name Summary heapAnalysis [androidJvm] val heapAnalysis : HeapAnalysisFailure showIntent [androidJvm] val showIntent : Intent uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-failed/#heapanalysisfailed","text":"[androidJvm]\\ class HeapAnalysisFailed (uniqueId: String , heapAnalysis: HeapAnalysisFailure, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisFailure>","title":"HeapAnalysisFailed"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-failed/#properties","text":"Name Summary heapAnalysis [androidJvm] val heapAnalysis : HeapAnalysisFailure showIntent [androidJvm] val showIntent : Intent uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-failed/-heap-analysis-failed/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone / HeapAnalysisFailed / HeapAnalysisFailed HeapAnalysisFailed \u00b6 [androidJvm]\\ fun HeapAnalysisFailed (uniqueId: String , heapAnalysis: HeapAnalysisFailure, showIntent: Intent )","title":" heap analysis failed"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-failed/-heap-analysis-failed/#heapanalysisfailed","text":"[androidJvm]\\ fun HeapAnalysisFailed (uniqueId: String , heapAnalysis: HeapAnalysisFailure, showIntent: Intent )","title":"HeapAnalysisFailed"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-succeeded/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone / HeapAnalysisSucceeded HeapAnalysisSucceeded \u00b6 [androidJvm]\\ class HeapAnalysisSucceeded (uniqueId: String , heapAnalysis: HeapAnalysisSuccess, unreadLeakSignatures: Set < String >, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisSuccess> Properties \u00b6 Name Summary heapAnalysis [androidJvm] val heapAnalysis : HeapAnalysisSuccess showIntent [androidJvm] val showIntent : Intent uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent. unreadLeakSignatures [androidJvm] val unreadLeakSignatures : Set < String >","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-succeeded/#heapanalysissucceeded","text":"[androidJvm]\\ class HeapAnalysisSucceeded (uniqueId: String , heapAnalysis: HeapAnalysisSuccess, unreadLeakSignatures: Set < String >, showIntent: Intent ) : EventListener.Event.HeapAnalysisDone <HeapAnalysisSuccess>","title":"HeapAnalysisSucceeded"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-succeeded/#properties","text":"Name Summary heapAnalysis [androidJvm] val heapAnalysis : HeapAnalysisSuccess showIntent [androidJvm] val showIntent : Intent uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent. unreadLeakSignatures [androidJvm] val unreadLeakSignatures : Set < String >","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-succeeded/-heap-analysis-succeeded/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone / HeapAnalysisSucceeded / HeapAnalysisSucceeded HeapAnalysisSucceeded \u00b6 [androidJvm]\\ fun HeapAnalysisSucceeded (uniqueId: String , heapAnalysis: HeapAnalysisSuccess, unreadLeakSignatures: Set < String >, showIntent: Intent )","title":" heap analysis succeeded"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-succeeded/-heap-analysis-succeeded/#heapanalysissucceeded","text":"[androidJvm]\\ fun HeapAnalysisSucceeded (uniqueId: String , heapAnalysis: HeapAnalysisSuccess, unreadLeakSignatures: Set < String >, showIntent: Intent )","title":"HeapAnalysisSucceeded"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-succeeded/unread-leak-signatures/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisDone / HeapAnalysisSucceeded / unreadLeakSignatures unreadLeakSignatures \u00b6 [androidJvm]\\ val unreadLeakSignatures : Set < String >","title":"Unread leak signatures"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-done/-heap-analysis-succeeded/unread-leak-signatures/#unreadleaksignatures","text":"[androidJvm]\\ val unreadLeakSignatures : Set < String >","title":"unreadLeakSignatures"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisProgress HeapAnalysisProgress \u00b6 [androidJvm]\\ class HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double ) : EventListener.Event progressPercent is a value between 0..1 Sent from the thread performing the analysis. Constructors \u00b6 HeapAnalysisProgress [androidJvm] fun HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double ) Properties \u00b6 Name Summary progressPercent [androidJvm] val progressPercent : Double step [androidJvm] val step : OnAnalysisProgressListener.Step uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/#heapanalysisprogress","text":"[androidJvm]\\ class HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double ) : EventListener.Event progressPercent is a value between 0..1 Sent from the thread performing the analysis.","title":"HeapAnalysisProgress"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/#constructors","text":"HeapAnalysisProgress [androidJvm] fun HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double )","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/#properties","text":"Name Summary progressPercent [androidJvm] val progressPercent : Double step [androidJvm] val step : OnAnalysisProgressListener.Step uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/-heap-analysis-progress/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisProgress / HeapAnalysisProgress HeapAnalysisProgress \u00b6 [androidJvm]\\ fun HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double )","title":" heap analysis progress"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/-heap-analysis-progress/#heapanalysisprogress","text":"[androidJvm]\\ fun HeapAnalysisProgress (uniqueId: String , step: OnAnalysisProgressListener.Step, progressPercent: Double )","title":"HeapAnalysisProgress"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/progress-percent/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisProgress / progressPercent progressPercent \u00b6 [androidJvm]\\ val progressPercent : Double","title":"Progress percent"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/progress-percent/#progresspercent","text":"[androidJvm]\\ val progressPercent : Double","title":"progressPercent"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/step/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapAnalysisProgress / step step \u00b6 [androidJvm]\\ val step : OnAnalysisProgressListener.Step","title":"Step"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-analysis-progress/step/#step","text":"[androidJvm]\\ val step : OnAnalysisProgressListener.Step","title":"step"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDump HeapDump \u00b6 [androidJvm]\\ class HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. Constructors \u00b6 HeapDump [androidJvm] fun HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String ) Properties \u00b6 Name Summary durationMillis [androidJvm] val durationMillis : Long file [androidJvm] val file : File reason [androidJvm] val reason : String uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/#heapdump","text":"[androidJvm]\\ class HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread.","title":"HeapDump"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/#constructors","text":"HeapDump [androidJvm] fun HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String )","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/#properties","text":"Name Summary durationMillis [androidJvm] val durationMillis : Long file [androidJvm] val file : File reason [androidJvm] val reason : String uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/-heap-dump/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDump / HeapDump HeapDump \u00b6 [androidJvm]\\ fun HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String )","title":" heap dump"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/-heap-dump/#heapdump","text":"[androidJvm]\\ fun HeapDump (uniqueId: String , file: File , durationMillis: Long , reason: String )","title":"HeapDump"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/duration-millis/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDump / durationMillis durationMillis \u00b6 [androidJvm]\\ val durationMillis : Long","title":"Duration millis"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/duration-millis/#durationmillis","text":"[androidJvm]\\ val durationMillis : Long","title":"durationMillis"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/file/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDump / file file \u00b6 [androidJvm]\\ val file : File","title":"File"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/file/#file","text":"[androidJvm]\\ val file : File","title":"file"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/reason/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDump / reason reason \u00b6 [androidJvm]\\ val reason : String","title":"Reason"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump/reason/#reason","text":"[androidJvm]\\ val reason : String","title":"reason"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDumpFailed HeapDumpFailed \u00b6 [androidJvm]\\ class HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread. Constructors \u00b6 HeapDumpFailed [androidJvm] fun HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean ) Properties \u00b6 Name Summary exception [androidJvm] val exception : Throwable uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent. willRetryLater [androidJvm] val willRetryLater : Boolean","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/#heapdumpfailed","text":"[androidJvm]\\ class HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean ) : EventListener.Event Sent from the \u201cLeakCanary-Heap-Dump\u201d HandlerThread.","title":"HeapDumpFailed"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/#constructors","text":"HeapDumpFailed [androidJvm] fun HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean )","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/#properties","text":"Name Summary exception [androidJvm] val exception : Throwable uniqueId [androidJvm] val uniqueId : String Unique identifier for a related chain of event. The identifier for the events that run before HeapDump gets reset right before HeapDump is sent. willRetryLater [androidJvm] val willRetryLater : Boolean","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/-heap-dump-failed/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDumpFailed / HeapDumpFailed HeapDumpFailed \u00b6 [androidJvm]\\ fun HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean )","title":" heap dump failed"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/-heap-dump-failed/#heapdumpfailed","text":"[androidJvm]\\ fun HeapDumpFailed (uniqueId: String , exception: Throwable , willRetryLater: Boolean )","title":"HeapDumpFailed"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/exception/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDumpFailed / exception exception \u00b6 [androidJvm]\\ val exception : Throwable","title":"Exception"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/exception/#exception","text":"[androidJvm]\\ val exception : Throwable","title":"exception"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/will-retry-later/","text":"// leakcanary-android-core / leakcanary / EventListener / Event / HeapDumpFailed / willRetryLater willRetryLater \u00b6 [androidJvm]\\ val willRetryLater : Boolean","title":"Will retry later"},{"location":"api/leakcanary-android-core/leakcanary/-event-listener/-event/-heap-dump-failed/will-retry-later/#willretrylater","text":"[androidJvm]\\ val willRetryLater : Boolean","title":"willRetryLater"},{"location":"api/leakcanary-android-core/leakcanary/-heap-dumper/","text":"// leakcanary-android-core / leakcanary / HeapDumper HeapDumper \u00b6 [androidJvm]\\ fun interface HeapDumper Functions \u00b6 Name Summary dumpHeap [androidJvm] abstract fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed. Inheritors \u00b6 Name AndroidDebugHeapDumper","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-heap-dumper/#heapdumper","text":"[androidJvm]\\ fun interface HeapDumper","title":"HeapDumper"},{"location":"api/leakcanary-android-core/leakcanary/-heap-dumper/#functions","text":"Name Summary dumpHeap [androidJvm] abstract fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-heap-dumper/#inheritors","text":"Name AndroidDebugHeapDumper","title":"Inheritors"},{"location":"api/leakcanary-android-core/leakcanary/-heap-dumper/dump-heap/","text":"// leakcanary-android-core / leakcanary / HeapDumper / dumpHeap dumpHeap \u00b6 [androidJvm]\\ abstract fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed. Implementations can throw a runtime exception if heap dumping failed.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-heap-dumper/dump-heap/#dumpheap","text":"[androidJvm]\\ abstract fun dumpHeap (heapDumpFile: File ) Dumps the heap. The implementation is expected to be blocking until the heap is dumped or heap dumping failed. Implementations can throw a runtime exception if heap dumping failed.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/","text":"// leakcanary-android-core / leakcanary / LazyForwardingEventListener LazyForwardingEventListener \u00b6 [androidJvm]\\ class LazyForwardingEventListener (lazyEventListener: () -> EventListener ) : EventListener Forwards events to the EventListener provided by lazyEventListener which is evaluated lazily, when the first comes in. Constructors \u00b6 LazyForwardingEventListener [androidJvm] fun LazyForwardingEventListener (lazyEventListener: () -> EventListener ) Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/#lazyforwardingeventlistener","text":"[androidJvm]\\ class LazyForwardingEventListener (lazyEventListener: () -> EventListener ) : EventListener Forwards events to the EventListener provided by lazyEventListener which is evaluated lazily, when the first comes in.","title":"LazyForwardingEventListener"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/#constructors","text":"LazyForwardingEventListener [androidJvm] fun LazyForwardingEventListener (lazyEventListener: () -> EventListener )","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/-lazy-forwarding-event-listener/","text":"// leakcanary-android-core / leakcanary / LazyForwardingEventListener / LazyForwardingEventListener LazyForwardingEventListener \u00b6 [androidJvm]\\ fun LazyForwardingEventListener (lazyEventListener: () -> EventListener )","title":" lazy forwarding event listener"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/-lazy-forwarding-event-listener/#lazyforwardingeventlistener","text":"[androidJvm]\\ fun LazyForwardingEventListener (lazyEventListener: () -> EventListener )","title":"LazyForwardingEventListener"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/on-event/","text":"// leakcanary-android-core / leakcanary / LazyForwardingEventListener / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-lazy-forwarding-event-listener/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/","text":"// leakcanary-android-core / leakcanary / LeakCanary LeakCanary \u00b6 [androidJvm]\\ object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher. AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LeakCanary can be configured by updating config . Types \u00b6 Name Summary Config [androidJvm] data class Config (dumpHeap: Boolean , dumpHeapWhenDebugging: Boolean , retainedVisibleThreshold: Int , referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, onHeapAnalyzedListener: OnHeapAnalyzedListener, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , maxStoredHeapDumps: Int , requestWriteExternalStoragePermission: Boolean , leakingObjectFinder: LeakingObjectFinder, heapDumper: HeapDumper , eventListeners: List < EventListener >, useExperimentalLeakFinders: Boolean ) LeakCanary configuration data class. Properties can be updated via copy. Functions \u00b6 Name Summary dumpHeap [androidJvm] fun dumpHeap () Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher. If there are no retained instances then the heap will not be dumped and a notification will be shown instead. newLeakDisplayActivityIntent [androidJvm] fun newLeakDisplayActivityIntent (): Intent Returns a new Intent that can be used to programmatically launch the leak display activity. showLeakDisplayActivityLauncherIcon [androidJvm] fun showLeakDisplayActivityLauncherIcon (showLauncherIcon: Boolean ) Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: Properties \u00b6 Name Summary config [androidJvm] @ JvmStatic @ Volatile var config : LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.:","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#leakcanary","text":"[androidJvm]\\ object LeakCanary The entry point API for LeakCanary. LeakCanary builds on top of AppWatcher. AppWatcher notifies LeakCanary of retained instances, which in turns dumps the heap, analyses it and publishes the results. LeakCanary can be configured by updating config .","title":"LeakCanary"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#types","text":"Name Summary Config [androidJvm] data class Config (dumpHeap: Boolean , dumpHeapWhenDebugging: Boolean , retainedVisibleThreshold: Int , referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, onHeapAnalyzedListener: OnHeapAnalyzedListener, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , maxStoredHeapDumps: Int , requestWriteExternalStoragePermission: Boolean , leakingObjectFinder: LeakingObjectFinder, heapDumper: HeapDumper , eventListeners: List < EventListener >, useExperimentalLeakFinders: Boolean ) LeakCanary configuration data class. Properties can be updated via copy.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#functions","text":"Name Summary dumpHeap [androidJvm] fun dumpHeap () Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher. If there are no retained instances then the heap will not be dumped and a notification will be shown instead. newLeakDisplayActivityIntent [androidJvm] fun newLeakDisplayActivityIntent (): Intent Returns a new Intent that can be used to programmatically launch the leak display activity. showLeakDisplayActivityLauncherIcon [androidJvm] fun showLeakDisplayActivityLauncherIcon (showLauncherIcon: Boolean ) Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource:","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/#properties","text":"Name Summary config [androidJvm] @ JvmStatic @ Volatile var config : LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.:","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/config/","text":"// leakcanary-android-core / leakcanary / LeakCanary / config config \u00b6 [androidJvm]\\ @ JvmStatic @ Volatile var config : LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) In Java, use LeakCanary.Config.Builder instead: LeakCanary.Config config = LeakCanary.getConfig().newBuilder()\\ .retainedVisibleThreshold(3)\\ .build();\\ LeakCanary.setConfig(config);","title":"Config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/config/#config","text":"[androidJvm]\\ @ JvmStatic @ Volatile var config : LeakCanary.Config The current LeakCanary configuration. Can be updated at any time, usually by replacing it with a mutated copy, e.g.: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) In Java, use LeakCanary.Config.Builder instead: LeakCanary.Config config = LeakCanary.getConfig().newBuilder()\\ .retainedVisibleThreshold(3)\\ .build();\\ LeakCanary.setConfig(config);","title":"config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap/","text":"// leakcanary-android-core / leakcanary / LeakCanary / dumpHeap dumpHeap \u00b6 [androidJvm]\\ fun dumpHeap () Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher. If there are no retained instances then the heap will not be dumped and a notification will be shown instead.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/dump-heap/#dumpheap","text":"[androidJvm]\\ fun dumpHeap () Immediately triggers a heap dump and analysis, if there is at least one retained instance tracked by AppWatcher.objectWatcher. If there are no retained instances then the heap will not be dumped and a notification will be shown instead.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent/","text":"// leakcanary-android-core / leakcanary / LeakCanary / newLeakDisplayActivityIntent newLeakDisplayActivityIntent \u00b6 [androidJvm]\\ fun newLeakDisplayActivityIntent (): Intent Returns a new Intent that can be used to programmatically launch the leak display activity.","title":"New leak display activity intent"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/new-leak-display-activity-intent/#newleakdisplayactivityintent","text":"[androidJvm]\\ fun newLeakDisplayActivityIntent (): Intent Returns a new Intent that can be used to programmatically launch the leak display activity.","title":"newLeakDisplayActivityIntent"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon/","text":"// leakcanary-android-core / leakcanary / LeakCanary / showLeakDisplayActivityLauncherIcon showLeakDisplayActivityLauncherIcon \u00b6 [androidJvm]\\ fun showLeakDisplayActivityLauncherIcon (showLauncherIcon: Boolean ) Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: <?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\\ <resources>\\ <bool name=\u201dleak_canary_add_launcher_icon\u201d>false</bool>\\ </resources>","title":"Show leak display activity launcher icon"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/show-leak-display-activity-launcher-icon/#showleakdisplayactivitylaunchericon","text":"[androidJvm]\\ fun showLeakDisplayActivityLauncherIcon (showLauncherIcon: Boolean ) Dynamically shows / hides the launcher icon for the leak display activity. Note: you can change the default value by overriding the leak_canary_add_launcher_icon boolean resource: <?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\\ <resources>\\ <bool name=\u201dleak_canary_add_launcher_icon\u201d>false</bool>\\ </resources>","title":"showLeakDisplayActivityLauncherIcon"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config Config \u00b6 [androidJvm]\\ data class Config (dumpHeap: Boolean , dumpHeapWhenDebugging: Boolean , retainedVisibleThreshold: Int , referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, onHeapAnalyzedListener: OnHeapAnalyzedListener, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , maxStoredHeapDumps: Int , requestWriteExternalStoragePermission: Boolean , leakingObjectFinder: LeakingObjectFinder, heapDumper: HeapDumper , eventListeners: List < EventListener >, useExperimentalLeakFinders: Boolean ) LeakCanary configuration data class. Properties can be updated via copy. See also \u00b6 androidJvm leakcanary.LeakCanary Constructors \u00b6 Config [androidJvm] fun Config (dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, heapDumper: HeapDumper = AndroidDebugHeapDumper, eventListeners: List < EventListener > = listOf( LogcatEventListener, ToastEventListener, LazyForwardingEventListener { if (InternalLeakCanary.formFactor == TV) TvEventListener else NotificationEventListener }, when { RemoteWorkManagerHeapAnalyzer.remoteLeakCanaryServiceInClasspath -> RemoteWorkManagerHeapAnalyzer WorkManagerHeapAnalyzer.workManagerInClasspath -> WorkManagerHeapAnalyzer else -> BackgroundThreadHeapAnalyzer } ), useExperimentalLeakFinders: Boolean = false) Types \u00b6 Name Summary Builder [androidJvm] class Builder Builder for LeakCanary.Config intended to be used only from Java code. Functions \u00b6 Name Summary newBuilder [androidJvm] fun newBuilder (): LeakCanary.Config.Builder Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config . Since Kotlin 999.9 Properties \u00b6 Name Summary computeRetainedHeapSize [androidJvm] val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). dumpHeap [androidJvm] val dumpHeap : Boolean = true Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). dumpHeapWhenDebugging [androidJvm] val dumpHeapWhenDebugging : Boolean = false If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). eventListeners [androidJvm] val eventListeners : List < EventListener > Listeners for LeakCanary events. See EventListener.Event for the list of events and which thread they\u2019re sent from. You most likely want to keep this list and add to it, or remove a few entries but not all entries. Each listener is independent and provides additional behavior which you can disable by not excluding it: heapDumper [androidJvm] val heapDumper : HeapDumper Dumps the Java heap. You may replace this with your own implementation if you wish to change the core heap dumping implementation. leakingObjectFinder [androidJvm] val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. maxStoredHeapDumps [androidJvm] val maxStoredHeapDumps : Int = 7 How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. metadataExtractor [androidJvm] val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. objectInspectors [androidJvm] val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. referenceMatchers [androidJvm] val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). requestWriteExternalStoragePermission [androidJvm] val requestWriteExternalStoragePermission : Boolean = false LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. retainedVisibleThreshold [androidJvm] val retainedVisibleThreshold : Int = 5 When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#config","text":"[androidJvm]\\ data class Config (dumpHeap: Boolean , dumpHeapWhenDebugging: Boolean , retainedVisibleThreshold: Int , referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, onHeapAnalyzedListener: OnHeapAnalyzedListener, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , maxStoredHeapDumps: Int , requestWriteExternalStoragePermission: Boolean , leakingObjectFinder: LeakingObjectFinder, heapDumper: HeapDumper , eventListeners: List < EventListener >, useExperimentalLeakFinders: Boolean ) LeakCanary configuration data class. Properties can be updated via copy.","title":"Config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#see-also","text":"androidJvm leakcanary.LeakCanary","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#constructors","text":"Config [androidJvm] fun Config (dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, heapDumper: HeapDumper = AndroidDebugHeapDumper, eventListeners: List < EventListener > = listOf( LogcatEventListener, ToastEventListener, LazyForwardingEventListener { if (InternalLeakCanary.formFactor == TV) TvEventListener else NotificationEventListener }, when { RemoteWorkManagerHeapAnalyzer.remoteLeakCanaryServiceInClasspath -> RemoteWorkManagerHeapAnalyzer WorkManagerHeapAnalyzer.workManagerInClasspath -> WorkManagerHeapAnalyzer else -> BackgroundThreadHeapAnalyzer } ), useExperimentalLeakFinders: Boolean = false)","title":"Constructors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#types","text":"Name Summary Builder [androidJvm] class Builder Builder for LeakCanary.Config intended to be used only from Java code.","title":"Types"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#functions","text":"Name Summary newBuilder [androidJvm] fun newBuilder (): LeakCanary.Config.Builder Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config . Since Kotlin 999.9","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/#properties","text":"Name Summary computeRetainedHeapSize [androidJvm] val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). dumpHeap [androidJvm] val dumpHeap : Boolean = true Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). dumpHeapWhenDebugging [androidJvm] val dumpHeapWhenDebugging : Boolean = false If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). eventListeners [androidJvm] val eventListeners : List < EventListener > Listeners for LeakCanary events. See EventListener.Event for the list of events and which thread they\u2019re sent from. You most likely want to keep this list and add to it, or remove a few entries but not all entries. Each listener is independent and provides additional behavior which you can disable by not excluding it: heapDumper [androidJvm] val heapDumper : HeapDumper Dumps the Java heap. You may replace this with your own implementation if you wish to change the core heap dumping implementation. leakingObjectFinder [androidJvm] val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. maxStoredHeapDumps [androidJvm] val maxStoredHeapDumps : Int = 7 How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. metadataExtractor [androidJvm] val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. objectInspectors [androidJvm] val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. referenceMatchers [androidJvm] val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). requestWriteExternalStoragePermission [androidJvm] val requestWriteExternalStoragePermission : Boolean = false LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. retainedVisibleThreshold [androidJvm] val retainedVisibleThreshold : Int = 5 When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed.","title":"Properties"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-config/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Config Config \u00b6 [androidJvm]\\ fun Config (dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, heapDumper: HeapDumper = AndroidDebugHeapDumper, eventListeners: List < EventListener > = listOf( LogcatEventListener, ToastEventListener, LazyForwardingEventListener { if (InternalLeakCanary.formFactor == TV) TvEventListener else NotificationEventListener }, when { RemoteWorkManagerHeapAnalyzer.remoteLeakCanaryServiceInClasspath -> RemoteWorkManagerHeapAnalyzer WorkManagerHeapAnalyzer.workManagerInClasspath -> WorkManagerHeapAnalyzer else -> BackgroundThreadHeapAnalyzer } ), useExperimentalLeakFinders: Boolean = false)","title":" config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-config/#config","text":"[androidJvm]\\ fun Config (dumpHeap: Boolean = true, dumpHeapWhenDebugging: Boolean = false, retainedVisibleThreshold: Int = 5, referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, onHeapAnalyzedListener: OnHeapAnalyzedListener = DefaultOnHeapAnalyzedListener.create(), metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, maxStoredHeapDumps: Int = 7, requestWriteExternalStoragePermission: Boolean = false, leakingObjectFinder: LeakingObjectFinder = KeyedWeakReferenceFinder, heapDumper: HeapDumper = AndroidDebugHeapDumper, eventListeners: List < EventListener > = listOf( LogcatEventListener, ToastEventListener, LazyForwardingEventListener { if (InternalLeakCanary.formFactor == TV) TvEventListener else NotificationEventListener }, when { RemoteWorkManagerHeapAnalyzer.remoteLeakCanaryServiceInClasspath -> RemoteWorkManagerHeapAnalyzer WorkManagerHeapAnalyzer.workManagerInClasspath -> WorkManagerHeapAnalyzer else -> BackgroundThreadHeapAnalyzer } ), useExperimentalLeakFinders: Boolean = false)","title":"Config"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / computeRetainedHeapSize computeRetainedHeapSize \u00b6 [androidJvm]\\ val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"Compute retained heap size"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/compute-retained-heap-size/#computeretainedheapsize","text":"[androidJvm]\\ val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"computeRetainedHeapSize"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / dumpHeapWhenDebugging dumpHeapWhenDebugging \u00b6 [androidJvm]\\ val dumpHeapWhenDebugging : Boolean = false If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). Defaults to false.","title":"Dump heap when debugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap-when-debugging/#dumpheapwhendebugging","text":"[androidJvm]\\ val dumpHeapWhenDebugging : Boolean = false If dumpHeapWhenDebugging is false then LeakCanary will not dump the heap when the debugger is attached. The debugger can create temporary memory leaks (for instance if a thread is blocked on a breakpoint). Defaults to false.","title":"dumpHeapWhenDebugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / dumpHeap dumpHeap \u00b6 [androidJvm]\\ val dumpHeap : Boolean = true Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). Defaults to true.","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/dump-heap/#dumpheap","text":"[androidJvm]\\ val dumpHeap : Boolean = true Whether LeakCanary should dump the heap when enough retained instances are found. This needs to be true for LeakCanary to work, but sometimes you may want to temporarily disable LeakCanary (e.g. for a product demo). Defaults to true.","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/event-listeners/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / eventListeners eventListeners \u00b6 [androidJvm]\\ val eventListeners : List < EventListener > Listeners for LeakCanary events. See EventListener.Event for the list of events and which thread they\u2019re sent from. You most likely want to keep this list and add to it, or remove a few entries but not all entries. Each listener is independent and provides additional behavior which you can disable by not excluding it: // No cute canary toast (very sad!)\\ LeakCanary.config = LeakCanary.config.run {\\ copy(\\ eventListeners = eventListeners.filter {\\ it !is ToastEventListener\\ }\\ )\\ }","title":"Event listeners"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/event-listeners/#eventlisteners","text":"[androidJvm]\\ val eventListeners : List < EventListener > Listeners for LeakCanary events. See EventListener.Event for the list of events and which thread they\u2019re sent from. You most likely want to keep this list and add to it, or remove a few entries but not all entries. Each listener is independent and provides additional behavior which you can disable by not excluding it: // No cute canary toast (very sad!)\\ LeakCanary.config = LeakCanary.config.run {\\ copy(\\ eventListeners = eventListeners.filter {\\ it !is ToastEventListener\\ }\\ )\\ }","title":"eventListeners"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/heap-dumper/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / heapDumper heapDumper \u00b6 [androidJvm]\\ val heapDumper : HeapDumper Dumps the Java heap. You may replace this with your own implementation if you wish to change the core heap dumping implementation.","title":"Heap dumper"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/heap-dumper/#heapdumper","text":"[androidJvm]\\ val heapDumper : HeapDumper Dumps the Java heap. You may replace this with your own implementation if you wish to change the core heap dumping implementation.","title":"heapDumper"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/leaking-object-finder/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / leakingObjectFinder leakingObjectFinder \u00b6 [androidJvm]\\ val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. Defaults to KeyedWeakReferenceFinder which finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.expectWeaklyReachable. You could instead replace it with a FilteringLeakingObjectFinder, which scans all objects in the heap dump and delegates the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter. This can lead to finding more leaks than the default and shorter leak traces. This also means that every analysis during a given process life will bring up the same leaking objects over and over again, unlike when using KeyedWeakReferenceFinder (because KeyedWeakReference instances are cleared after each heap dump). The list of filters can be built from AndroidObjectInspectors: LeakCanary.config = LeakCanary.config.copy(\\ leakingObjectFinder = FilteringLeakingObjectFinder(\\ AndroidObjectInspectors.appLeakingObjectFilters\\ )\\ )","title":"Leaking object finder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/leaking-object-finder/#leakingobjectfinder","text":"[androidJvm]\\ val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. Defaults to KeyedWeakReferenceFinder which finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.expectWeaklyReachable. You could instead replace it with a FilteringLeakingObjectFinder, which scans all objects in the heap dump and delegates the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter. This can lead to finding more leaks than the default and shorter leak traces. This also means that every analysis during a given process life will bring up the same leaking objects over and over again, unlike when using KeyedWeakReferenceFinder (because KeyedWeakReference instances are cleared after each heap dump). The list of filters can be built from AndroidObjectInspectors: LeakCanary.config = LeakCanary.config.copy(\\ leakingObjectFinder = FilteringLeakingObjectFinder(\\ AndroidObjectInspectors.appLeakingObjectFilters\\ )\\ )","title":"leakingObjectFinder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / maxStoredHeapDumps maxStoredHeapDumps \u00b6 [androidJvm]\\ val maxStoredHeapDumps : Int = 7 How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. Defaults to 7.","title":"Max stored heap dumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/max-stored-heap-dumps/#maxstoredheapdumps","text":"[androidJvm]\\ val maxStoredHeapDumps : Int = 7 How many heap dumps are kept on the Android device for this app package. When this threshold is reached LeakCanary deletes the older heap dumps. As several heap dumps may be enqueued you should avoid going down to 1 or 2. Defaults to 7.","title":"maxStoredHeapDumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/metadata-extractor/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / metadataExtractor metadataExtractor \u00b6 [androidJvm]\\ val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"Metadata extractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/metadata-extractor/#metadataextractor","text":"[androidJvm]\\ val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"metadataExtractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/new-builder/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / newBuilder newBuilder \u00b6 [androidJvm]\\ fun newBuilder (): LeakCanary.Config.Builder Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config . Since Kotlin \u00b6 999.9","title":"New builder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/new-builder/#newbuilder","text":"[androidJvm]\\ fun newBuilder (): LeakCanary.Config.Builder Construct a new Config via LeakCanary.Config.Builder . Note: this method is intended to be used from Java code only. For idiomatic Kotlin use copy() to modify LeakCanary.config .","title":"newBuilder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/new-builder/#since-kotlin","text":"999.9","title":"Since Kotlin"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / objectInspectors objectInspectors \u00b6 [androidJvm]\\ val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"Object inspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/object-inspectors/#objectinspectors","text":"[androidJvm]\\ val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"objectInspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / referenceMatchers referenceMatchers \u00b6 [androidJvm]\\ val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). When adding your own custom LibraryLeakReferenceMatcher instances, you\u2019ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph. Defaults to AndroidReferenceMatchers.appDefaults","title":"Reference matchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/reference-matchers/#referencematchers","text":"[androidJvm]\\ val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). When adding your own custom LibraryLeakReferenceMatcher instances, you\u2019ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph. Defaults to AndroidReferenceMatchers.appDefaults","title":"referenceMatchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / requestWriteExternalStoragePermission requestWriteExternalStoragePermission \u00b6 [androidJvm]\\ val requestWriteExternalStoragePermission : Boolean = false LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. Defaults to false because that permission notification can be annoying.","title":"Request write external storage permission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/request-write-external-storage-permission/#requestwriteexternalstoragepermission","text":"[androidJvm]\\ val requestWriteExternalStoragePermission : Boolean = false LeakCanary always attempts to store heap dumps on the external storage if the WRITE_EXTERNAL_STORAGE is already granted, and otherwise uses the app storage. If the WRITE_EXTERNAL_STORAGE permission is not granted and requestWriteExternalStoragePermission is true, then LeakCanary will display a notification to ask for that permission. Defaults to false because that permission notification can be annoying.","title":"requestWriteExternalStoragePermission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / retainedVisibleThreshold retainedVisibleThreshold \u00b6 [androidJvm]\\ val retainedVisibleThreshold : Int = 5 When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. When the app becomes invisible, LeakCanary dumps the heap after AppWatcher.retainedDelayMillis ms. The app is considered visible if it has at least one activity in started state. A higher threshold means LeakCanary will dump the heap less often, therefore it won\u2019t be bothering developers as much but it could miss some leaks. Defaults to 5.","title":"Retained visible threshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/retained-visible-threshold/#retainedvisiblethreshold","text":"[androidJvm]\\ val retainedVisibleThreshold : Int = 5 When the app is visible, LeakCanary will wait for at least retainedVisibleThreshold retained instances before dumping the heap. Dumping the heap freezes the UI and can be frustrating for developers who are trying to work. This is especially frustrating as the Android Framework has a number of leaks that cannot easily be fixed. When the app becomes invisible, LeakCanary dumps the heap after AppWatcher.retainedDelayMillis ms. The app is considered visible if it has at least one activity in started state. A higher threshold means LeakCanary will dump the heap less often, therefore it won\u2019t be bothering developers as much but it could miss some leaks. Defaults to 5.","title":"retainedVisibleThreshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder Builder \u00b6 [androidJvm]\\ class Builder Builder for LeakCanary.Config intended to be used only from Java code. Usage: LeakCanary.Config config = LeakCanary.getConfig().newBuilder()\\ .retainedVisibleThreshold(3)\\ .build();\\ LeakCanary.setConfig(config); For idiomatic Kotlin use copy() method instead: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3) Functions \u00b6 Name Summary build [androidJvm] fun build (): LeakCanary.Config computeRetainedHeapSize [androidJvm] fun computeRetainedHeapSize (computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder dumpHeap [androidJvm] fun dumpHeap (dumpHeap: Boolean ): LeakCanary.Config.Builder dumpHeapWhenDebugging [androidJvm] fun dumpHeapWhenDebugging (dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder eventListeners [androidJvm] fun eventListeners (eventListeners: List < EventListener >): LeakCanary.Config.Builder heapDumper [androidJvm] fun heapDumper (heapDumper: HeapDumper ): LeakCanary.Config.Builder leakingObjectFinder [androidJvm] fun leakingObjectFinder (leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder maxStoredHeapDumps [androidJvm] fun maxStoredHeapDumps (maxStoredHeapDumps: Int ): LeakCanary.Config.Builder metadataExtractor [androidJvm] fun metadataExtractor (metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder objectInspectors [androidJvm] fun objectInspectors (objectInspectors: List <ObjectInspector>): LeakCanary.Config.Builder referenceMatchers [androidJvm] fun referenceMatchers (referenceMatchers: List <ReferenceMatcher>): LeakCanary.Config.Builder requestWriteExternalStoragePermission [androidJvm] fun requestWriteExternalStoragePermission (requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder retainedVisibleThreshold [androidJvm] fun retainedVisibleThreshold (retainedVisibleThreshold: Int ): LeakCanary.Config.Builder","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/#builder","text":"[androidJvm]\\ class Builder Builder for LeakCanary.Config intended to be used only from Java code. Usage: LeakCanary.Config config = LeakCanary.getConfig().newBuilder()\\ .retainedVisibleThreshold(3)\\ .build();\\ LeakCanary.setConfig(config); For idiomatic Kotlin use copy() method instead: LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3)","title":"Builder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/#functions","text":"Name Summary build [androidJvm] fun build (): LeakCanary.Config computeRetainedHeapSize [androidJvm] fun computeRetainedHeapSize (computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder dumpHeap [androidJvm] fun dumpHeap (dumpHeap: Boolean ): LeakCanary.Config.Builder dumpHeapWhenDebugging [androidJvm] fun dumpHeapWhenDebugging (dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder eventListeners [androidJvm] fun eventListeners (eventListeners: List < EventListener >): LeakCanary.Config.Builder heapDumper [androidJvm] fun heapDumper (heapDumper: HeapDumper ): LeakCanary.Config.Builder leakingObjectFinder [androidJvm] fun leakingObjectFinder (leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder maxStoredHeapDumps [androidJvm] fun maxStoredHeapDumps (maxStoredHeapDumps: Int ): LeakCanary.Config.Builder metadataExtractor [androidJvm] fun metadataExtractor (metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder objectInspectors [androidJvm] fun objectInspectors (objectInspectors: List <ObjectInspector>): LeakCanary.Config.Builder referenceMatchers [androidJvm] fun referenceMatchers (referenceMatchers: List <ReferenceMatcher>): LeakCanary.Config.Builder requestWriteExternalStoragePermission [androidJvm] fun requestWriteExternalStoragePermission (requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder retainedVisibleThreshold [androidJvm] fun retainedVisibleThreshold (retainedVisibleThreshold: Int ): LeakCanary.Config.Builder","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/build/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / build build \u00b6 [androidJvm]\\ fun build (): LeakCanary.Config","title":"Build"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/build/#build","text":"[androidJvm]\\ fun build (): LeakCanary.Config","title":"build"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/compute-retained-heap-size/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / computeRetainedHeapSize computeRetainedHeapSize \u00b6 [androidJvm]\\ fun computeRetainedHeapSize (computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Compute retained heap size"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/compute-retained-heap-size/#computeretainedheapsize","text":"[androidJvm]\\ fun computeRetainedHeapSize (computeRetainedHeapSize: Boolean ): LeakCanary.Config.Builder","title":"computeRetainedHeapSize"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/compute-retained-heap-size/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap-when-debugging/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / dumpHeapWhenDebugging dumpHeapWhenDebugging \u00b6 [androidJvm]\\ fun dumpHeapWhenDebugging (dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Dump heap when debugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap-when-debugging/#dumpheapwhendebugging","text":"[androidJvm]\\ fun dumpHeapWhenDebugging (dumpHeapWhenDebugging: Boolean ): LeakCanary.Config.Builder","title":"dumpHeapWhenDebugging"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap-when-debugging/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / dumpHeap dumpHeap \u00b6 [androidJvm]\\ fun dumpHeap (dumpHeap: Boolean ): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Dump heap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap/#dumpheap","text":"[androidJvm]\\ fun dumpHeap (dumpHeap: Boolean ): LeakCanary.Config.Builder","title":"dumpHeap"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/dump-heap/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/event-listeners/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / eventListeners eventListeners \u00b6 [androidJvm]\\ fun eventListeners (eventListeners: List < EventListener >): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Event listeners"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/event-listeners/#eventlisteners","text":"[androidJvm]\\ fun eventListeners (eventListeners: List < EventListener >): LeakCanary.Config.Builder","title":"eventListeners"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/event-listeners/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/heap-dumper/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / heapDumper heapDumper \u00b6 [androidJvm]\\ fun heapDumper (heapDumper: HeapDumper ): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Heap dumper"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/heap-dumper/#heapdumper","text":"[androidJvm]\\ fun heapDumper (heapDumper: HeapDumper ): LeakCanary.Config.Builder","title":"heapDumper"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/heap-dumper/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/leaking-object-finder/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / leakingObjectFinder leakingObjectFinder \u00b6 [androidJvm]\\ fun leakingObjectFinder (leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Leaking object finder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/leaking-object-finder/#leakingobjectfinder","text":"[androidJvm]\\ fun leakingObjectFinder (leakingObjectFinder: LeakingObjectFinder): LeakCanary.Config.Builder","title":"leakingObjectFinder"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/leaking-object-finder/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/max-stored-heap-dumps/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / maxStoredHeapDumps maxStoredHeapDumps \u00b6 [androidJvm]\\ fun maxStoredHeapDumps (maxStoredHeapDumps: Int ): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Max stored heap dumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/max-stored-heap-dumps/#maxstoredheapdumps","text":"[androidJvm]\\ fun maxStoredHeapDumps (maxStoredHeapDumps: Int ): LeakCanary.Config.Builder","title":"maxStoredHeapDumps"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/max-stored-heap-dumps/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/metadata-extractor/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / metadataExtractor metadataExtractor \u00b6 [androidJvm]\\ fun metadataExtractor (metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Metadata extractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/metadata-extractor/#metadataextractor","text":"[androidJvm]\\ fun metadataExtractor (metadataExtractor: MetadataExtractor): LeakCanary.Config.Builder","title":"metadataExtractor"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/metadata-extractor/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/object-inspectors/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / objectInspectors objectInspectors \u00b6 [androidJvm]\\ fun objectInspectors (objectInspectors: List <ObjectInspector>): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Object inspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/object-inspectors/#objectinspectors","text":"[androidJvm]\\ fun objectInspectors (objectInspectors: List <ObjectInspector>): LeakCanary.Config.Builder","title":"objectInspectors"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/object-inspectors/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/reference-matchers/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / referenceMatchers referenceMatchers \u00b6 [androidJvm]\\ fun referenceMatchers (referenceMatchers: List <ReferenceMatcher>): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Reference matchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/reference-matchers/#referencematchers","text":"[androidJvm]\\ fun referenceMatchers (referenceMatchers: List <ReferenceMatcher>): LeakCanary.Config.Builder","title":"referenceMatchers"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/reference-matchers/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/request-write-external-storage-permission/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / requestWriteExternalStoragePermission requestWriteExternalStoragePermission \u00b6 [androidJvm]\\ fun requestWriteExternalStoragePermission (requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Request write external storage permission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/request-write-external-storage-permission/#requestwriteexternalstoragepermission","text":"[androidJvm]\\ fun requestWriteExternalStoragePermission (requestWriteExternalStoragePermission: Boolean ): LeakCanary.Config.Builder","title":"requestWriteExternalStoragePermission"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/request-write-external-storage-permission/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/retained-visible-threshold/","text":"// leakcanary-android-core / leakcanary / LeakCanary / Config / Builder / retainedVisibleThreshold retainedVisibleThreshold \u00b6 [androidJvm]\\ fun retainedVisibleThreshold (retainedVisibleThreshold: Int ): LeakCanary.Config.Builder See also \u00b6 androidJvm leakcanary.LeakCanary.Config","title":"Retained visible threshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/retained-visible-threshold/#retainedvisiblethreshold","text":"[androidJvm]\\ fun retainedVisibleThreshold (retainedVisibleThreshold: Int ): LeakCanary.Config.Builder","title":"retainedVisibleThreshold"},{"location":"api/leakcanary-android-core/leakcanary/-leak-canary/-config/-builder/retained-visible-threshold/#see-also","text":"androidJvm leakcanary.LeakCanary.Config","title":"See also"},{"location":"api/leakcanary-android-core/leakcanary/-logcat-event-listener/","text":"// leakcanary-android-core / leakcanary / LogcatEventListener LogcatEventListener \u00b6 [androidJvm]\\ object LogcatEventListener : EventListener Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-logcat-event-listener/#logcateventlistener","text":"[androidJvm]\\ object LogcatEventListener : EventListener","title":"LogcatEventListener"},{"location":"api/leakcanary-android-core/leakcanary/-logcat-event-listener/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-logcat-event-listener/on-event/","text":"// leakcanary-android-core / leakcanary / LogcatEventListener / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-logcat-event-listener/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-notification-event-listener/","text":"// leakcanary-android-core / leakcanary / NotificationEventListener NotificationEventListener \u00b6 [androidJvm]\\ object NotificationEventListener : EventListener Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-notification-event-listener/#notificationeventlistener","text":"[androidJvm]\\ object NotificationEventListener : EventListener","title":"NotificationEventListener"},{"location":"api/leakcanary-android-core/leakcanary/-notification-event-listener/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-notification-event-listener/on-event/","text":"// leakcanary-android-core / leakcanary / NotificationEventListener / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-notification-event-listener/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-remote-work-manager-heap-analyzer/","text":"// leakcanary-android-core / leakcanary / RemoteWorkManagerHeapAnalyzer RemoteWorkManagerHeapAnalyzer \u00b6 [androidJvm]\\ object RemoteWorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis in a dedicated :leakcanary process Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-remote-work-manager-heap-analyzer/#remoteworkmanagerheapanalyzer","text":"[androidJvm]\\ object RemoteWorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis in a dedicated :leakcanary process","title":"RemoteWorkManagerHeapAnalyzer"},{"location":"api/leakcanary-android-core/leakcanary/-remote-work-manager-heap-analyzer/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-remote-work-manager-heap-analyzer/on-event/","text":"// leakcanary-android-core / leakcanary / RemoteWorkManagerHeapAnalyzer / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-remote-work-manager-heap-analyzer/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-toast-event-listener/","text":"// leakcanary-android-core / leakcanary / ToastEventListener ToastEventListener \u00b6 [androidJvm]\\ object ToastEventListener : EventListener Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-toast-event-listener/#toasteventlistener","text":"[androidJvm]\\ object ToastEventListener : EventListener","title":"ToastEventListener"},{"location":"api/leakcanary-android-core/leakcanary/-toast-event-listener/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-toast-event-listener/on-event/","text":"// leakcanary-android-core / leakcanary / ToastEventListener / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-toast-event-listener/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-tv-event-listener/","text":"// leakcanary-android-core / leakcanary / TvEventListener TvEventListener \u00b6 [androidJvm]\\ object TvEventListener : EventListener Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-tv-event-listener/#tveventlistener","text":"[androidJvm]\\ object TvEventListener : EventListener","title":"TvEventListener"},{"location":"api/leakcanary-android-core/leakcanary/-tv-event-listener/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-tv-event-listener/on-event/","text":"// leakcanary-android-core / leakcanary / TvEventListener / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-tv-event-listener/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-core/leakcanary/-work-manager-heap-analyzer/","text":"// leakcanary-android-core / leakcanary / WorkManagerHeapAnalyzer WorkManagerHeapAnalyzer \u00b6 [androidJvm]\\ object WorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis. Functions \u00b6 Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Index"},{"location":"api/leakcanary-android-core/leakcanary/-work-manager-heap-analyzer/#workmanagerheapanalyzer","text":"[androidJvm]\\ object WorkManagerHeapAnalyzer : EventListener When receiving a HeapDump event, starts a WorkManager worker that performs heap analysis.","title":"WorkManagerHeapAnalyzer"},{"location":"api/leakcanary-android-core/leakcanary/-work-manager-heap-analyzer/#functions","text":"Name Summary onEvent [androidJvm] open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"Functions"},{"location":"api/leakcanary-android-core/leakcanary/-work-manager-heap-analyzer/on-event/","text":"// leakcanary-android-core / leakcanary / WorkManagerHeapAnalyzer / onEvent onEvent \u00b6 [androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"On event"},{"location":"api/leakcanary-android-core/leakcanary/-work-manager-heap-analyzer/on-event/#onevent","text":"[androidJvm]\\ open override fun onEvent (event: EventListener.Event ) onEvent is always called from the thread the events are emitted from, which is documented for each event. This enables you to potentially block a chain of events, waiting for some pre work to be done.","title":"onEvent"},{"location":"api/leakcanary-android-instrumentation/leakcanary/","text":"// leakcanary-android-instrumentation / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary AndroidDetectLeaksAssert [androidJvm] class AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter ) : DetectLeaksAssert Default DetectLeaksAssert implementation. Uses public helpers so you should be able to create our own implementation if needed. DetectLeaksAfterTestSuccess [androidJvm] class DetectLeaksAfterTestSuccess (tag: String ) : TestRule TestRule that invokes LeakAssertions.assertNoLeaks after the test successfully evaluates. Pay attention to where you set up this rule in the rule chain as you might detect different leaks (e.g. around vs wrapped by the activity rule). It\u2019s also possible to use this rule several times in a rule chain. DetectLeaksAssert [androidJvm] fun interface DetectLeaksAssert The interface for the implementation that LeakAssertions.assertNoLeaks delegates to. You can call DetectLeaksAssert.update to provide your own implementation. HeapAnalysisReporter [androidJvm] fun interface HeapAnalysisReporter Reports the results of a heap analysis created by AndroidDetectLeaksAssert . LeakAssertions [androidJvm] object LeakAssertions NoLeakAssertionFailedError [androidJvm] class NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess) : AssertionError Thrown when using the NoLeakAssertionFailedError.throwOnApplicationLeaks HeapAnalysisReporter SkipLeakDetection [androidJvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class SkipLeakDetection (message: String , assertionTags: String ) Annotation for skipping leak detection in a UI test that calls LeakAssertions.assertNoLeaks . This annotation is useful to skip a leak detection in a test until the leaks are fixed. TestDescriptionHolder [androidJvm] object TestDescriptionHolder : TestRule A TestRule that holds onto the test Description in a thread local while evaluating, making it possible to retrieve that test Description from the test thread via testDescription .","title":"Extension: Instrumentation tests"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-instrumentation/leakcanary/#types","text":"Name Summary AndroidDetectLeaksAssert [androidJvm] class AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter ) : DetectLeaksAssert Default DetectLeaksAssert implementation. Uses public helpers so you should be able to create our own implementation if needed. DetectLeaksAfterTestSuccess [androidJvm] class DetectLeaksAfterTestSuccess (tag: String ) : TestRule TestRule that invokes LeakAssertions.assertNoLeaks after the test successfully evaluates. Pay attention to where you set up this rule in the rule chain as you might detect different leaks (e.g. around vs wrapped by the activity rule). It\u2019s also possible to use this rule several times in a rule chain. DetectLeaksAssert [androidJvm] fun interface DetectLeaksAssert The interface for the implementation that LeakAssertions.assertNoLeaks delegates to. You can call DetectLeaksAssert.update to provide your own implementation. HeapAnalysisReporter [androidJvm] fun interface HeapAnalysisReporter Reports the results of a heap analysis created by AndroidDetectLeaksAssert . LeakAssertions [androidJvm] object LeakAssertions NoLeakAssertionFailedError [androidJvm] class NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess) : AssertionError Thrown when using the NoLeakAssertionFailedError.throwOnApplicationLeaks HeapAnalysisReporter SkipLeakDetection [androidJvm] @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class SkipLeakDetection (message: String , assertionTags: String ) Annotation for skipping leak detection in a UI test that calls LeakAssertions.assertNoLeaks . This annotation is useful to skip a leak detection in a test until the leaks are fixed. TestDescriptionHolder [androidJvm] object TestDescriptionHolder : TestRule A TestRule that holds onto the test Description in a thread local while evaluating, making it possible to retrieve that test Description from the test thread via testDescription .","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/","text":"// leakcanary-android-instrumentation / leakcanary / AndroidDetectLeaksAssert AndroidDetectLeaksAssert \u00b6 [androidJvm]\\ class AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter ) : DetectLeaksAssert Default DetectLeaksAssert implementation. Uses public helpers so you should be able to create our own implementation if needed. Leak detection can be skipped by annotating tests with SkipLeakDetection which requires the TestDescriptionHolder test rule be applied and evaluating when assertNoLeaks is called. For improved leak detection, you should consider updating LeakCanary.Config.leakingObjectFinder to FilteringLeakingObjectFinder(AndroidObjectInspectors.appLeakingObjectFilters) when running in instrumentation tests. This changes leak detection from being incremental (based on AppWatcher to also scanning for all objects of known types in the heap). Constructors \u00b6 AndroidDetectLeaksAssert [androidJvm] fun AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter = NoLeakAssertionFailedError.throwOnApplicationLeaks()) Functions \u00b6 Name Summary assertNoLeaks [androidJvm] open override fun assertNoLeaks (tag: String )","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/#androiddetectleaksassert","text":"[androidJvm]\\ class AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter ) : DetectLeaksAssert Default DetectLeaksAssert implementation. Uses public helpers so you should be able to create our own implementation if needed. Leak detection can be skipped by annotating tests with SkipLeakDetection which requires the TestDescriptionHolder test rule be applied and evaluating when assertNoLeaks is called. For improved leak detection, you should consider updating LeakCanary.Config.leakingObjectFinder to FilteringLeakingObjectFinder(AndroidObjectInspectors.appLeakingObjectFilters) when running in instrumentation tests. This changes leak detection from being incremental (based on AppWatcher to also scanning for all objects of known types in the heap).","title":"AndroidDetectLeaksAssert"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/#constructors","text":"AndroidDetectLeaksAssert [androidJvm] fun AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter = NoLeakAssertionFailedError.throwOnApplicationLeaks())","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/#functions","text":"Name Summary assertNoLeaks [androidJvm] open override fun assertNoLeaks (tag: String )","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/-android-detect-leaks-assert/","text":"// leakcanary-android-instrumentation / leakcanary / AndroidDetectLeaksAssert / AndroidDetectLeaksAssert AndroidDetectLeaksAssert \u00b6 [androidJvm]\\ fun AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter = NoLeakAssertionFailedError.throwOnApplicationLeaks())","title":" android detect leaks assert"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/-android-detect-leaks-assert/#androiddetectleaksassert","text":"[androidJvm]\\ fun AndroidDetectLeaksAssert (heapAnalysisReporter: HeapAnalysisReporter = NoLeakAssertionFailedError.throwOnApplicationLeaks())","title":"AndroidDetectLeaksAssert"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/assert-no-leaks/","text":"// leakcanary-android-instrumentation / leakcanary / AndroidDetectLeaksAssert / assertNoLeaks assertNoLeaks \u00b6 [androidJvm]\\ open override fun assertNoLeaks (tag: String )","title":"Assert no leaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-android-detect-leaks-assert/assert-no-leaks/#assertnoleaks","text":"[androidJvm]\\ open override fun assertNoLeaks (tag: String )","title":"assertNoLeaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/","text":"// leakcanary-android-instrumentation / leakcanary / DetectLeaksAfterTestSuccess DetectLeaksAfterTestSuccess \u00b6 [androidJvm]\\ class DetectLeaksAfterTestSuccess (tag: String ) : TestRule TestRule that invokes LeakAssertions.assertNoLeaks after the test successfully evaluates. Pay attention to where you set up this rule in the rule chain as you might detect different leaks (e.g. around vs wrapped by the activity rule). It\u2019s also possible to use this rule several times in a rule chain. Constructors \u00b6 DetectLeaksAfterTestSuccess [androidJvm] fun DetectLeaksAfterTestSuccess (tag: String = DetectLeaksAfterTestSuccess::class.java.simpleName) Functions \u00b6 Name Summary apply [androidJvm] open override fun apply (base: Statement, description: Description): Statement","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/#detectleaksaftertestsuccess","text":"[androidJvm]\\ class DetectLeaksAfterTestSuccess (tag: String ) : TestRule TestRule that invokes LeakAssertions.assertNoLeaks after the test successfully evaluates. Pay attention to where you set up this rule in the rule chain as you might detect different leaks (e.g. around vs wrapped by the activity rule). It\u2019s also possible to use this rule several times in a rule chain.","title":"DetectLeaksAfterTestSuccess"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/#constructors","text":"DetectLeaksAfterTestSuccess [androidJvm] fun DetectLeaksAfterTestSuccess (tag: String = DetectLeaksAfterTestSuccess::class.java.simpleName)","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/#functions","text":"Name Summary apply [androidJvm] open override fun apply (base: Statement, description: Description): Statement","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/-detect-leaks-after-test-success/","text":"// leakcanary-android-instrumentation / leakcanary / DetectLeaksAfterTestSuccess / DetectLeaksAfterTestSuccess DetectLeaksAfterTestSuccess \u00b6 [androidJvm]\\ fun DetectLeaksAfterTestSuccess (tag: String = DetectLeaksAfterTestSuccess::class.java.simpleName)","title":" detect leaks after test success"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/-detect-leaks-after-test-success/#detectleaksaftertestsuccess","text":"[androidJvm]\\ fun DetectLeaksAfterTestSuccess (tag: String = DetectLeaksAfterTestSuccess::class.java.simpleName)","title":"DetectLeaksAfterTestSuccess"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/apply/","text":"// leakcanary-android-instrumentation / leakcanary / DetectLeaksAfterTestSuccess / apply apply \u00b6 [androidJvm]\\ open override fun apply (base: Statement, description: Description): Statement","title":"Apply"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-after-test-success/apply/#apply","text":"[androidJvm]\\ open override fun apply (base: Statement, description: Description): Statement","title":"apply"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/","text":"// leakcanary-android-instrumentation / leakcanary / DetectLeaksAssert DetectLeaksAssert \u00b6 [androidJvm]\\ fun interface DetectLeaksAssert The interface for the implementation that LeakAssertions.assertNoLeaks delegates to. You can call DetectLeaksAssert.update to provide your own implementation. The default implementation is AndroidDetectLeaksAssert . Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary assertNoLeaks [androidJvm] abstract fun assertNoLeaks (tag: String ) Inheritors \u00b6 Name AndroidDetectLeaksAssert","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/#detectleaksassert","text":"[androidJvm]\\ fun interface DetectLeaksAssert The interface for the implementation that LeakAssertions.assertNoLeaks delegates to. You can call DetectLeaksAssert.update to provide your own implementation. The default implementation is AndroidDetectLeaksAssert .","title":"DetectLeaksAssert"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/#functions","text":"Name Summary assertNoLeaks [androidJvm] abstract fun assertNoLeaks (tag: String )","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/#inheritors","text":"Name AndroidDetectLeaksAssert","title":"Inheritors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/assert-no-leaks/","text":"// leakcanary-android-instrumentation / leakcanary / DetectLeaksAssert / assertNoLeaks assertNoLeaks \u00b6 [androidJvm]\\ abstract fun assertNoLeaks (tag: String )","title":"Assert no leaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/assert-no-leaks/#assertnoleaks","text":"[androidJvm]\\ abstract fun assertNoLeaks (tag: String )","title":"assertNoLeaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/-companion/","text":"// leakcanary-android-instrumentation / leakcanary / DetectLeaksAssert / Companion Companion \u00b6 [androidJvm]\\ object Companion Functions \u00b6 Name Summary update [androidJvm] fun update (delegate: DetectLeaksAssert )","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/-companion/#functions","text":"Name Summary update [androidJvm] fun update (delegate: DetectLeaksAssert )","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/-companion/update/","text":"// leakcanary-android-instrumentation / leakcanary / DetectLeaksAssert / Companion / update update \u00b6 [androidJvm]\\ fun update (delegate: DetectLeaksAssert )","title":"Update"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-detect-leaks-assert/-companion/update/#update","text":"[androidJvm]\\ fun update (delegate: DetectLeaksAssert )","title":"update"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-heap-analysis-reporter/","text":"// leakcanary-android-instrumentation / leakcanary / HeapAnalysisReporter HeapAnalysisReporter \u00b6 [androidJvm]\\ fun interface HeapAnalysisReporter Reports the results of a heap analysis created by AndroidDetectLeaksAssert . Functions \u00b6 Name Summary reportHeapAnalysis [androidJvm] abstract fun reportHeapAnalysis (heapAnalysis: HeapAnalysis)","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-heap-analysis-reporter/#heapanalysisreporter","text":"[androidJvm]\\ fun interface HeapAnalysisReporter Reports the results of a heap analysis created by AndroidDetectLeaksAssert .","title":"HeapAnalysisReporter"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-heap-analysis-reporter/#functions","text":"Name Summary reportHeapAnalysis [androidJvm] abstract fun reportHeapAnalysis (heapAnalysis: HeapAnalysis)","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-heap-analysis-reporter/report-heap-analysis/","text":"// leakcanary-android-instrumentation / leakcanary / HeapAnalysisReporter / reportHeapAnalysis reportHeapAnalysis \u00b6 [androidJvm]\\ abstract fun reportHeapAnalysis (heapAnalysis: HeapAnalysis)","title":"Report heap analysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-heap-analysis-reporter/report-heap-analysis/#reportheapanalysis","text":"[androidJvm]\\ abstract fun reportHeapAnalysis (heapAnalysis: HeapAnalysis)","title":"reportHeapAnalysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/","text":"// leakcanary-android-instrumentation / leakcanary / LeakAssertions LeakAssertions \u00b6 [androidJvm]\\ object LeakAssertions Functions \u00b6 Name Summary assertNoLeaks [androidJvm] fun assertNoLeaks (tag: String = NO_TAG) Asserts that there are no leak in the heap at this point in time. Properties \u00b6 Name Summary NO_TAG [androidJvm] const val NO_TAG : String","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/#leakassertions","text":"[androidJvm]\\ object LeakAssertions","title":"LeakAssertions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/#functions","text":"Name Summary assertNoLeaks [androidJvm] fun assertNoLeaks (tag: String = NO_TAG) Asserts that there are no leak in the heap at this point in time.","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/#properties","text":"Name Summary NO_TAG [androidJvm] const val NO_TAG : String","title":"Properties"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/-n-o_-t-a-g/","text":"// leakcanary-android-instrumentation / leakcanary / LeakAssertions / NO_TAG NO_TAG \u00b6 [androidJvm]\\ const val NO_TAG : String","title":" n o  t a g"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/-n-o_-t-a-g/#no_tag","text":"[androidJvm]\\ const val NO_TAG : String","title":"NO_TAG"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/assert-no-leaks/","text":"// leakcanary-android-instrumentation / leakcanary / LeakAssertions / assertNoLeaks assertNoLeaks \u00b6 [androidJvm]\\ fun assertNoLeaks (tag: String = NO_TAG) Asserts that there are no leak in the heap at this point in time. This method should be called on the instrumentation thread. This method is may block the current thread for a significant amount of time, as it might need to dump the heap and analyze it. If leaks are found, this method is expected to throw an exception, which will fail the test. The specific details depend on what you configured in DetectLeaksAssert.update . tag identifies the calling code, which can then be used for reporting purposes or to skip leak detection for specific tags in a subset of tests (see SkipLeakDetection ).","title":"Assert no leaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-leak-assertions/assert-no-leaks/#assertnoleaks","text":"[androidJvm]\\ fun assertNoLeaks (tag: String = NO_TAG) Asserts that there are no leak in the heap at this point in time. This method should be called on the instrumentation thread. This method is may block the current thread for a significant amount of time, as it might need to dump the heap and analyze it. If leaks are found, this method is expected to throw an exception, which will fail the test. The specific details depend on what you configured in DetectLeaksAssert.update . tag identifies the calling code, which can then be used for reporting purposes or to skip leak detection for specific tags in a subset of tests (see SkipLeakDetection ).","title":"assertNoLeaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/","text":"// leakcanary-android-instrumentation / leakcanary / NoLeakAssertionFailedError NoLeakAssertionFailedError \u00b6 [androidJvm]\\ class NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess) : AssertionError Thrown when using the NoLeakAssertionFailedError.throwOnApplicationLeaks HeapAnalysisReporter Constructors \u00b6 NoLeakAssertionFailedError [androidJvm] fun NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess) Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary addSuppressed [androidJvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [androidJvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [androidJvm] open fun getLocalizedMessage (): String getStackTrace [androidJvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [androidJvm] fun getSuppressed (): Array < Throwable > initCause [androidJvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [androidJvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [androidJvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [androidJvm] open val cause : Throwable ? heapAnalysis [androidJvm] val heapAnalysis : HeapAnalysisSuccess message [androidJvm] open val message : String ?","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/#noleakassertionfailederror","text":"[androidJvm]\\ class NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess) : AssertionError Thrown when using the NoLeakAssertionFailedError.throwOnApplicationLeaks HeapAnalysisReporter","title":"NoLeakAssertionFailedError"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/#constructors","text":"NoLeakAssertionFailedError [androidJvm] fun NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess)","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/#functions","text":"Name Summary addSuppressed [androidJvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [androidJvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [androidJvm] open fun getLocalizedMessage (): String getStackTrace [androidJvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [androidJvm] fun getSuppressed (): Array < Throwable > initCause [androidJvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [androidJvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [androidJvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/#properties","text":"Name Summary cause [androidJvm] open val cause : Throwable ? heapAnalysis [androidJvm] val heapAnalysis : HeapAnalysisSuccess message [androidJvm] open val message : String ?","title":"Properties"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/-no-leak-assertion-failed-error/","text":"// leakcanary-android-instrumentation / leakcanary / NoLeakAssertionFailedError / NoLeakAssertionFailedError NoLeakAssertionFailedError \u00b6 [androidJvm]\\ fun NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess)","title":" no leak assertion failed error"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/-no-leak-assertion-failed-error/#noleakassertionfailederror","text":"[androidJvm]\\ fun NoLeakAssertionFailedError (heapAnalysis: HeapAnalysisSuccess)","title":"NoLeakAssertionFailedError"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/heap-analysis/","text":"// leakcanary-android-instrumentation / leakcanary / NoLeakAssertionFailedError / heapAnalysis heapAnalysis \u00b6 [androidJvm]\\ val heapAnalysis : HeapAnalysisSuccess","title":"Heap analysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/heap-analysis/#heapanalysis","text":"[androidJvm]\\ val heapAnalysis : HeapAnalysisSuccess","title":"heapAnalysis"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/-companion/","text":"// leakcanary-android-instrumentation / leakcanary / NoLeakAssertionFailedError / Companion Companion \u00b6 [androidJvm]\\ object Companion Functions \u00b6 Name Summary throwOnApplicationLeaks [androidJvm] fun throwOnApplicationLeaks (): HeapAnalysisReporter A HeapAnalysisReporter that throws a NoLeakAssertionFailedError when the heap analysis has application leaks.","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/-companion/#functions","text":"Name Summary throwOnApplicationLeaks [androidJvm] fun throwOnApplicationLeaks (): HeapAnalysisReporter A HeapAnalysisReporter that throws a NoLeakAssertionFailedError when the heap analysis has application leaks.","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/-companion/throw-on-application-leaks/","text":"// leakcanary-android-instrumentation / leakcanary / NoLeakAssertionFailedError / Companion / throwOnApplicationLeaks throwOnApplicationLeaks \u00b6 [androidJvm]\\ fun throwOnApplicationLeaks (): HeapAnalysisReporter A HeapAnalysisReporter that throws a NoLeakAssertionFailedError when the heap analysis has application leaks.","title":"Throw on application leaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-no-leak-assertion-failed-error/-companion/throw-on-application-leaks/#throwonapplicationleaks","text":"[androidJvm]\\ fun throwOnApplicationLeaks (): HeapAnalysisReporter A HeapAnalysisReporter that throws a NoLeakAssertionFailedError when the heap analysis has application leaks.","title":"throwOnApplicationLeaks"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/","text":"// leakcanary-android-instrumentation / leakcanary / SkipLeakDetection SkipLeakDetection \u00b6 [androidJvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class SkipLeakDetection (message: String , assertionTags: String ) Annotation for skipping leak detection in a UI test that calls LeakAssertions.assertNoLeaks . This annotation is useful to skip a leak detection in a test until the leaks are fixed. The check is performed by shouldSkipTest which is called by AndroidDetectLeaksAssert , which requires that the TestDescriptionHolder rule be applied and evaluating when LeakAssertions.assertNoLeaks is called. message should contain an explanation of why leak detection is skipped, e.g. a reference to a filed issue. The optional assertionTags allows finer grained filtering based on the tag value passed to LeakAssertions.assertNoLeaks . If assertionTags is empty, then the test will skip leak detection entirely. If assertionTags is not empty, then the test will skip leak detection for any call to LeakAssertions.assertNoLeaks with a tag value contained in assertionTags . Constructors \u00b6 SkipLeakDetection [androidJvm] fun SkipLeakDetection (message: String , vararg assertionTags: String ) Types \u00b6 Name Summary Companion [androidJvm] object Companion Properties \u00b6 Name Summary assertionTags [androidJvm] val assertionTags : Array <out String > message [androidJvm] val message : String","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/#skipleakdetection","text":"[androidJvm]\\ @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class SkipLeakDetection (message: String , assertionTags: String ) Annotation for skipping leak detection in a UI test that calls LeakAssertions.assertNoLeaks . This annotation is useful to skip a leak detection in a test until the leaks are fixed. The check is performed by shouldSkipTest which is called by AndroidDetectLeaksAssert , which requires that the TestDescriptionHolder rule be applied and evaluating when LeakAssertions.assertNoLeaks is called. message should contain an explanation of why leak detection is skipped, e.g. a reference to a filed issue. The optional assertionTags allows finer grained filtering based on the tag value passed to LeakAssertions.assertNoLeaks . If assertionTags is empty, then the test will skip leak detection entirely. If assertionTags is not empty, then the test will skip leak detection for any call to LeakAssertions.assertNoLeaks with a tag value contained in assertionTags .","title":"SkipLeakDetection"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/#constructors","text":"SkipLeakDetection [androidJvm] fun SkipLeakDetection (message: String , vararg assertionTags: String )","title":"Constructors"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/#properties","text":"Name Summary assertionTags [androidJvm] val assertionTags : Array <out String > message [androidJvm] val message : String","title":"Properties"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/-skip-leak-detection/","text":"// leakcanary-android-instrumentation / leakcanary / SkipLeakDetection / SkipLeakDetection SkipLeakDetection \u00b6 [androidJvm]\\ fun SkipLeakDetection (message: String , vararg assertionTags: String )","title":" skip leak detection"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/-skip-leak-detection/#skipleakdetection","text":"[androidJvm]\\ fun SkipLeakDetection (message: String , vararg assertionTags: String )","title":"SkipLeakDetection"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/assertion-tags/","text":"// leakcanary-android-instrumentation / leakcanary / SkipLeakDetection / assertionTags assertionTags \u00b6 [androidJvm]\\ val assertionTags : Array <out String >","title":"Assertion tags"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/assertion-tags/#assertiontags","text":"[androidJvm]\\ val assertionTags : Array <out String >","title":"assertionTags"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/message/","text":"// leakcanary-android-instrumentation / leakcanary / SkipLeakDetection / message message \u00b6 [androidJvm]\\ val message : String","title":"Message"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/message/#message","text":"[androidJvm]\\ val message : String","title":"message"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/-companion/","text":"// leakcanary-android-instrumentation / leakcanary / SkipLeakDetection / Companion Companion \u00b6 [androidJvm]\\ object Companion Functions \u00b6 Name Summary shouldSkipTest [androidJvm] fun shouldSkipTest (testDescription: Description, assertionTag: String ): Boolean fun shouldSkipTest (testName: String , skipAnnotation: SkipLeakDetection ?, assertionTag: String ): Boolean","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/-companion/#functions","text":"Name Summary shouldSkipTest [androidJvm] fun shouldSkipTest (testDescription: Description, assertionTag: String ): Boolean fun shouldSkipTest (testName: String , skipAnnotation: SkipLeakDetection ?, assertionTag: String ): Boolean","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/-companion/should-skip-test/","text":"// leakcanary-android-instrumentation / leakcanary / SkipLeakDetection / Companion / shouldSkipTest shouldSkipTest \u00b6 [androidJvm]\\ fun shouldSkipTest (testDescription: Description, assertionTag: String ): Boolean fun shouldSkipTest (testName: String , skipAnnotation: SkipLeakDetection ?, assertionTag: String ): Boolean","title":"Should skip test"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-skip-leak-detection/-companion/should-skip-test/#shouldskiptest","text":"[androidJvm]\\ fun shouldSkipTest (testDescription: Description, assertionTag: String ): Boolean fun shouldSkipTest (testName: String , skipAnnotation: SkipLeakDetection ?, assertionTag: String ): Boolean","title":"shouldSkipTest"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/","text":"// leakcanary-android-instrumentation / leakcanary / TestDescriptionHolder TestDescriptionHolder \u00b6 [androidJvm]\\ object TestDescriptionHolder : TestRule A TestRule that holds onto the test Description in a thread local while evaluating, making it possible to retrieve that test Description from the test thread via testDescription . Functions \u00b6 Name Summary apply [androidJvm] open override fun apply (base: Statement, description: Description): Statement isEvaluating [androidJvm] fun isEvaluating (): Boolean Properties \u00b6 Name Summary testDescription [androidJvm] val testDescription : Description","title":"Index"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/#testdescriptionholder","text":"[androidJvm]\\ object TestDescriptionHolder : TestRule A TestRule that holds onto the test Description in a thread local while evaluating, making it possible to retrieve that test Description from the test thread via testDescription .","title":"TestDescriptionHolder"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/#functions","text":"Name Summary apply [androidJvm] open override fun apply (base: Statement, description: Description): Statement isEvaluating [androidJvm] fun isEvaluating (): Boolean","title":"Functions"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/#properties","text":"Name Summary testDescription [androidJvm] val testDescription : Description","title":"Properties"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/apply/","text":"// leakcanary-android-instrumentation / leakcanary / TestDescriptionHolder / apply apply \u00b6 [androidJvm]\\ open override fun apply (base: Statement, description: Description): Statement","title":"Apply"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/apply/#apply","text":"[androidJvm]\\ open override fun apply (base: Statement, description: Description): Statement","title":"apply"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/is-evaluating/","text":"// leakcanary-android-instrumentation / leakcanary / TestDescriptionHolder / isEvaluating isEvaluating \u00b6 [androidJvm]\\ fun isEvaluating (): Boolean","title":"Is evaluating"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/is-evaluating/#isevaluating","text":"[androidJvm]\\ fun isEvaluating (): Boolean","title":"isEvaluating"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/test-description/","text":"// leakcanary-android-instrumentation / leakcanary / TestDescriptionHolder / testDescription testDescription \u00b6 [androidJvm]\\ val testDescription : Description","title":"Test description"},{"location":"api/leakcanary-android-instrumentation/leakcanary/-test-description-holder/test-description/#testdescription","text":"[androidJvm]\\ val testDescription : Description","title":"testDescription"},{"location":"api/leakcanary-android-process/leakcanary/","text":"// leakcanary-android-process / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary LeakCanaryProcess [androidJvm] object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android, LeakCanary will automatically run its analysis in a separate process.","title":"Extension: Separate process"},{"location":"api/leakcanary-android-process/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-process/leakcanary/#types","text":"Name Summary LeakCanaryProcess [androidJvm] object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android, LeakCanary will automatically run its analysis in a separate process.","title":"Types"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/","text":"// leakcanary-android-process / leakcanary / LeakCanaryProcess LeakCanaryProcess \u00b6 [androidJvm]\\ object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android, LeakCanary will automatically run its analysis in a separate process. As such, you\u2019ll need to be careful to do any custom configuration of LeakCanary in both the main process and the analyzer process. Functions \u00b6 Name Summary isInAnalyzerProcess [androidJvm] fun isInAnalyzerProcess (context: Context ): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Index"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/#leakcanaryprocess","text":"[androidJvm]\\ object LeakCanaryProcess Used to determine whether the current process is the LeakCanary analyzer process. By depending on the leakcanary-android-process artifact instead of the leakcanary-android, LeakCanary will automatically run its analysis in a separate process. As such, you\u2019ll need to be careful to do any custom configuration of LeakCanary in both the main process and the analyzer process.","title":"LeakCanaryProcess"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/#functions","text":"Name Summary isInAnalyzerProcess [androidJvm] fun isInAnalyzerProcess (context: Context ): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Functions"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process/","text":"// leakcanary-android-process / leakcanary / LeakCanaryProcess / isInAnalyzerProcess isInAnalyzerProcess \u00b6 [androidJvm]\\ fun isInAnalyzerProcess (context: Context ): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"Is in analyzer process"},{"location":"api/leakcanary-android-process/leakcanary/-leak-canary-process/is-in-analyzer-process/#isinanalyzerprocess","text":"[androidJvm]\\ fun isInAnalyzerProcess (context: Context ): Boolean Whether the current process is the process running the heap analyzer, which is a different process than the normal app process.","title":"isInAnalyzerProcess"},{"location":"api/leakcanary-android-release/leakcanary/","text":"// leakcanary-android-release / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary BackgroundTrigger [androidJvm] class BackgroundTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , processInfo: ProcessInfo , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit ) ConditionalInterceptor [androidJvm] class ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean ) : HeapAnalysisInterceptor An interceptor that runs only when evaluateCondition returns true. GoodAndroidVersionInterceptor [androidJvm] class GoodAndroidVersionInterceptor : HeapAnalysisInterceptor HeapAnalysisClient [androidJvm] class HeapAnalysisClient (heapDumpDirectoryProvider: () -> File , config: HeapAnalysisConfig , interceptors: List < HeapAnalysisInterceptor >) HeapAnalysisConfig [androidJvm] data class HeapAnalysisConfig (referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , leakingObjectFinder: LeakingObjectFinder, stripHeapDump: Boolean ) HeapAnalysisInterceptor [androidJvm] fun interface HeapAnalysisInterceptor HeapAnalysisJob [androidJvm] interface HeapAnalysisJob A HeapAnalysisJob represents a single prepared request to analyze the heap. It cannot be executed twice. JobContext [androidJvm] class JobContext (starter: Class <*>?) In memory store that can be used to store objects in a given HeapAnalysisJob instance. This is a simple MutableMap of String to Any , but with unsafe generics access. MinimumDiskSpaceInterceptor [androidJvm] class MinimumDiskSpaceInterceptor (application: Application , minimumDiskSpaceBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor MinimumElapsedSinceStartInterceptor [androidJvm] class MinimumElapsedSinceStartInterceptor (minimumElapsedSinceStartMillis: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor MinimumMemoryInterceptor [androidJvm] class MinimumMemoryInterceptor (application: Application , minimumRequiredAvailableMemoryBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor OncePerPeriodInterceptor [androidJvm] class OncePerPeriodInterceptor (application: Application , periodMillis: Long ) : HeapAnalysisInterceptor Proceeds once per period (of time) and then cancels all follow up jobs until period has passed. ProcessInfo [androidJvm] interface ProcessInfo SaveResourceIdsInterceptor [androidJvm] class SaveResourceIdsInterceptor (resources: Resources ) : HeapAnalysisInterceptor Interceptor that saves the names of R.id.* entries and their associated int values to a static field that can then be read from the heap dump. ScreenOffTrigger [androidJvm] class ScreenOffTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit )","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-android-release/leakcanary/#types","text":"Name Summary BackgroundTrigger [androidJvm] class BackgroundTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , processInfo: ProcessInfo , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit ) ConditionalInterceptor [androidJvm] class ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean ) : HeapAnalysisInterceptor An interceptor that runs only when evaluateCondition returns true. GoodAndroidVersionInterceptor [androidJvm] class GoodAndroidVersionInterceptor : HeapAnalysisInterceptor HeapAnalysisClient [androidJvm] class HeapAnalysisClient (heapDumpDirectoryProvider: () -> File , config: HeapAnalysisConfig , interceptors: List < HeapAnalysisInterceptor >) HeapAnalysisConfig [androidJvm] data class HeapAnalysisConfig (referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , leakingObjectFinder: LeakingObjectFinder, stripHeapDump: Boolean ) HeapAnalysisInterceptor [androidJvm] fun interface HeapAnalysisInterceptor HeapAnalysisJob [androidJvm] interface HeapAnalysisJob A HeapAnalysisJob represents a single prepared request to analyze the heap. It cannot be executed twice. JobContext [androidJvm] class JobContext (starter: Class <*>?) In memory store that can be used to store objects in a given HeapAnalysisJob instance. This is a simple MutableMap of String to Any , but with unsafe generics access. MinimumDiskSpaceInterceptor [androidJvm] class MinimumDiskSpaceInterceptor (application: Application , minimumDiskSpaceBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor MinimumElapsedSinceStartInterceptor [androidJvm] class MinimumElapsedSinceStartInterceptor (minimumElapsedSinceStartMillis: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor MinimumMemoryInterceptor [androidJvm] class MinimumMemoryInterceptor (application: Application , minimumRequiredAvailableMemoryBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor OncePerPeriodInterceptor [androidJvm] class OncePerPeriodInterceptor (application: Application , periodMillis: Long ) : HeapAnalysisInterceptor Proceeds once per period (of time) and then cancels all follow up jobs until period has passed. ProcessInfo [androidJvm] interface ProcessInfo SaveResourceIdsInterceptor [androidJvm] class SaveResourceIdsInterceptor (resources: Resources ) : HeapAnalysisInterceptor Interceptor that saves the names of R.id.* entries and their associated int values to a static field that can then be read from the heap dump. ScreenOffTrigger [androidJvm] class ScreenOffTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit )","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/","text":"// leakcanary-android-release / leakcanary / BackgroundTrigger BackgroundTrigger \u00b6 [androidJvm]\\ class BackgroundTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , processInfo: ProcessInfo , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit ) Functions \u00b6 Name Summary start [androidJvm] fun start () stop [androidJvm] fun stop ()","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/#backgroundtrigger","text":"[androidJvm]\\ class BackgroundTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , processInfo: ProcessInfo , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit )","title":"BackgroundTrigger"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/#functions","text":"Name Summary start [androidJvm] fun start () stop [androidJvm] fun stop ()","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/-background-trigger/","text":"// leakcanary-android-release / leakcanary / BackgroundTrigger / BackgroundTrigger BackgroundTrigger \u00b6 [androidJvm]\\ fun BackgroundTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , processInfo: ProcessInfo = ProcessInfo.Real, analysisCallback: ( HeapAnalysisJob.Result ) -> Unit = { result -> SharkLog.d { \u201c$result\u201d } })","title":" background trigger"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/-background-trigger/#backgroundtrigger","text":"[androidJvm]\\ fun BackgroundTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , processInfo: ProcessInfo = ProcessInfo.Real, analysisCallback: ( HeapAnalysisJob.Result ) -> Unit = { result -> SharkLog.d { \u201c$result\u201d } })","title":"BackgroundTrigger"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/start/","text":"// leakcanary-android-release / leakcanary / BackgroundTrigger / start start \u00b6 [androidJvm]\\ fun start ()","title":"Start"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/start/#start","text":"[androidJvm]\\ fun start ()","title":"start"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/stop/","text":"// leakcanary-android-release / leakcanary / BackgroundTrigger / stop stop \u00b6 [androidJvm]\\ fun stop ()","title":"Stop"},{"location":"api/leakcanary-android-release/leakcanary/-background-trigger/stop/#stop","text":"[androidJvm]\\ fun stop ()","title":"stop"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/","text":"// leakcanary-android-release / leakcanary / ConditionalInterceptor ConditionalInterceptor \u00b6 [androidJvm]\\ class ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean ) : HeapAnalysisInterceptor An interceptor that runs only when evaluateCondition returns true. Constructors \u00b6 ConditionalInterceptor [androidJvm] fun ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean ) Functions \u00b6 Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/#conditionalinterceptor","text":"[androidJvm]\\ class ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean ) : HeapAnalysisInterceptor An interceptor that runs only when evaluateCondition returns true.","title":"ConditionalInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/#constructors","text":"ConditionalInterceptor [androidJvm] fun ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean )","title":"Constructors"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/#functions","text":"Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/-conditional-interceptor/","text":"// leakcanary-android-release / leakcanary / ConditionalInterceptor / ConditionalInterceptor ConditionalInterceptor \u00b6 [androidJvm]\\ fun ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean )","title":" conditional interceptor"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/-conditional-interceptor/#conditionalinterceptor","text":"[androidJvm]\\ fun ConditionalInterceptor (delegate: HeapAnalysisInterceptor , evaluateCondition: ( HeapAnalysisJob ) -> Boolean )","title":"ConditionalInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / ConditionalInterceptor / intercept intercept \u00b6 [androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-conditional-interceptor/intercept/#intercept","text":"[androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-good-android-version-interceptor/","text":"// leakcanary-android-release / leakcanary / GoodAndroidVersionInterceptor GoodAndroidVersionInterceptor \u00b6 [androidJvm]\\ class GoodAndroidVersionInterceptor : HeapAnalysisInterceptor Functions \u00b6 Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-good-android-version-interceptor/#goodandroidversioninterceptor","text":"[androidJvm]\\ class GoodAndroidVersionInterceptor : HeapAnalysisInterceptor","title":"GoodAndroidVersionInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-good-android-version-interceptor/#functions","text":"Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-good-android-version-interceptor/-good-android-version-interceptor/","text":"// leakcanary-android-release / leakcanary / GoodAndroidVersionInterceptor / GoodAndroidVersionInterceptor GoodAndroidVersionInterceptor \u00b6 [androidJvm]\\ fun GoodAndroidVersionInterceptor ()","title":" good android version interceptor"},{"location":"api/leakcanary-android-release/leakcanary/-good-android-version-interceptor/-good-android-version-interceptor/#goodandroidversioninterceptor","text":"[androidJvm]\\ fun GoodAndroidVersionInterceptor ()","title":"GoodAndroidVersionInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-good-android-version-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / GoodAndroidVersionInterceptor / intercept intercept \u00b6 [androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-good-android-version-interceptor/intercept/#intercept","text":"[androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisClient HeapAnalysisClient \u00b6 [androidJvm]\\ class HeapAnalysisClient (heapDumpDirectoryProvider: () -> File , config: HeapAnalysisConfig , interceptors: List < HeapAnalysisInterceptor >) Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary deleteHeapDumpFiles [androidJvm] fun deleteHeapDumpFiles () newJob [androidJvm] fun newJob (context: JobContext = JobContext()): HeapAnalysisJob","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/#heapanalysisclient","text":"[androidJvm]\\ class HeapAnalysisClient (heapDumpDirectoryProvider: () -> File , config: HeapAnalysisConfig , interceptors: List < HeapAnalysisInterceptor >)","title":"HeapAnalysisClient"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/#functions","text":"Name Summary deleteHeapDumpFiles [androidJvm] fun deleteHeapDumpFiles () newJob [androidJvm] fun newJob (context: JobContext = JobContext()): HeapAnalysisJob","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/-heap-analysis-client/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisClient / HeapAnalysisClient HeapAnalysisClient \u00b6 [androidJvm]\\ fun HeapAnalysisClient (heapDumpDirectoryProvider: () -> File , config: HeapAnalysisConfig , interceptors: List < HeapAnalysisInterceptor >)","title":" heap analysis client"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/-heap-analysis-client/#heapanalysisclient","text":"[androidJvm]\\ fun HeapAnalysisClient (heapDumpDirectoryProvider: () -> File , config: HeapAnalysisConfig , interceptors: List < HeapAnalysisInterceptor >)","title":"HeapAnalysisClient"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/delete-heap-dump-files/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisClient / deleteHeapDumpFiles deleteHeapDumpFiles \u00b6 [androidJvm]\\ fun deleteHeapDumpFiles ()","title":"Delete heap dump files"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/delete-heap-dump-files/#deleteheapdumpfiles","text":"[androidJvm]\\ fun deleteHeapDumpFiles ()","title":"deleteHeapDumpFiles"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/new-job/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisClient / newJob newJob \u00b6 [androidJvm]\\ fun newJob (context: JobContext = JobContext()): HeapAnalysisJob","title":"New job"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/new-job/#newjob","text":"[androidJvm]\\ fun newJob (context: JobContext = JobContext()): HeapAnalysisJob","title":"newJob"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/-companion/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisClient / Companion Companion \u00b6 [androidJvm]\\ object Companion Functions \u00b6 Name Summary defaultInterceptors [androidJvm] fun defaultInterceptors (application: Application ): List < HeapAnalysisInterceptor >","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/-companion/#functions","text":"Name Summary defaultInterceptors [androidJvm] fun defaultInterceptors (application: Application ): List < HeapAnalysisInterceptor >","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/-companion/default-interceptors/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisClient / Companion / defaultInterceptors defaultInterceptors \u00b6 [androidJvm]\\ fun defaultInterceptors (application: Application ): List < HeapAnalysisInterceptor >","title":"Default interceptors"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-client/-companion/default-interceptors/#defaultinterceptors","text":"[androidJvm]\\ fun defaultInterceptors (application: Application ): List < HeapAnalysisInterceptor >","title":"defaultInterceptors"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig HeapAnalysisConfig \u00b6 [androidJvm]\\ data class HeapAnalysisConfig (referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , leakingObjectFinder: LeakingObjectFinder, stripHeapDump: Boolean ) Properties \u00b6 Name Summary computeRetainedHeapSize [androidJvm] val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). leakingObjectFinder [androidJvm] val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. metadataExtractor [androidJvm] val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in shark.HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. objectInspectors [androidJvm] val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. referenceMatchers [androidJvm] val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). stripHeapDump [androidJvm] val stripHeapDump : Boolean = false Whether the first step after a heap dump should be to replace the content of all arrays with zeroes. This increases the overall processing time but limits the amount of time the heap dump exists on disk with potential PII.","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/#heapanalysisconfig","text":"[androidJvm]\\ data class HeapAnalysisConfig (referenceMatchers: List <ReferenceMatcher>, objectInspectors: List <ObjectInspector>, metadataExtractor: MetadataExtractor, computeRetainedHeapSize: Boolean , leakingObjectFinder: LeakingObjectFinder, stripHeapDump: Boolean )","title":"HeapAnalysisConfig"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/#properties","text":"Name Summary computeRetainedHeapSize [androidJvm] val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). leakingObjectFinder [androidJvm] val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. metadataExtractor [androidJvm] val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in shark.HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. objectInspectors [androidJvm] val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. referenceMatchers [androidJvm] val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). stripHeapDump [androidJvm] val stripHeapDump : Boolean = false Whether the first step after a heap dump should be to replace the content of all arrays with zeroes. This increases the overall processing time but limits the amount of time the heap dump exists on disk with potential PII.","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/-heap-analysis-config/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig / HeapAnalysisConfig HeapAnalysisConfig \u00b6 [androidJvm]\\ fun HeapAnalysisConfig (referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, leakingObjectFinder: LeakingObjectFinder = FilteringLeakingObjectFinder( AndroidObjectInspectors.appLeakingObjectFilters ), stripHeapDump: Boolean = false)","title":" heap analysis config"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/-heap-analysis-config/#heapanalysisconfig","text":"[androidJvm]\\ fun HeapAnalysisConfig (referenceMatchers: List <ReferenceMatcher> = AndroidReferenceMatchers.appDefaults, objectInspectors: List <ObjectInspector> = AndroidObjectInspectors.appDefaults, metadataExtractor: MetadataExtractor = AndroidMetadataExtractor, computeRetainedHeapSize: Boolean = true, leakingObjectFinder: LeakingObjectFinder = FilteringLeakingObjectFinder( AndroidObjectInspectors.appLeakingObjectFilters ), stripHeapDump: Boolean = false)","title":"HeapAnalysisConfig"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/compute-retained-heap-size/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig / computeRetainedHeapSize computeRetainedHeapSize \u00b6 [androidJvm]\\ val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"Compute retained heap size"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/compute-retained-heap-size/#computeretainedheapsize","text":"[androidJvm]\\ val computeRetainedHeapSize : Boolean = true Whether to compute the retained heap size, which is the total number of bytes in memory that would be reclaimed if the detected leaks didn\u2019t happen. This includes native memory associated to Java objects (e.g. Android bitmaps). Computing the retained heap size can slow down the analysis because it requires navigating from GC roots through the entire object graph, whereas shark.HeapAnalyzer would otherwise stop as soon as all leaking instances are found. Defaults to true.","title":"computeRetainedHeapSize"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/leaking-object-finder/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig / leakingObjectFinder leakingObjectFinder \u00b6 [androidJvm]\\ val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. Defaults to a FilteringLeakingObjectFinder that scans all objects in the heap dump and delegates the decision to AndroidObjectInspectors.appLeakingObjectFilters.","title":"Leaking object finder"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/leaking-object-finder/#leakingobjectfinder","text":"[androidJvm]\\ val leakingObjectFinder : LeakingObjectFinder Finds the objects that are leaking, for which LeakCanary will compute leak traces. Defaults to a FilteringLeakingObjectFinder that scans all objects in the heap dump and delegates the decision to AndroidObjectInspectors.appLeakingObjectFilters.","title":"leakingObjectFinder"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/metadata-extractor/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig / metadataExtractor metadataExtractor \u00b6 [androidJvm]\\ val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in shark.HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"Metadata extractor"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/metadata-extractor/#metadataextractor","text":"[androidJvm]\\ val metadataExtractor : MetadataExtractor Extracts metadata from a hprof to be reported in shark.HeapAnalysisSuccess.metadata. Called on a background thread during heap analysis. Defaults to AndroidMetadataExtractor","title":"metadataExtractor"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/object-inspectors/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig / objectInspectors objectInspectors \u00b6 [androidJvm]\\ val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"Object inspectors"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/object-inspectors/#objectinspectors","text":"[androidJvm]\\ val objectInspectors : List <ObjectInspector> List of ObjectInspector that provide LeakCanary with insights about objects found in the heap. You can create your own ObjectInspector implementations, and also add a shark.AppSingletonInspector instance created with the list of internal singletons. Defaults to AndroidObjectInspectors.appDefaults","title":"objectInspectors"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/reference-matchers/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig / referenceMatchers referenceMatchers \u00b6 [androidJvm]\\ val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). When adding your own custom LibraryLeakReferenceMatcher instances, you\u2019ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph. Defaults to AndroidReferenceMatchers.appDefaults","title":"Reference matchers"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/reference-matchers/#referencematchers","text":"[androidJvm]\\ val referenceMatchers : List <ReferenceMatcher> Known patterns of references in the heap, added here either to ignore them (IgnoredReferenceMatcher) or to mark them as library leaks (LibraryLeakReferenceMatcher). When adding your own custom LibraryLeakReferenceMatcher instances, you\u2019ll most likely want to set LibraryLeakReferenceMatcher.patternApplies with a filter that checks for the Android OS version and manufacturer. The build information can be obtained by calling shark.AndroidBuildMirror.fromHeapGraph. Defaults to AndroidReferenceMatchers.appDefaults","title":"referenceMatchers"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/strip-heap-dump/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisConfig / stripHeapDump stripHeapDump \u00b6 [androidJvm]\\ val stripHeapDump : Boolean = false Whether the first step after a heap dump should be to replace the content of all arrays with zeroes. This increases the overall processing time but limits the amount of time the heap dump exists on disk with potential PII.","title":"Strip heap dump"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-config/strip-heap-dump/#stripheapdump","text":"[androidJvm]\\ val stripHeapDump : Boolean = false Whether the first step after a heap dump should be to replace the content of all arrays with zeroes. This increases the overall processing time but limits the amount of time the heap dump exists on disk with potential PII.","title":"stripHeapDump"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisInterceptor HeapAnalysisInterceptor \u00b6 [androidJvm]\\ fun interface HeapAnalysisInterceptor Types \u00b6 Name Summary Chain [androidJvm] interface Chain Functions \u00b6 Name Summary intercept [androidJvm] abstract fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result Inheritors \u00b6 Name ConditionalInterceptor GoodAndroidVersionInterceptor MinimumDiskSpaceInterceptor MinimumElapsedSinceStartInterceptor MinimumMemoryInterceptor OncePerPeriodInterceptor SaveResourceIdsInterceptor","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/#heapanalysisinterceptor","text":"[androidJvm]\\ fun interface HeapAnalysisInterceptor","title":"HeapAnalysisInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/#types","text":"Name Summary Chain [androidJvm] interface Chain","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/#functions","text":"Name Summary intercept [androidJvm] abstract fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/#inheritors","text":"Name ConditionalInterceptor GoodAndroidVersionInterceptor MinimumDiskSpaceInterceptor MinimumElapsedSinceStartInterceptor MinimumMemoryInterceptor OncePerPeriodInterceptor SaveResourceIdsInterceptor","title":"Inheritors"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisInterceptor / intercept intercept \u00b6 [androidJvm]\\ abstract fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/intercept/#intercept","text":"[androidJvm]\\ abstract fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisInterceptor / Chain Chain \u00b6 [androidJvm]\\ interface Chain Functions \u00b6 Name Summary proceed [androidJvm] abstract fun proceed (): HeapAnalysisJob.Result Properties \u00b6 Name Summary job [androidJvm] abstract val job : HeapAnalysisJob","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/#chain","text":"[androidJvm]\\ interface Chain","title":"Chain"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/#functions","text":"Name Summary proceed [androidJvm] abstract fun proceed (): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/#properties","text":"Name Summary job [androidJvm] abstract val job : HeapAnalysisJob","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/job/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisInterceptor / Chain / job job \u00b6 [androidJvm]\\ abstract val job : HeapAnalysisJob","title":"Job"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/job/#job","text":"[androidJvm]\\ abstract val job : HeapAnalysisJob","title":"job"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/proceed/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisInterceptor / Chain / proceed proceed \u00b6 [androidJvm]\\ abstract fun proceed (): HeapAnalysisJob.Result","title":"Proceed"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-interceptor/-chain/proceed/#proceed","text":"[androidJvm]\\ abstract fun proceed (): HeapAnalysisJob.Result","title":"proceed"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob HeapAnalysisJob \u00b6 [androidJvm]\\ interface HeapAnalysisJob A HeapAnalysisJob represents a single prepared request to analyze the heap. It cannot be executed twice. Types \u00b6 Name Summary Result [androidJvm] sealed class Result Functions \u00b6 Name Summary cancel [androidJvm] abstract fun cancel (cancelReason: String ) Cancels the job, if possible. Jobs that are already complete cannot be canceled. execute [androidJvm] abstract fun execute (): HeapAnalysisJob.Result Starts the analysis job immediately, and blocks until a result is available. Properties \u00b6 Name Summary canceled [androidJvm] abstract val canceled : Boolean true of cancel has been called or if an HeapAnalysisInterceptor has returned Result.Canceled from HeapAnalysisInterceptor.intercept . context [androidJvm] abstract val context : JobContext In memory store, mutable and thread safe. This allows passing data to interceptors. executed [androidJvm] abstract val executed : Boolean true if execute has been called. It is an error to call execute more than once.","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/#heapanalysisjob","text":"[androidJvm]\\ interface HeapAnalysisJob A HeapAnalysisJob represents a single prepared request to analyze the heap. It cannot be executed twice.","title":"HeapAnalysisJob"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/#types","text":"Name Summary Result [androidJvm] sealed class Result","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/#functions","text":"Name Summary cancel [androidJvm] abstract fun cancel (cancelReason: String ) Cancels the job, if possible. Jobs that are already complete cannot be canceled. execute [androidJvm] abstract fun execute (): HeapAnalysisJob.Result Starts the analysis job immediately, and blocks until a result is available.","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/#properties","text":"Name Summary canceled [androidJvm] abstract val canceled : Boolean true of cancel has been called or if an HeapAnalysisInterceptor has returned Result.Canceled from HeapAnalysisInterceptor.intercept . context [androidJvm] abstract val context : JobContext In memory store, mutable and thread safe. This allows passing data to interceptors. executed [androidJvm] abstract val executed : Boolean true if execute has been called. It is an error to call execute more than once.","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/cancel/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / cancel cancel \u00b6 [androidJvm]\\ abstract fun cancel (cancelReason: String ) Cancels the job, if possible. Jobs that are already complete cannot be canceled.","title":"Cancel"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/cancel/#cancel","text":"[androidJvm]\\ abstract fun cancel (cancelReason: String ) Cancels the job, if possible. Jobs that are already complete cannot be canceled.","title":"cancel"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/canceled/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / canceled canceled \u00b6 [androidJvm]\\ abstract val canceled : Boolean true of cancel has been called or if an HeapAnalysisInterceptor has returned Result.Canceled from HeapAnalysisInterceptor.intercept .","title":"Canceled"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/canceled/#canceled","text":"[androidJvm]\\ abstract val canceled : Boolean true of cancel has been called or if an HeapAnalysisInterceptor has returned Result.Canceled from HeapAnalysisInterceptor.intercept .","title":"canceled"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/context/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / context context \u00b6 [androidJvm]\\ abstract val context : JobContext In memory store, mutable and thread safe. This allows passing data to interceptors.","title":"Context"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/context/#context","text":"[androidJvm]\\ abstract val context : JobContext In memory store, mutable and thread safe. This allows passing data to interceptors.","title":"context"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/execute/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / execute execute \u00b6 [androidJvm]\\ abstract fun execute (): HeapAnalysisJob.Result Starts the analysis job immediately, and blocks until a result is available. Return \u00b6 Either Result.Done if the analysis was attempted or Result.Canceled","title":"Execute"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/execute/#execute","text":"[androidJvm]\\ abstract fun execute (): HeapAnalysisJob.Result Starts the analysis job immediately, and blocks until a result is available.","title":"execute"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/execute/#return","text":"Either Result.Done if the analysis was attempted or Result.Canceled","title":"Return"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/executed/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / executed executed \u00b6 [androidJvm]\\ abstract val executed : Boolean true if execute has been called. It is an error to call execute more than once.","title":"Executed"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/executed/#executed","text":"[androidJvm]\\ abstract val executed : Boolean true if execute has been called. It is an error to call execute more than once.","title":"executed"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result Result \u00b6 [androidJvm]\\ sealed class Result Types \u00b6 Name Summary Canceled [androidJvm] data class Canceled (cancelReason: String ) : HeapAnalysisJob.Result Done [androidJvm] data class Done (analysis: HeapAnalysis, stripHeapDumpDurationMillis: Long ?) : HeapAnalysisJob.Result Inheritors \u00b6 Name Done Canceled","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/#result","text":"[androidJvm]\\ sealed class Result","title":"Result"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/#types","text":"Name Summary Canceled [androidJvm] data class Canceled (cancelReason: String ) : HeapAnalysisJob.Result Done [androidJvm] data class Done (analysis: HeapAnalysis, stripHeapDumpDurationMillis: Long ?) : HeapAnalysisJob.Result","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/#inheritors","text":"Name Done Canceled","title":"Inheritors"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-canceled/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result / Canceled Canceled \u00b6 [androidJvm]\\ data class Canceled (cancelReason: String ) : HeapAnalysisJob.Result Properties \u00b6 Name Summary cancelReason [androidJvm] val cancelReason : String","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-canceled/#canceled","text":"[androidJvm]\\ data class Canceled (cancelReason: String ) : HeapAnalysisJob.Result","title":"Canceled"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-canceled/#properties","text":"Name Summary cancelReason [androidJvm] val cancelReason : String","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-canceled/-canceled/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result / Canceled / Canceled Canceled \u00b6 [androidJvm]\\ fun Canceled (cancelReason: String )","title":" canceled"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-canceled/-canceled/#canceled","text":"[androidJvm]\\ fun Canceled (cancelReason: String )","title":"Canceled"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-canceled/cancel-reason/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result / Canceled / cancelReason cancelReason \u00b6 [androidJvm]\\ val cancelReason : String","title":"Cancel reason"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-canceled/cancel-reason/#cancelreason","text":"[androidJvm]\\ val cancelReason : String","title":"cancelReason"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result / Done Done \u00b6 [androidJvm]\\ data class Done (analysis: HeapAnalysis, stripHeapDumpDurationMillis: Long ?) : HeapAnalysisJob.Result Properties \u00b6 Name Summary analysis [androidJvm] val analysis : HeapAnalysis stripHeapDumpDurationMillis [androidJvm] val stripHeapDumpDurationMillis : Long ? = null The time spent stripping the hprof of any data if HeapAnalysisConfig.stripHeapDump is true, null otherwise.","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/#done","text":"[androidJvm]\\ data class Done (analysis: HeapAnalysis, stripHeapDumpDurationMillis: Long ?) : HeapAnalysisJob.Result","title":"Done"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/#properties","text":"Name Summary analysis [androidJvm] val analysis : HeapAnalysis stripHeapDumpDurationMillis [androidJvm] val stripHeapDumpDurationMillis : Long ? = null The time spent stripping the hprof of any data if HeapAnalysisConfig.stripHeapDump is true, null otherwise.","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/-done/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result / Done / Done Done \u00b6 [androidJvm]\\ fun Done (analysis: HeapAnalysis, stripHeapDumpDurationMillis: Long ? = null)","title":" done"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/-done/#done","text":"[androidJvm]\\ fun Done (analysis: HeapAnalysis, stripHeapDumpDurationMillis: Long ? = null)","title":"Done"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/analysis/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result / Done / analysis analysis \u00b6 [androidJvm]\\ val analysis : HeapAnalysis","title":"Analysis"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/analysis/#analysis","text":"[androidJvm]\\ val analysis : HeapAnalysis","title":"analysis"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/strip-heap-dump-duration-millis/","text":"// leakcanary-android-release / leakcanary / HeapAnalysisJob / Result / Done / stripHeapDumpDurationMillis stripHeapDumpDurationMillis \u00b6 [androidJvm]\\ val stripHeapDumpDurationMillis : Long ? = null The time spent stripping the hprof of any data if HeapAnalysisConfig.stripHeapDump is true, null otherwise.","title":"Strip heap dump duration millis"},{"location":"api/leakcanary-android-release/leakcanary/-heap-analysis-job/-result/-done/strip-heap-dump-duration-millis/#stripheapdumpdurationmillis","text":"[androidJvm]\\ val stripHeapDumpDurationMillis : Long ? = null The time spent stripping the hprof of any data if HeapAnalysisConfig.stripHeapDump is true, null otherwise.","title":"stripHeapDumpDurationMillis"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/","text":"// leakcanary-android-release / leakcanary / JobContext JobContext \u00b6 [androidJvm]\\ class JobContext (starter: Class <*>?) In memory store that can be used to store objects in a given HeapAnalysisJob instance. This is a simple MutableMap of String to Any , but with unsafe generics access. By convention, starter should be the class that triggered the start of the job. Constructors \u00b6 JobContext [androidJvm] fun JobContext (starter: KClass <*>) JobContext [androidJvm] fun JobContext (starter: Class <*>? = null) Functions \u00b6 Name Summary contains [androidJvm] operator fun contains (key: String ): Boolean get [androidJvm] operator fun < T > get (key: String ): T ? getOrPut [androidJvm] fun < T > getOrPut (key: String , defaultValue: () -> T ): T minusAssign [androidJvm] operator fun minusAssign (key: String ) set [androidJvm] operator fun < T > set (key: String , value: T ) Properties \u00b6 Name Summary starter [androidJvm] val starter : Class <*>? = null","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/#jobcontext","text":"[androidJvm]\\ class JobContext (starter: Class <*>?) In memory store that can be used to store objects in a given HeapAnalysisJob instance. This is a simple MutableMap of String to Any , but with unsafe generics access. By convention, starter should be the class that triggered the start of the job.","title":"JobContext"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/#constructors","text":"JobContext [androidJvm] fun JobContext (starter: KClass <*>) JobContext [androidJvm] fun JobContext (starter: Class <*>? = null)","title":"Constructors"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/#functions","text":"Name Summary contains [androidJvm] operator fun contains (key: String ): Boolean get [androidJvm] operator fun < T > get (key: String ): T ? getOrPut [androidJvm] fun < T > getOrPut (key: String , defaultValue: () -> T ): T minusAssign [androidJvm] operator fun minusAssign (key: String ) set [androidJvm] operator fun < T > set (key: String , value: T )","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/#properties","text":"Name Summary starter [androidJvm] val starter : Class <*>? = null","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/-job-context/","text":"// leakcanary-android-release / leakcanary / JobContext / JobContext JobContext \u00b6 [androidJvm]\\ fun JobContext (starter: KClass <*>) fun JobContext (starter: Class <*>? = null)","title":" job context"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/-job-context/#jobcontext","text":"[androidJvm]\\ fun JobContext (starter: KClass <*>) fun JobContext (starter: Class <*>? = null)","title":"JobContext"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/contains/","text":"// leakcanary-android-release / leakcanary / JobContext / contains contains \u00b6 [androidJvm]\\ operator fun contains (key: String ): Boolean See also \u00b6 androidJvm kotlin.collections.MutableMap","title":"Contains"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/contains/#contains","text":"[androidJvm]\\ operator fun contains (key: String ): Boolean","title":"contains"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/contains/#see-also","text":"androidJvm kotlin.collections.MutableMap","title":"See also"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/get-or-put/","text":"// leakcanary-android-release / leakcanary / JobContext / getOrPut getOrPut \u00b6 [androidJvm]\\ fun < T > getOrPut (key: String , defaultValue: () -> T ): T See also \u00b6 androidJvm MutableMap.getOrPut","title":"Get or put"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/get-or-put/#getorput","text":"[androidJvm]\\ fun < T > getOrPut (key: String , defaultValue: () -> T ): T","title":"getOrPut"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/get-or-put/#see-also","text":"androidJvm MutableMap.getOrPut","title":"See also"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/get/","text":"// leakcanary-android-release / leakcanary / JobContext / get get \u00b6 [androidJvm]\\ operator fun < T > get (key: String ): T ?","title":"Get"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/get/#get","text":"[androidJvm]\\ operator fun < T > get (key: String ): T ?","title":"get"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/minus-assign/","text":"// leakcanary-android-release / leakcanary / JobContext / minusAssign minusAssign \u00b6 [androidJvm]\\ operator fun minusAssign (key: String ) See also \u00b6 androidJvm kotlin.collections.MutableMap","title":"Minus assign"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/minus-assign/#minusassign","text":"[androidJvm]\\ operator fun minusAssign (key: String )","title":"minusAssign"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/minus-assign/#see-also","text":"androidJvm kotlin.collections.MutableMap","title":"See also"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/set/","text":"// leakcanary-android-release / leakcanary / JobContext / set set \u00b6 [androidJvm]\\ operator fun < T > set (key: String , value: T ) See also \u00b6 androidJvm MutableMap.set","title":"Set"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/set/#set","text":"[androidJvm]\\ operator fun < T > set (key: String , value: T )","title":"set"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/set/#see-also","text":"androidJvm MutableMap.set","title":"See also"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/starter/","text":"// leakcanary-android-release / leakcanary / JobContext / starter starter \u00b6 [androidJvm]\\ val starter : Class <*>? = null","title":"Starter"},{"location":"api/leakcanary-android-release/leakcanary/-job-context/starter/#starter","text":"[androidJvm]\\ val starter : Class <*>? = null","title":"starter"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-disk-space-interceptor/","text":"// leakcanary-android-release / leakcanary / MinimumDiskSpaceInterceptor MinimumDiskSpaceInterceptor \u00b6 [androidJvm]\\ class MinimumDiskSpaceInterceptor (application: Application , minimumDiskSpaceBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor Functions \u00b6 Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-disk-space-interceptor/#minimumdiskspaceinterceptor","text":"[androidJvm]\\ class MinimumDiskSpaceInterceptor (application: Application , minimumDiskSpaceBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor","title":"MinimumDiskSpaceInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-disk-space-interceptor/#functions","text":"Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-disk-space-interceptor/-minimum-disk-space-interceptor/","text":"// leakcanary-android-release / leakcanary / MinimumDiskSpaceInterceptor / MinimumDiskSpaceInterceptor MinimumDiskSpaceInterceptor \u00b6 [androidJvm]\\ fun MinimumDiskSpaceInterceptor (application: Application , minimumDiskSpaceBytes: Long , processInfo: ProcessInfo = ProcessInfo.Real)","title":" minimum disk space interceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-disk-space-interceptor/-minimum-disk-space-interceptor/#minimumdiskspaceinterceptor","text":"[androidJvm]\\ fun MinimumDiskSpaceInterceptor (application: Application , minimumDiskSpaceBytes: Long , processInfo: ProcessInfo = ProcessInfo.Real)","title":"MinimumDiskSpaceInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-disk-space-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / MinimumDiskSpaceInterceptor / intercept intercept \u00b6 [androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-disk-space-interceptor/intercept/#intercept","text":"[androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-elapsed-since-start-interceptor/","text":"// leakcanary-android-release / leakcanary / MinimumElapsedSinceStartInterceptor MinimumElapsedSinceStartInterceptor \u00b6 [androidJvm]\\ class MinimumElapsedSinceStartInterceptor (minimumElapsedSinceStartMillis: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor Functions \u00b6 Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-elapsed-since-start-interceptor/#minimumelapsedsincestartinterceptor","text":"[androidJvm]\\ class MinimumElapsedSinceStartInterceptor (minimumElapsedSinceStartMillis: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor","title":"MinimumElapsedSinceStartInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-elapsed-since-start-interceptor/#functions","text":"Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-elapsed-since-start-interceptor/-minimum-elapsed-since-start-interceptor/","text":"// leakcanary-android-release / leakcanary / MinimumElapsedSinceStartInterceptor / MinimumElapsedSinceStartInterceptor MinimumElapsedSinceStartInterceptor \u00b6 [androidJvm]\\ fun MinimumElapsedSinceStartInterceptor (minimumElapsedSinceStartMillis: Long = TimeUnit.SECONDS.toMillis(30), processInfo: ProcessInfo = ProcessInfo.Real)","title":" minimum elapsed since start interceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-elapsed-since-start-interceptor/-minimum-elapsed-since-start-interceptor/#minimumelapsedsincestartinterceptor","text":"[androidJvm]\\ fun MinimumElapsedSinceStartInterceptor (minimumElapsedSinceStartMillis: Long = TimeUnit.SECONDS.toMillis(30), processInfo: ProcessInfo = ProcessInfo.Real)","title":"MinimumElapsedSinceStartInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-elapsed-since-start-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / MinimumElapsedSinceStartInterceptor / intercept intercept \u00b6 [androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-elapsed-since-start-interceptor/intercept/#intercept","text":"[androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-memory-interceptor/","text":"// leakcanary-android-release / leakcanary / MinimumMemoryInterceptor MinimumMemoryInterceptor \u00b6 [androidJvm]\\ class MinimumMemoryInterceptor (application: Application , minimumRequiredAvailableMemoryBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor Functions \u00b6 Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-memory-interceptor/#minimummemoryinterceptor","text":"[androidJvm]\\ class MinimumMemoryInterceptor (application: Application , minimumRequiredAvailableMemoryBytes: Long , processInfo: ProcessInfo ) : HeapAnalysisInterceptor","title":"MinimumMemoryInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-memory-interceptor/#functions","text":"Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-memory-interceptor/-minimum-memory-interceptor/","text":"// leakcanary-android-release / leakcanary / MinimumMemoryInterceptor / MinimumMemoryInterceptor MinimumMemoryInterceptor \u00b6 [androidJvm]\\ fun MinimumMemoryInterceptor (application: Application , minimumRequiredAvailableMemoryBytes: Long , processInfo: ProcessInfo = ProcessInfo.Real)","title":" minimum memory interceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-memory-interceptor/-minimum-memory-interceptor/#minimummemoryinterceptor","text":"[androidJvm]\\ fun MinimumMemoryInterceptor (application: Application , minimumRequiredAvailableMemoryBytes: Long , processInfo: ProcessInfo = ProcessInfo.Real)","title":"MinimumMemoryInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-memory-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / MinimumMemoryInterceptor / intercept intercept \u00b6 [androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-minimum-memory-interceptor/intercept/#intercept","text":"[androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/","text":"// leakcanary-android-release / leakcanary / OncePerPeriodInterceptor OncePerPeriodInterceptor \u00b6 [androidJvm]\\ class OncePerPeriodInterceptor (application: Application , periodMillis: Long ) : HeapAnalysisInterceptor Proceeds once per period (of time) and then cancels all follow up jobs until period has passed. Constructors \u00b6 OncePerPeriodInterceptor [androidJvm] fun OncePerPeriodInterceptor (application: Application , periodMillis: Long = TimeUnit.DAYS.toMillis(1)) Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary forget [androidJvm] fun forget () intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/#onceperperiodinterceptor","text":"[androidJvm]\\ class OncePerPeriodInterceptor (application: Application , periodMillis: Long ) : HeapAnalysisInterceptor Proceeds once per period (of time) and then cancels all follow up jobs until period has passed.","title":"OncePerPeriodInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/#constructors","text":"OncePerPeriodInterceptor [androidJvm] fun OncePerPeriodInterceptor (application: Application , periodMillis: Long = TimeUnit.DAYS.toMillis(1))","title":"Constructors"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/#functions","text":"Name Summary forget [androidJvm] fun forget () intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/-once-per-period-interceptor/","text":"// leakcanary-android-release / leakcanary / OncePerPeriodInterceptor / OncePerPeriodInterceptor OncePerPeriodInterceptor \u00b6 [androidJvm]\\ fun OncePerPeriodInterceptor (application: Application , periodMillis: Long = TimeUnit.DAYS.toMillis(1))","title":" once per period interceptor"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/-once-per-period-interceptor/#onceperperiodinterceptor","text":"[androidJvm]\\ fun OncePerPeriodInterceptor (application: Application , periodMillis: Long = TimeUnit.DAYS.toMillis(1))","title":"OncePerPeriodInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/forget/","text":"// leakcanary-android-release / leakcanary / OncePerPeriodInterceptor / forget forget \u00b6 [androidJvm]\\ fun forget ()","title":"Forget"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/forget/#forget","text":"[androidJvm]\\ fun forget ()","title":"forget"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / OncePerPeriodInterceptor / intercept intercept \u00b6 [androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/intercept/#intercept","text":"[androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/-companion/","text":"// leakcanary-android-release / leakcanary / OncePerPeriodInterceptor / Companion Companion \u00b6 [androidJvm]\\ object Companion","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-once-per-period-interceptor/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/","text":"// leakcanary-android-release / leakcanary / ProcessInfo ProcessInfo \u00b6 [androidJvm]\\ interface ProcessInfo Types \u00b6 Name Summary AvailableRam [androidJvm] sealed class AvailableRam Real [androidJvm] object Real : ProcessInfo Functions \u00b6 Name Summary availableDiskSpaceBytes [androidJvm] abstract fun availableDiskSpaceBytes (path: File ): Long availableRam [androidJvm] abstract fun availableRam (context: Context ): ProcessInfo.AvailableRam Properties \u00b6 Name Summary elapsedMillisSinceStart [androidJvm] abstract val elapsedMillisSinceStart : Long isImportanceBackground [androidJvm] abstract val isImportanceBackground : Boolean Inheritors \u00b6 Name Real","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/#processinfo","text":"[androidJvm]\\ interface ProcessInfo","title":"ProcessInfo"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/#types","text":"Name Summary AvailableRam [androidJvm] sealed class AvailableRam Real [androidJvm] object Real : ProcessInfo","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/#functions","text":"Name Summary availableDiskSpaceBytes [androidJvm] abstract fun availableDiskSpaceBytes (path: File ): Long availableRam [androidJvm] abstract fun availableRam (context: Context ): ProcessInfo.AvailableRam","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/#properties","text":"Name Summary elapsedMillisSinceStart [androidJvm] abstract val elapsedMillisSinceStart : Long isImportanceBackground [androidJvm] abstract val isImportanceBackground : Boolean","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/#inheritors","text":"Name Real","title":"Inheritors"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/available-disk-space-bytes/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / availableDiskSpaceBytes availableDiskSpaceBytes \u00b6 [androidJvm]\\ abstract fun availableDiskSpaceBytes (path: File ): Long","title":"Available disk space bytes"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/available-disk-space-bytes/#availablediskspacebytes","text":"[androidJvm]\\ abstract fun availableDiskSpaceBytes (path: File ): Long","title":"availableDiskSpaceBytes"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/available-ram/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / availableRam availableRam \u00b6 [androidJvm]\\ abstract fun availableRam (context: Context ): ProcessInfo.AvailableRam","title":"Available ram"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/available-ram/#availableram","text":"[androidJvm]\\ abstract fun availableRam (context: Context ): ProcessInfo.AvailableRam","title":"availableRam"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/elapsed-millis-since-start/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / elapsedMillisSinceStart elapsedMillisSinceStart \u00b6 [androidJvm]\\ abstract val elapsedMillisSinceStart : Long","title":"Elapsed millis since start"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/elapsed-millis-since-start/#elapsedmillissincestart","text":"[androidJvm]\\ abstract val elapsedMillisSinceStart : Long","title":"elapsedMillisSinceStart"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/is-importance-background/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / isImportanceBackground isImportanceBackground \u00b6 [androidJvm]\\ abstract val isImportanceBackground : Boolean","title":"Is importance background"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/is-importance-background/#isimportancebackground","text":"[androidJvm]\\ abstract val isImportanceBackground : Boolean","title":"isImportanceBackground"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / AvailableRam AvailableRam \u00b6 [androidJvm]\\ sealed class AvailableRam Types \u00b6 Name Summary BelowThreshold [androidJvm] object BelowThreshold : ProcessInfo.AvailableRam LowRamDevice [androidJvm] object LowRamDevice : ProcessInfo.AvailableRam Memory [androidJvm] class Memory (bytes: Long ) : ProcessInfo.AvailableRam Inheritors \u00b6 Name LowRamDevice BelowThreshold Memory","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/#availableram","text":"[androidJvm]\\ sealed class AvailableRam","title":"AvailableRam"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/#types","text":"Name Summary BelowThreshold [androidJvm] object BelowThreshold : ProcessInfo.AvailableRam LowRamDevice [androidJvm] object LowRamDevice : ProcessInfo.AvailableRam Memory [androidJvm] class Memory (bytes: Long ) : ProcessInfo.AvailableRam","title":"Types"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/#inheritors","text":"Name LowRamDevice BelowThreshold Memory","title":"Inheritors"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-below-threshold/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / AvailableRam / BelowThreshold BelowThreshold \u00b6 [androidJvm]\\ object BelowThreshold : ProcessInfo.AvailableRam","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-below-threshold/#belowthreshold","text":"[androidJvm]\\ object BelowThreshold : ProcessInfo.AvailableRam","title":"BelowThreshold"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-low-ram-device/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / AvailableRam / LowRamDevice LowRamDevice \u00b6 [androidJvm]\\ object LowRamDevice : ProcessInfo.AvailableRam","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-low-ram-device/#lowramdevice","text":"[androidJvm]\\ object LowRamDevice : ProcessInfo.AvailableRam","title":"LowRamDevice"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-memory/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / AvailableRam / Memory Memory \u00b6 [androidJvm]\\ class Memory (bytes: Long ) : ProcessInfo.AvailableRam Properties \u00b6 Name Summary bytes [androidJvm] val bytes : Long","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-memory/#memory","text":"[androidJvm]\\ class Memory (bytes: Long ) : ProcessInfo.AvailableRam","title":"Memory"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-memory/#properties","text":"Name Summary bytes [androidJvm] val bytes : Long","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-memory/-memory/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / AvailableRam / Memory / Memory Memory \u00b6 [androidJvm]\\ fun Memory (bytes: Long )","title":" memory"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-memory/-memory/#memory","text":"[androidJvm]\\ fun Memory (bytes: Long )","title":"Memory"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-memory/bytes/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / AvailableRam / Memory / bytes bytes \u00b6 [androidJvm]\\ val bytes : Long","title":"Bytes"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-available-ram/-memory/bytes/#bytes","text":"[androidJvm]\\ val bytes : Long","title":"bytes"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / Real Real \u00b6 [androidJvm]\\ object Real : ProcessInfo Functions \u00b6 Name Summary availableDiskSpaceBytes [androidJvm] open override fun availableDiskSpaceBytes (path: File ): Long availableRam [androidJvm] open override fun availableRam (context: Context ): ProcessInfo.AvailableRam Properties \u00b6 Name Summary elapsedMillisSinceStart [androidJvm] open override val elapsedMillisSinceStart : Long isImportanceBackground [androidJvm] open override val isImportanceBackground : Boolean","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/#real","text":"[androidJvm]\\ object Real : ProcessInfo","title":"Real"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/#functions","text":"Name Summary availableDiskSpaceBytes [androidJvm] open override fun availableDiskSpaceBytes (path: File ): Long availableRam [androidJvm] open override fun availableRam (context: Context ): ProcessInfo.AvailableRam","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/#properties","text":"Name Summary elapsedMillisSinceStart [androidJvm] open override val elapsedMillisSinceStart : Long isImportanceBackground [androidJvm] open override val isImportanceBackground : Boolean","title":"Properties"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/available-disk-space-bytes/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / Real / availableDiskSpaceBytes availableDiskSpaceBytes \u00b6 [androidJvm]\\ open override fun availableDiskSpaceBytes (path: File ): Long","title":"Available disk space bytes"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/available-disk-space-bytes/#availablediskspacebytes","text":"[androidJvm]\\ open override fun availableDiskSpaceBytes (path: File ): Long","title":"availableDiskSpaceBytes"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/available-ram/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / Real / availableRam availableRam \u00b6 [androidJvm]\\ open override fun availableRam (context: Context ): ProcessInfo.AvailableRam","title":"Available ram"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/available-ram/#availableram","text":"[androidJvm]\\ open override fun availableRam (context: Context ): ProcessInfo.AvailableRam","title":"availableRam"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/elapsed-millis-since-start/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / Real / elapsedMillisSinceStart elapsedMillisSinceStart \u00b6 [androidJvm]\\ open override val elapsedMillisSinceStart : Long","title":"Elapsed millis since start"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/elapsed-millis-since-start/#elapsedmillissincestart","text":"[androidJvm]\\ open override val elapsedMillisSinceStart : Long","title":"elapsedMillisSinceStart"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/is-importance-background/","text":"// leakcanary-android-release / leakcanary / ProcessInfo / Real / isImportanceBackground isImportanceBackground \u00b6 [androidJvm]\\ open override val isImportanceBackground : Boolean","title":"Is importance background"},{"location":"api/leakcanary-android-release/leakcanary/-process-info/-real/is-importance-background/#isimportancebackground","text":"[androidJvm]\\ open override val isImportanceBackground : Boolean","title":"isImportanceBackground"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/","text":"// leakcanary-android-release / leakcanary / SaveResourceIdsInterceptor SaveResourceIdsInterceptor \u00b6 [androidJvm]\\ class SaveResourceIdsInterceptor (resources: Resources ) : HeapAnalysisInterceptor Interceptor that saves the names of R.id.* entries and their associated int values to a static field that can then be read from the heap dump. Constructors \u00b6 SaveResourceIdsInterceptor [androidJvm] fun SaveResourceIdsInterceptor (resources: Resources ) Functions \u00b6 Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/#saveresourceidsinterceptor","text":"[androidJvm]\\ class SaveResourceIdsInterceptor (resources: Resources ) : HeapAnalysisInterceptor Interceptor that saves the names of R.id.* entries and their associated int values to a static field that can then be read from the heap dump.","title":"SaveResourceIdsInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/#constructors","text":"SaveResourceIdsInterceptor [androidJvm] fun SaveResourceIdsInterceptor (resources: Resources )","title":"Constructors"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/#functions","text":"Name Summary intercept [androidJvm] open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/-save-resource-ids-interceptor/","text":"// leakcanary-android-release / leakcanary / SaveResourceIdsInterceptor / SaveResourceIdsInterceptor SaveResourceIdsInterceptor \u00b6 [androidJvm]\\ fun SaveResourceIdsInterceptor (resources: Resources )","title":" save resource ids interceptor"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/-save-resource-ids-interceptor/#saveresourceidsinterceptor","text":"[androidJvm]\\ fun SaveResourceIdsInterceptor (resources: Resources )","title":"SaveResourceIdsInterceptor"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/intercept/","text":"// leakcanary-android-release / leakcanary / SaveResourceIdsInterceptor / intercept intercept \u00b6 [androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"Intercept"},{"location":"api/leakcanary-android-release/leakcanary/-save-resource-ids-interceptor/intercept/#intercept","text":"[androidJvm]\\ open override fun intercept (chain: HeapAnalysisInterceptor.Chain ): HeapAnalysisJob.Result","title":"intercept"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/","text":"// leakcanary-android-release / leakcanary / ScreenOffTrigger ScreenOffTrigger \u00b6 [androidJvm]\\ class ScreenOffTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit ) Functions \u00b6 Name Summary start [androidJvm] fun start () stop [androidJvm] fun stop ()","title":"Index"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/#screenofftrigger","text":"[androidJvm]\\ class ScreenOffTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit )","title":"ScreenOffTrigger"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/#functions","text":"Name Summary start [androidJvm] fun start () stop [androidJvm] fun stop ()","title":"Functions"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/-screen-off-trigger/","text":"// leakcanary-android-release / leakcanary / ScreenOffTrigger / ScreenOffTrigger ScreenOffTrigger \u00b6 [androidJvm]\\ fun ScreenOffTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit = { result -> SharkLog.d { \u201c$result\u201d } })","title":" screen off trigger"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/-screen-off-trigger/#screenofftrigger","text":"[androidJvm]\\ fun ScreenOffTrigger (application: Application , analysisClient: HeapAnalysisClient , analysisExecutor: Executor , analysisCallback: ( HeapAnalysisJob.Result ) -> Unit = { result -> SharkLog.d { \u201c$result\u201d } })","title":"ScreenOffTrigger"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/start/","text":"// leakcanary-android-release / leakcanary / ScreenOffTrigger / start start \u00b6 [androidJvm]\\ fun start ()","title":"Start"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/start/#start","text":"[androidJvm]\\ fun start ()","title":"start"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/stop/","text":"// leakcanary-android-release / leakcanary / ScreenOffTrigger / stop stop \u00b6 [androidJvm]\\ fun stop ()","title":"Stop"},{"location":"api/leakcanary-android-release/leakcanary/-screen-off-trigger/stop/#stop","text":"[androidJvm]\\ fun stop ()","title":"stop"},{"location":"api/leakcanary-object-watcher/leakcanary/","text":"// leakcanary-object-watcher / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary Clock [jvm] fun interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. GcTrigger [jvm] fun interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. KeyedWeakReference [jvm] class KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. ObjectWatcher [jvm] class ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean ) : ReachabilityWatcher ObjectWatcher can be passed objects to watch. It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify registered OnObjectRetainedListener s on that executor thread. OnObjectRetainedListener [jvm] fun interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects. ReachabilityWatcher [jvm] fun interface ReachabilityWatcher","title":"Core: ObjectWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-object-watcher/leakcanary/#types","text":"Name Summary Clock [jvm] fun interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. GcTrigger [jvm] fun interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. KeyedWeakReference [jvm] class KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. ObjectWatcher [jvm] class ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean ) : ReachabilityWatcher ObjectWatcher can be passed objects to watch. It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify registered OnObjectRetainedListener s on that executor thread. OnObjectRetainedListener [jvm] fun interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects. ReachabilityWatcher [jvm] fun interface ReachabilityWatcher","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/","text":"// leakcanary-object-watcher / leakcanary / Clock Clock \u00b6 [jvm]\\ fun interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. This is a functional interface with which you can create a Clock from a lambda. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary uptimeMillis [jvm] abstract fun uptimeMillis (): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#clock","text":"[jvm]\\ fun interface Clock An interface to abstract the SystemClock.uptimeMillis() Android API in non Android artifacts. This is a functional interface with which you can create a Clock from a lambda.","title":"Clock"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/#functions","text":"Name Summary uptimeMillis [jvm] abstract fun uptimeMillis (): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis/","text":"// leakcanary-object-watcher / leakcanary / Clock / uptimeMillis uptimeMillis \u00b6 [jvm]\\ abstract fun uptimeMillis (): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"Uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/uptime-millis/#uptimemillis","text":"[jvm]\\ abstract fun uptimeMillis (): Long On Android VMs, this should return android.os.SystemClock.uptimeMillis().","title":"uptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/-companion/","text":"// leakcanary-object-watcher / leakcanary / Clock / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: () -> Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax.","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: () -> Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/-companion/invoke/","text":"// leakcanary-object-watcher / leakcanary / Clock / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: () -> Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax. Usage: val clock = Clock {\\ \\ }","title":"Invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-clock/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: () -> Long ): Clock Utility function to create a Clock from the passed in block lambda instead of using the anonymous object : Clock syntax. Usage: val clock = Clock {\\ \\ }","title":"invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/","text":"// leakcanary-object-watcher / leakcanary / GcTrigger GcTrigger \u00b6 [jvm]\\ fun interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP. Types \u00b6 Name Summary Default [jvm] object Default : GcTrigger Default implementation of GcTrigger . Functions \u00b6 Name Summary runGc [jvm] abstract fun runGc () Attempts to run garbage collection. Inheritors \u00b6 Name Default","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#gctrigger","text":"[jvm]\\ fun interface GcTrigger GcTrigger is used to try triggering garbage collection and enqueuing KeyedWeakReference into the associated java.lang.ref.ReferenceQueue . The default implementation Default comes from AOSP.","title":"GcTrigger"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#types","text":"Name Summary Default [jvm] object Default : GcTrigger Default implementation of GcTrigger .","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#functions","text":"Name Summary runGc [jvm] abstract fun runGc () Attempts to run garbage collection.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/#inheritors","text":"Name Default","title":"Inheritors"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc/","text":"// leakcanary-object-watcher / leakcanary / GcTrigger / runGc runGc \u00b6 [jvm]\\ abstract fun runGc () Attempts to run garbage collection.","title":"Run gc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/run-gc/#rungc","text":"[jvm]\\ abstract fun runGc () Attempts to run garbage collection.","title":"runGc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/","text":"// leakcanary-object-watcher / leakcanary / GcTrigger / Default Default \u00b6 [jvm]\\ object Default : GcTrigger Default implementation of GcTrigger . Functions \u00b6 Name Summary runGc [jvm] open override fun runGc () Attempts to run garbage collection.","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/#default","text":"[jvm]\\ object Default : GcTrigger Default implementation of GcTrigger .","title":"Default"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/#functions","text":"Name Summary runGc [jvm] open override fun runGc () Attempts to run garbage collection.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc/","text":"// leakcanary-object-watcher / leakcanary / GcTrigger / Default / runGc runGc \u00b6 [jvm]\\ open override fun runGc () Attempts to run garbage collection.","title":"Run gc"},{"location":"api/leakcanary-object-watcher/leakcanary/-gc-trigger/-default/run-gc/#rungc","text":"[jvm]\\ open override fun runGc () Attempts to run garbage collection.","title":"runGc"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference KeyedWeakReference \u00b6 [jvm]\\ class KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained. Constructors \u00b6 KeyedWeakReference [jvm] fun KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary clear [jvm] open override fun clear () enqueue [jvm] open fun enqueue (): Boolean get [jvm] open fun get (): Any ? isEnqueued [jvm] open fun isEnqueued (): Boolean Properties \u00b6 Name Summary description [jvm] val description : String key [jvm] val key : String next [jvm] val next : Reference < Any > queue [jvm] val queue : ReferenceQueue <in Any > retainedUptimeMillis [jvm] @ Volatile var retainedUptimeMillis : Long Time at which the associated object (referent) was considered retained, or -1 if it hasn\u2019t been yet. watchUptimeMillis [jvm] val watchUptimeMillis : Long","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#keyedweakreference","text":"[jvm]\\ class KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >) : WeakReference < Any > A weak reference used by ObjectWatcher to determine which objects become weakly reachable and which don\u2019t. ObjectWatcher uses key to keep track of KeyedWeakReference instances that haven\u2019t made it into the associated ReferenceQueue yet. heapDumpUptimeMillis should be set with the current time from Clock.uptimeMillis right before dumping the heap, so that we can later determine how long an object was retained.","title":"KeyedWeakReference"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#constructors","text":"KeyedWeakReference [jvm] fun KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >)","title":"Constructors"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#functions","text":"Name Summary clear [jvm] open override fun clear () enqueue [jvm] open fun enqueue (): Boolean get [jvm] open fun get (): Any ? isEnqueued [jvm] open fun isEnqueued (): Boolean","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/#properties","text":"Name Summary description [jvm] val description : String key [jvm] val key : String next [jvm] val next : Reference < Any > queue [jvm] val queue : ReferenceQueue <in Any > retainedUptimeMillis [jvm] @ Volatile var retainedUptimeMillis : Long Time at which the associated object (referent) was considered retained, or -1 if it hasn\u2019t been yet. watchUptimeMillis [jvm] val watchUptimeMillis : Long","title":"Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-keyed-weak-reference/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / KeyedWeakReference KeyedWeakReference \u00b6 [jvm]\\ fun KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >)","title":" keyed weak reference"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-keyed-weak-reference/#keyedweakreference","text":"[jvm]\\ fun KeyedWeakReference (referent: Any , key: String , description: String , watchUptimeMillis: Long , referenceQueue: ReferenceQueue < Any >)","title":"KeyedWeakReference"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/clear/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / clear clear \u00b6 [jvm]\\ open override fun clear ()","title":"Clear"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/clear/#clear","text":"[jvm]\\ open override fun clear ()","title":"clear"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/description/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / description description \u00b6 [jvm]\\ val description : String","title":"Description"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/description/#description","text":"[jvm]\\ val description : String","title":"description"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / key key \u00b6 [jvm]\\ val key : String","title":"Key"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/key/#key","text":"[jvm]\\ val key : String","title":"key"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / retainedUptimeMillis retainedUptimeMillis \u00b6 [jvm]\\ @ Volatile var retainedUptimeMillis : Long Time at which the associated object (referent) was considered retained, or -1 if it hasn\u2019t been yet.","title":"Retained uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/retained-uptime-millis/#retaineduptimemillis","text":"[jvm]\\ @ Volatile var retainedUptimeMillis : Long Time at which the associated object (referent) was considered retained, or -1 if it hasn\u2019t been yet.","title":"retainedUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / watchUptimeMillis watchUptimeMillis \u00b6 [jvm]\\ val watchUptimeMillis : Long","title":"Watch uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/watch-uptime-millis/#watchuptimemillis","text":"[jvm]\\ val watchUptimeMillis : Long","title":"watchUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-companion/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary heapDumpUptimeMillis [jvm] @ JvmStatic @ Volatile var heapDumpUptimeMillis : Long = 0","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-companion/#properties","text":"Name Summary heapDumpUptimeMillis [jvm] @ JvmStatic @ Volatile var heapDumpUptimeMillis : Long = 0","title":"Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-companion/heap-dump-uptime-millis/","text":"// leakcanary-object-watcher / leakcanary / KeyedWeakReference / Companion / heapDumpUptimeMillis heapDumpUptimeMillis \u00b6 [jvm]\\ @ JvmStatic @ Volatile var heapDumpUptimeMillis : Long = 0","title":"Heap dump uptime millis"},{"location":"api/leakcanary-object-watcher/leakcanary/-keyed-weak-reference/-companion/heap-dump-uptime-millis/#heapdumpuptimemillis","text":"[jvm]\\ @ JvmStatic @ Volatile var heapDumpUptimeMillis : Long = 0","title":"heapDumpUptimeMillis"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher ObjectWatcher \u00b6 [jvm]\\ class ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean ) : ReachabilityWatcher ObjectWatcher can be passed objects to watch. It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify registered OnObjectRetainedListener s on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant delay to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe. Constructors \u00b6 ObjectWatcher [jvm] fun ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true }) Functions \u00b6 Name Summary addOnObjectRetainedListener [jvm] @ Synchronized fun addOnObjectRetainedListener (listener: OnObjectRetainedListener ) clearObjectsWatchedBefore [jvm] @ Synchronized fun clearObjectsWatchedBefore (heapDumpUptimeMillis: Long ) Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock ) clearWatchedObjects [jvm] @ Synchronized fun clearWatchedObjects () Clears all KeyedWeakReference expectWeaklyReachable [jvm] @ Synchronized open override fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained. removeOnObjectRetainedListener [jvm] @ Synchronized fun removeOnObjectRetainedListener (listener: OnObjectRetainedListener ) Properties \u00b6 Name Summary hasRetainedObjects [jvm] @get: Synchronized val hasRetainedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. hasWatchedObjects [jvm] @get: Synchronized val hasWatchedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained. retainedObjectCount [jvm] @get: Synchronized val retainedObjectCount : Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. retainedObjects [jvm] @get: Synchronized val retainedObjects : List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#objectwatcher","text":"[jvm]\\ class ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean ) : ReachabilityWatcher ObjectWatcher can be passed objects to watch. It will create KeyedWeakReference instances that reference watches objects, and check if those references have been cleared as expected on the checkRetainedExecutor executor. If not, these objects are considered retained and ObjectWatcher will then notify registered OnObjectRetainedListener s on that executor thread. checkRetainedExecutor is expected to run its tasks on a background thread, with a significant delay to give the GC the opportunity to identify weakly reachable objects. ObjectWatcher is thread safe.","title":"ObjectWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#constructors","text":"ObjectWatcher [jvm] fun ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true })","title":"Constructors"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#functions","text":"Name Summary addOnObjectRetainedListener [jvm] @ Synchronized fun addOnObjectRetainedListener (listener: OnObjectRetainedListener ) clearObjectsWatchedBefore [jvm] @ Synchronized fun clearObjectsWatchedBefore (heapDumpUptimeMillis: Long ) Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock ) clearWatchedObjects [jvm] @ Synchronized fun clearWatchedObjects () Clears all KeyedWeakReference expectWeaklyReachable [jvm] @ Synchronized open override fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained. removeOnObjectRetainedListener [jvm] @ Synchronized fun removeOnObjectRetainedListener (listener: OnObjectRetainedListener )","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/#properties","text":"Name Summary hasRetainedObjects [jvm] @get: Synchronized val hasRetainedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. hasWatchedObjects [jvm] @get: Synchronized val hasWatchedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained. retainedObjectCount [jvm] @get: Synchronized val retainedObjectCount : Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained. retainedObjects [jvm] @get: Synchronized val retainedObjects : List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"Properties"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/-object-watcher/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / ObjectWatcher ObjectWatcher \u00b6 [jvm]\\ fun ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true })","title":" object watcher"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/-object-watcher/#objectwatcher","text":"[jvm]\\ fun ObjectWatcher (clock: Clock , checkRetainedExecutor: Executor , isEnabled: () -> Boolean = { true })","title":"ObjectWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / addOnObjectRetainedListener addOnObjectRetainedListener \u00b6 [jvm]\\ @ Synchronized fun addOnObjectRetainedListener (listener: OnObjectRetainedListener )","title":"Add on object retained listener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/add-on-object-retained-listener/#addonobjectretainedlistener","text":"[jvm]\\ @ Synchronized fun addOnObjectRetainedListener (listener: OnObjectRetainedListener )","title":"addOnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / clearObjectsWatchedBefore clearObjectsWatchedBefore \u00b6 [jvm]\\ @ Synchronized fun clearObjectsWatchedBefore (heapDumpUptimeMillis: Long ) Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock )","title":"Clear objects watched before"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-objects-watched-before/#clearobjectswatchedbefore","text":"[jvm]\\ @ Synchronized fun clearObjectsWatchedBefore (heapDumpUptimeMillis: Long ) Clears all KeyedWeakReference that were created before heapDumpUptimeMillis (based on clock )","title":"clearObjectsWatchedBefore"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / clearWatchedObjects clearWatchedObjects \u00b6 [jvm]\\ @ Synchronized fun clearWatchedObjects () Clears all KeyedWeakReference","title":"Clear watched objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/clear-watched-objects/#clearwatchedobjects","text":"[jvm]\\ @ Synchronized fun clearWatchedObjects () Clears all KeyedWeakReference","title":"clearWatchedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/expect-weakly-reachable/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / expectWeaklyReachable expectWeaklyReachable \u00b6 [jvm]\\ @ Synchronized open override fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained.","title":"Expect weakly reachable"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/expect-weakly-reachable/#expectweaklyreachable","text":"[jvm]\\ @ Synchronized open override fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained.","title":"expectWeaklyReachable"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / hasRetainedObjects hasRetainedObjects \u00b6 [jvm]\\ @get: Synchronized val hasRetainedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"Has retained objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-retained-objects/#hasretainedobjects","text":"[jvm]\\ @get: Synchronized val hasRetainedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"hasRetainedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / hasWatchedObjects hasWatchedObjects \u00b6 [jvm]\\ @get: Synchronized val hasWatchedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained.","title":"Has watched objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/has-watched-objects/#haswatchedobjects","text":"[jvm]\\ @get: Synchronized val hasWatchedObjects : Boolean Returns true if there are watched objects that aren\u2019t weakly reachable, even if they haven\u2019t been watched for long enough to be considered retained.","title":"hasWatchedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / removeOnObjectRetainedListener removeOnObjectRetainedListener \u00b6 [jvm]\\ @ Synchronized fun removeOnObjectRetainedListener (listener: OnObjectRetainedListener )","title":"Remove on object retained listener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/remove-on-object-retained-listener/#removeonobjectretainedlistener","text":"[jvm]\\ @ Synchronized fun removeOnObjectRetainedListener (listener: OnObjectRetainedListener )","title":"removeOnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / retainedObjectCount retainedObjectCount \u00b6 [jvm]\\ @get: Synchronized val retainedObjectCount : Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"Retained object count"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-object-count/#retainedobjectcount","text":"[jvm]\\ @get: Synchronized val retainedObjectCount : Int Returns the number of retained objects, ie the number of watched objects that aren\u2019t weakly reachable, and have been watched for long enough to be considered retained.","title":"retainedObjectCount"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects/","text":"// leakcanary-object-watcher / leakcanary / ObjectWatcher / retainedObjects retainedObjects \u00b6 [jvm]\\ @get: Synchronized val retainedObjects : List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"Retained objects"},{"location":"api/leakcanary-object-watcher/leakcanary/-object-watcher/retained-objects/#retainedobjects","text":"[jvm]\\ @get: Synchronized val retainedObjects : List < Any > Returns the objects that are currently considered retained. Useful for logging purposes. Be careful with those objects and release them ASAP as you may creating longer lived leaks then the one that are already there.","title":"retainedObjects"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/","text":"// leakcanary-object-watcher / leakcanary / OnObjectRetainedListener OnObjectRetainedListener \u00b6 [jvm]\\ fun interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects. This is a functional interface with which you can create a OnObjectRetainedListener from a lambda. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary onObjectRetained [jvm] abstract fun onObjectRetained () A watched object became retained.","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#onobjectretainedlistener","text":"[jvm]\\ fun interface OnObjectRetainedListener Listener used by ObjectWatcher to report retained objects. This is a functional interface with which you can create a OnObjectRetainedListener from a lambda.","title":"OnObjectRetainedListener"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/#functions","text":"Name Summary onObjectRetained [jvm] abstract fun onObjectRetained () A watched object became retained.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained/","text":"// leakcanary-object-watcher / leakcanary / OnObjectRetainedListener / onObjectRetained onObjectRetained \u00b6 [jvm]\\ abstract fun onObjectRetained () A watched object became retained.","title":"On object retained"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/on-object-retained/#onobjectretained","text":"[jvm]\\ abstract fun onObjectRetained () A watched object became retained.","title":"onObjectRetained"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/-companion/","text":"// leakcanary-object-watcher / leakcanary / OnObjectRetainedListener / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax.","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/-companion/invoke/","text":"// leakcanary-object-watcher / leakcanary / OnObjectRetainedListener / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax. Usage: val listener = OnObjectRetainedListener {\\ \\ }","title":"Invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-on-object-retained-listener/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: () -> Unit ): OnObjectRetainedListener Utility function to create a OnObjectRetainedListener from the passed in block lambda instead of using the anonymous object : OnObjectRetainedListener syntax. Usage: val listener = OnObjectRetainedListener {\\ \\ }","title":"invoke"},{"location":"api/leakcanary-object-watcher/leakcanary/-reachability-watcher/","text":"// leakcanary-object-watcher / leakcanary / ReachabilityWatcher ReachabilityWatcher \u00b6 [jvm]\\ fun interface ReachabilityWatcher Functions \u00b6 Name Summary expectWeaklyReachable [jvm] abstract fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained. Inheritors \u00b6 Name ObjectWatcher","title":"Index"},{"location":"api/leakcanary-object-watcher/leakcanary/-reachability-watcher/#reachabilitywatcher","text":"[jvm]\\ fun interface ReachabilityWatcher","title":"ReachabilityWatcher"},{"location":"api/leakcanary-object-watcher/leakcanary/-reachability-watcher/#functions","text":"Name Summary expectWeaklyReachable [jvm] abstract fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained.","title":"Functions"},{"location":"api/leakcanary-object-watcher/leakcanary/-reachability-watcher/#inheritors","text":"Name ObjectWatcher","title":"Inheritors"},{"location":"api/leakcanary-object-watcher/leakcanary/-reachability-watcher/expect-weakly-reachable/","text":"// leakcanary-object-watcher / leakcanary / ReachabilityWatcher / expectWeaklyReachable expectWeaklyReachable \u00b6 [jvm]\\ abstract fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained.","title":"Expect weakly reachable"},{"location":"api/leakcanary-object-watcher/leakcanary/-reachability-watcher/expect-weakly-reachable/#expectweaklyreachable","text":"[jvm]\\ abstract fun expectWeaklyReachable (watchedObject: Any , description: String ) Expects the provided watchedObject to become weakly reachable soon. If not, watchedObject will be considered retained.","title":"expectWeaklyReachable"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/","text":"// leakcanary-object-watcher-android-core / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary ActivityWatcher [androidJvm] class ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects activities to become weakly reachable soon after they receive the Activity.onDestroy callback. AppWatcher [androidJvm] object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable. FragmentAndViewModelWatcher [androidJvm] class FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects: InstallableWatcher [androidJvm] interface InstallableWatcher RootViewWatcher [androidJvm] class RootViewWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects root views to become weakly reachable soon after they are removed from the window manager. ServiceWatcher [androidJvm] class ServiceWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects services to become weakly reachable soon after they receive the Service.onDestroy callback.","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/#types","text":"Name Summary ActivityWatcher [androidJvm] class ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects activities to become weakly reachable soon after they receive the Activity.onDestroy callback. AppWatcher [androidJvm] object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable. FragmentAndViewModelWatcher [androidJvm] class FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects: InstallableWatcher [androidJvm] interface InstallableWatcher RootViewWatcher [androidJvm] class RootViewWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects root views to become weakly reachable soon after they are removed from the window manager. ServiceWatcher [androidJvm] class ServiceWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects services to become weakly reachable soon after they receive the Service.onDestroy callback.","title":"Types"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / ActivityWatcher ActivityWatcher \u00b6 [androidJvm]\\ class ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects activities to become weakly reachable soon after they receive the Activity.onDestroy callback. Constructors \u00b6 ActivityWatcher [androidJvm] fun ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) Functions \u00b6 Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/#activitywatcher","text":"[androidJvm]\\ class ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects activities to become weakly reachable soon after they receive the Activity.onDestroy callback.","title":"ActivityWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/#constructors","text":"ActivityWatcher [androidJvm] fun ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher)","title":"Constructors"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/#functions","text":"Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Functions"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/-activity-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / ActivityWatcher / ActivityWatcher ActivityWatcher \u00b6 [androidJvm]\\ fun ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher)","title":" activity watcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/-activity-watcher/#activitywatcher","text":"[androidJvm]\\ fun ActivityWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher)","title":"ActivityWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/install/","text":"// leakcanary-object-watcher-android-core / leakcanary / ActivityWatcher / install install \u00b6 [androidJvm]\\ open override fun install ()","title":"Install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/install/#install","text":"[androidJvm]\\ open override fun install ()","title":"install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/uninstall/","text":"// leakcanary-object-watcher-android-core / leakcanary / ActivityWatcher / uninstall uninstall \u00b6 [androidJvm]\\ open override fun uninstall ()","title":"Uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-activity-watcher/uninstall/#uninstall","text":"[androidJvm]\\ open override fun uninstall ()","title":"uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / AppWatcher AppWatcher \u00b6 [androidJvm]\\ object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable. Functions \u00b6 Name Summary appDefaultWatchers [androidJvm] fun appDefaultWatchers (application: Application , reachabilityWatcher: ReachabilityWatcher = objectWatcher): List < InstallableWatcher > Creates a new list of default app InstallableWatcher , created with the passed in reachabilityWatcher (which defaults to objectWatcher ). Once installed, these watchers will pass in to reachabilityWatcher objects that they expect to become weakly reachable. manualInstall [androidJvm] @ JvmOverloads fun manualInstall (application: Application , retainedDelayMillis: Long = TimeUnit.SECONDS.toMillis(5), watchersToInstall: List < InstallableWatcher > = appDefaultWatchers(application)) Enables usage of AppWatcher.objectWatcher which will expect passed in objects to become weakly reachable within retainedDelayMillis ms and if not will trigger LeakCanary (if LeakCanary is in the classpath). Properties \u00b6 Name Summary isInstalled [androidJvm] val isInstalled : Boolean objectWatcher [androidJvm] val objectWatcher : ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects. Only set when isInstalled is true. retainedDelayMillis [androidJvm] @ Volatile var retainedDelayMillis : Long","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/#appwatcher","text":"[androidJvm]\\ object AppWatcher The entry point API for using ObjectWatcher in an Android app. AppWatcher.objectWatcher is in charge of detecting retained objects, and AppWatcher is auto configured on app start to pass it activity and fragment instances. Call ObjectWatcher.watch on objectWatcher to watch any other object that you expect to be unreachable.","title":"AppWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/#functions","text":"Name Summary appDefaultWatchers [androidJvm] fun appDefaultWatchers (application: Application , reachabilityWatcher: ReachabilityWatcher = objectWatcher): List < InstallableWatcher > Creates a new list of default app InstallableWatcher , created with the passed in reachabilityWatcher (which defaults to objectWatcher ). Once installed, these watchers will pass in to reachabilityWatcher objects that they expect to become weakly reachable. manualInstall [androidJvm] @ JvmOverloads fun manualInstall (application: Application , retainedDelayMillis: Long = TimeUnit.SECONDS.toMillis(5), watchersToInstall: List < InstallableWatcher > = appDefaultWatchers(application)) Enables usage of AppWatcher.objectWatcher which will expect passed in objects to become weakly reachable within retainedDelayMillis ms and if not will trigger LeakCanary (if LeakCanary is in the classpath).","title":"Functions"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/#properties","text":"Name Summary isInstalled [androidJvm] val isInstalled : Boolean objectWatcher [androidJvm] val objectWatcher : ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects. Only set when isInstalled is true. retainedDelayMillis [androidJvm] @ Volatile var retainedDelayMillis : Long","title":"Properties"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/app-default-watchers/","text":"// leakcanary-object-watcher-android-core / leakcanary / AppWatcher / appDefaultWatchers appDefaultWatchers \u00b6 [androidJvm]\\ fun appDefaultWatchers (application: Application , reachabilityWatcher: ReachabilityWatcher = objectWatcher): List < InstallableWatcher > Creates a new list of default app InstallableWatcher , created with the passed in reachabilityWatcher (which defaults to objectWatcher ). Once installed, these watchers will pass in to reachabilityWatcher objects that they expect to become weakly reachable. The passed in reachabilityWatcher should probably delegate to objectWatcher but can be used to filter out specific instances.","title":"App default watchers"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/app-default-watchers/#appdefaultwatchers","text":"[androidJvm]\\ fun appDefaultWatchers (application: Application , reachabilityWatcher: ReachabilityWatcher = objectWatcher): List < InstallableWatcher > Creates a new list of default app InstallableWatcher , created with the passed in reachabilityWatcher (which defaults to objectWatcher ). Once installed, these watchers will pass in to reachabilityWatcher objects that they expect to become weakly reachable. The passed in reachabilityWatcher should probably delegate to objectWatcher but can be used to filter out specific instances.","title":"appDefaultWatchers"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/is-installed/","text":"// leakcanary-object-watcher-android-core / leakcanary / AppWatcher / isInstalled isInstalled \u00b6 [androidJvm]\\ val isInstalled : Boolean See also \u00b6 androidJvm leakcanary.AppWatcher","title":"Is installed"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/is-installed/#isinstalled","text":"[androidJvm]\\ val isInstalled : Boolean","title":"isInstalled"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/is-installed/#see-also","text":"androidJvm leakcanary.AppWatcher","title":"See also"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/manual-install/","text":"// leakcanary-object-watcher-android-core / leakcanary / AppWatcher / manualInstall manualInstall \u00b6 [androidJvm]\\ @ JvmOverloads fun manualInstall (application: Application , retainedDelayMillis: Long = TimeUnit.SECONDS.toMillis(5), watchersToInstall: List < InstallableWatcher > = appDefaultWatchers(application)) Enables usage of AppWatcher.objectWatcher which will expect passed in objects to become weakly reachable within retainedDelayMillis ms and if not will trigger LeakCanary (if LeakCanary is in the classpath). In the main process, this method is automatically called with default parameter values on app startup. You can call this method directly to customize the installation, however you must first disable the automatic call by overriding the leak_canary_watcher_auto_install boolean resource: <?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\\ <resources>\\ <bool name=\u201dleak_canary_watcher_auto_install\u201d>false</bool>\\ </resources> watchersToInstall can be customized to a subset of the default app watchers: val watchersToInstall = AppWatcher.appDefaultWatchers(application)\\ .filter { it !is RootViewWatcher }\\ AppWatcher.manualInstall(\\ application = application,\\ watchersToInstall = watchersToInstall\\ ) watchersToInstall can also be customized to ignore specific instances (e.g. here ignoring leaks of BadSdkLeakingFragment): val watchersToInstall = AppWatcher.appDefaultWatchers(application, ReachabilityWatcher { watchedObject, description ->\\ if (watchedObject !is BadSdkLeakingFragment) {\\ AppWatcher.objectWatcher.expectWeaklyReachable(watchedObject, description)\\ }\\ })\\ AppWatcher.manualInstall(\\ application = application,\\ watchersToInstall = watchersToInstall\\ )","title":"Manual install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/manual-install/#manualinstall","text":"[androidJvm]\\ @ JvmOverloads fun manualInstall (application: Application , retainedDelayMillis: Long = TimeUnit.SECONDS.toMillis(5), watchersToInstall: List < InstallableWatcher > = appDefaultWatchers(application)) Enables usage of AppWatcher.objectWatcher which will expect passed in objects to become weakly reachable within retainedDelayMillis ms and if not will trigger LeakCanary (if LeakCanary is in the classpath). In the main process, this method is automatically called with default parameter values on app startup. You can call this method directly to customize the installation, however you must first disable the automatic call by overriding the leak_canary_watcher_auto_install boolean resource: <?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\\ <resources>\\ <bool name=\u201dleak_canary_watcher_auto_install\u201d>false</bool>\\ </resources> watchersToInstall can be customized to a subset of the default app watchers: val watchersToInstall = AppWatcher.appDefaultWatchers(application)\\ .filter { it !is RootViewWatcher }\\ AppWatcher.manualInstall(\\ application = application,\\ watchersToInstall = watchersToInstall\\ ) watchersToInstall can also be customized to ignore specific instances (e.g. here ignoring leaks of BadSdkLeakingFragment): val watchersToInstall = AppWatcher.appDefaultWatchers(application, ReachabilityWatcher { watchedObject, description ->\\ if (watchedObject !is BadSdkLeakingFragment) {\\ AppWatcher.objectWatcher.expectWeaklyReachable(watchedObject, description)\\ }\\ })\\ AppWatcher.manualInstall(\\ application = application,\\ watchersToInstall = watchersToInstall\\ )","title":"manualInstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/object-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / AppWatcher / objectWatcher objectWatcher \u00b6 [androidJvm]\\ val objectWatcher : ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects. Only set when isInstalled is true.","title":"Object watcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/object-watcher/#objectwatcher","text":"[androidJvm]\\ val objectWatcher : ObjectWatcher The ObjectWatcher used by AppWatcher to detect retained objects. Only set when isInstalled is true.","title":"objectWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/retained-delay-millis/","text":"// leakcanary-object-watcher-android-core / leakcanary / AppWatcher / retainedDelayMillis retainedDelayMillis \u00b6 [androidJvm]\\ @ Volatile var retainedDelayMillis : Long","title":"Retained delay millis"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-app-watcher/retained-delay-millis/#retaineddelaymillis","text":"[androidJvm]\\ @ Volatile var retainedDelayMillis : Long","title":"retainedDelayMillis"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / FragmentAndViewModelWatcher FragmentAndViewModelWatcher \u00b6 [androidJvm]\\ class FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects: Fragments (Support Library, Android X and AOSP) to become weakly reachable soon after they receive the Fragment#onDestroy() callback. Fragment views (Support Library, Android X and AOSP) to become weakly reachable soon after fragments receive the Fragment#onDestroyView() callback. Android X view models (both activity and fragment view models) to become weakly reachable soon after they received the ViewModel#onCleared() callback. Constructors \u00b6 FragmentAndViewModelWatcher [androidJvm] fun FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/#fragmentandviewmodelwatcher","text":"[androidJvm]\\ class FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects: Fragments (Support Library, Android X and AOSP) to become weakly reachable soon after they receive the Fragment#onDestroy() callback. Fragment views (Support Library, Android X and AOSP) to become weakly reachable soon after fragments receive the Fragment#onDestroyView() callback. Android X view models (both activity and fragment view models) to become weakly reachable soon after they received the ViewModel#onCleared() callback.","title":"FragmentAndViewModelWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/#constructors","text":"FragmentAndViewModelWatcher [androidJvm] fun FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher)","title":"Constructors"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/#functions","text":"Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Functions"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/-fragment-and-view-model-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / FragmentAndViewModelWatcher / FragmentAndViewModelWatcher FragmentAndViewModelWatcher \u00b6 [androidJvm]\\ fun FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher)","title":" fragment and view model watcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/-fragment-and-view-model-watcher/#fragmentandviewmodelwatcher","text":"[androidJvm]\\ fun FragmentAndViewModelWatcher (application: Application , reachabilityWatcher: ReachabilityWatcher)","title":"FragmentAndViewModelWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/install/","text":"// leakcanary-object-watcher-android-core / leakcanary / FragmentAndViewModelWatcher / install install \u00b6 [androidJvm]\\ open override fun install ()","title":"Install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/install/#install","text":"[androidJvm]\\ open override fun install ()","title":"install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/uninstall/","text":"// leakcanary-object-watcher-android-core / leakcanary / FragmentAndViewModelWatcher / uninstall uninstall \u00b6 [androidJvm]\\ open override fun uninstall ()","title":"Uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/uninstall/#uninstall","text":"[androidJvm]\\ open override fun uninstall ()","title":"uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/-companion/","text":"// leakcanary-object-watcher-android-core / leakcanary / FragmentAndViewModelWatcher / Companion Companion \u00b6 [androidJvm]\\ object Companion","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-fragment-and-view-model-watcher/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / InstallableWatcher InstallableWatcher \u00b6 [androidJvm]\\ interface InstallableWatcher Functions \u00b6 Name Summary install [androidJvm] abstract fun install () uninstall [androidJvm] abstract fun uninstall () Inheritors \u00b6 Name ActivityWatcher FragmentAndViewModelWatcher RootViewWatcher ServiceWatcher","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/#installablewatcher","text":"[androidJvm]\\ interface InstallableWatcher","title":"InstallableWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/#functions","text":"Name Summary install [androidJvm] abstract fun install () uninstall [androidJvm] abstract fun uninstall ()","title":"Functions"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/#inheritors","text":"Name ActivityWatcher FragmentAndViewModelWatcher RootViewWatcher ServiceWatcher","title":"Inheritors"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/install/","text":"// leakcanary-object-watcher-android-core / leakcanary / InstallableWatcher / install install \u00b6 [androidJvm]\\ abstract fun install ()","title":"Install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/install/#install","text":"[androidJvm]\\ abstract fun install ()","title":"install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/uninstall/","text":"// leakcanary-object-watcher-android-core / leakcanary / InstallableWatcher / uninstall uninstall \u00b6 [androidJvm]\\ abstract fun uninstall ()","title":"Uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-installable-watcher/uninstall/#uninstall","text":"[androidJvm]\\ abstract fun uninstall ()","title":"uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / RootViewWatcher RootViewWatcher \u00b6 [androidJvm]\\ class RootViewWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects root views to become weakly reachable soon after they are removed from the window manager. Constructors \u00b6 RootViewWatcher [androidJvm] fun RootViewWatcher (reachabilityWatcher: ReachabilityWatcher) Functions \u00b6 Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/#rootviewwatcher","text":"[androidJvm]\\ class RootViewWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects root views to become weakly reachable soon after they are removed from the window manager.","title":"RootViewWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/#constructors","text":"RootViewWatcher [androidJvm] fun RootViewWatcher (reachabilityWatcher: ReachabilityWatcher)","title":"Constructors"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/#functions","text":"Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Functions"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/-root-view-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / RootViewWatcher / RootViewWatcher RootViewWatcher \u00b6 [androidJvm]\\ fun RootViewWatcher (reachabilityWatcher: ReachabilityWatcher)","title":" root view watcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/-root-view-watcher/#rootviewwatcher","text":"[androidJvm]\\ fun RootViewWatcher (reachabilityWatcher: ReachabilityWatcher)","title":"RootViewWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/install/","text":"// leakcanary-object-watcher-android-core / leakcanary / RootViewWatcher / install install \u00b6 [androidJvm]\\ open override fun install ()","title":"Install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/install/#install","text":"[androidJvm]\\ open override fun install ()","title":"install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/uninstall/","text":"// leakcanary-object-watcher-android-core / leakcanary / RootViewWatcher / uninstall uninstall \u00b6 [androidJvm]\\ open override fun uninstall ()","title":"Uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-root-view-watcher/uninstall/#uninstall","text":"[androidJvm]\\ open override fun uninstall ()","title":"uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / ServiceWatcher ServiceWatcher \u00b6 [androidJvm]\\ class ServiceWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects services to become weakly reachable soon after they receive the Service.onDestroy callback. Constructors \u00b6 ServiceWatcher [androidJvm] fun ServiceWatcher (reachabilityWatcher: ReachabilityWatcher) Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/#servicewatcher","text":"[androidJvm]\\ class ServiceWatcher (reachabilityWatcher: ReachabilityWatcher) : InstallableWatcher Expects services to become weakly reachable soon after they receive the Service.onDestroy callback.","title":"ServiceWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/#constructors","text":"ServiceWatcher [androidJvm] fun ServiceWatcher (reachabilityWatcher: ReachabilityWatcher)","title":"Constructors"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/#functions","text":"Name Summary install [androidJvm] open override fun install () uninstall [androidJvm] open override fun uninstall ()","title":"Functions"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/-service-watcher/","text":"// leakcanary-object-watcher-android-core / leakcanary / ServiceWatcher / ServiceWatcher ServiceWatcher \u00b6 [androidJvm]\\ fun ServiceWatcher (reachabilityWatcher: ReachabilityWatcher)","title":" service watcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/-service-watcher/#servicewatcher","text":"[androidJvm]\\ fun ServiceWatcher (reachabilityWatcher: ReachabilityWatcher)","title":"ServiceWatcher"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/install/","text":"// leakcanary-object-watcher-android-core / leakcanary / ServiceWatcher / install install \u00b6 [androidJvm]\\ open override fun install ()","title":"Install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/install/#install","text":"[androidJvm]\\ open override fun install ()","title":"install"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/uninstall/","text":"// leakcanary-object-watcher-android-core / leakcanary / ServiceWatcher / uninstall uninstall \u00b6 [androidJvm]\\ open override fun uninstall ()","title":"Uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/uninstall/#uninstall","text":"[androidJvm]\\ open override fun uninstall ()","title":"uninstall"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/-companion/","text":"// leakcanary-object-watcher-android-core / leakcanary / ServiceWatcher / Companion Companion \u00b6 [androidJvm]\\ object Companion","title":"Index"},{"location":"api/leakcanary-object-watcher-android-core/leakcanary/-service-watcher/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/plumber-android-core/leakcanary/","text":"// plumber-android-core / leakcanary Package leakcanary \u00b6 Types \u00b6 Name Summary AndroidLeakFixes [androidJvm] enum AndroidLeakFixes : Enum < AndroidLeakFixes > A collection of hacks to fix leaks in the Android Framework and other Google Android libraries. ViewLocationHolderLeakFix [androidJvm] object ViewLocationHolderLeakFix","title":"Index"},{"location":"api/plumber-android-core/leakcanary/#package-leakcanary","text":"","title":"Package leakcanary"},{"location":"api/plumber-android-core/leakcanary/#types","text":"Name Summary AndroidLeakFixes [androidJvm] enum AndroidLeakFixes : Enum < AndroidLeakFixes > A collection of hacks to fix leaks in the Android Framework and other Google Android libraries. ViewLocationHolderLeakFix [androidJvm] object ViewLocationHolderLeakFix","title":"Types"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes AndroidLeakFixes \u00b6 [androidJvm]\\ enum AndroidLeakFixes : Enum < AndroidLeakFixes > A collection of hacks to fix leaks in the Android Framework and other Google Android libraries. Entries \u00b6 SPELL_CHECKER [androidJvm] SPELL_CHECKER () Every editable TextView has an Editor instance which has a SpellChecker instance. SpellChecker is in charge of displaying the little squiggle spans that show typos. SpellChecker starts a SpellCheckerSession as needed and then closes it when the TextView is detached from the window. A SpellCheckerSession is in charge of communicating with the spell checker service (which lives in another process) through TextServicesManager. IMM_CUR_ROOT_VIEW [androidJvm] IMM_CUR_ROOT_VIEW () When an activity is destroyed, the corresponding ViewRootImpl instance is released and ready to be garbage collected. Some time after that, ViewRootImpl#W receives a windowfocusChanged() callback, which it normally delegates to ViewRootImpl which in turn calls InputMethodManager#onPreWindowFocus which clears InputMethodManager#mCurRootView. IMM_FOCUSED_VIEW [androidJvm] IMM_FOCUSED_VIEW () Fix for https://code.google.com/p/android/issues/detail?id=171190 . VIEW_LOCATION_HOLDER [androidJvm] VIEW_LOCATION_HOLDER () In Android P, ViewLocationHolder has an mRoot field that is not cleared in its clear() method. Introduced in https://github.com/aosp-mirror/platform_frameworks_base/commit /86b326012813f09d8f1de7d6d26c986a909d ACTIVITY_MANAGER [androidJvm] ACTIVITY_MANAGER () Samsung added a static mContext field to ActivityManager, holding a reference to the activity. LAST_HOVERED_VIEW [androidJvm] LAST_HOVERED_VIEW () mLastHoveredView is a static field in TextView that leaks the last hovered view. BUBBLE_POPUP [androidJvm] BUBBLE_POPUP () A static helper for EditText bubble popups leaks a reference to the latest focused view. SAMSUNG_CLIPBOARD_MANAGER [androidJvm] SAMSUNG_CLIPBOARD_MANAGER () ClipboardUIManager is a static singleton that leaks an activity context. This fix makes sure the manager is called with an application context. CONNECTIVITY_MANAGER [androidJvm] CONNECTIVITY_MANAGER () ConnectivityManager has a sInstance field that is set when the first ConnectivityManager instance is created. ConnectivityManager has a mContext field. When calling activity.getSystemService(Context.CONNECTIVITY_SERVICE) , the first ConnectivityManager instance is created with the activity context and stored in sInstance. That activity context then leaks forever. ACCESSIBILITY_NODE_INFO [androidJvm] ACCESSIBILITY_NODE_INFO () Until API 28, AccessibilityNodeInfo has a mOriginalText field that was not properly cleared when instance were put back in the pool. Leak introduced here: https://android.googlesource.com/platform/frameworks/base/+ /193520e3dff5248ddcf8435203bf99d2ba667219%5E%21/core/java/android/view/accessibility /AccessibilityNodeInfo.java FLUSH_HANDLER_THREADS [androidJvm] FLUSH_HANDLER_THREADS () HandlerThread instances keep local reference to their last handled message after recycling it. That message is obtained by a dialog which sets on an OnClickListener on it and then never recycles it, expecting it to be garbage collected but it ends up being held by the HandlerThread. USER_MANAGER [androidJvm] USER_MANAGER () Obtaining the UserManager service ends up calling the hidden UserManager.get() method which stores the context in a singleton UserManager instance and then stores that instance in a static field. TEXT_LINE_POOL [androidJvm] TEXT_LINE_POOL () This flushes the TextLine pool when an activity is destroyed, to prevent memory leaks. MEDIA_SESSION_LEGACY_HELPER [androidJvm] MEDIA_SESSION_LEGACY_HELPER () MediaSessionLegacyHelper is a static singleton and did not use the application context. Introduced in android-5.0.1_r1, fixed in Android 5.1.0_r1. https://github.com/android/platform_frameworks_base/commit/ 9b5257c9c99c4cb541d8e8e78fb04f008b1a9091 Types \u00b6 Name Summary Companion [androidJvm] object Companion Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/#androidleakfixes","text":"[androidJvm]\\ enum AndroidLeakFixes : Enum < AndroidLeakFixes > A collection of hacks to fix leaks in the Android Framework and other Google Android libraries.","title":"AndroidLeakFixes"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/#entries","text":"SPELL_CHECKER [androidJvm] SPELL_CHECKER () Every editable TextView has an Editor instance which has a SpellChecker instance. SpellChecker is in charge of displaying the little squiggle spans that show typos. SpellChecker starts a SpellCheckerSession as needed and then closes it when the TextView is detached from the window. A SpellCheckerSession is in charge of communicating with the spell checker service (which lives in another process) through TextServicesManager. IMM_CUR_ROOT_VIEW [androidJvm] IMM_CUR_ROOT_VIEW () When an activity is destroyed, the corresponding ViewRootImpl instance is released and ready to be garbage collected. Some time after that, ViewRootImpl#W receives a windowfocusChanged() callback, which it normally delegates to ViewRootImpl which in turn calls InputMethodManager#onPreWindowFocus which clears InputMethodManager#mCurRootView. IMM_FOCUSED_VIEW [androidJvm] IMM_FOCUSED_VIEW () Fix for https://code.google.com/p/android/issues/detail?id=171190 . VIEW_LOCATION_HOLDER [androidJvm] VIEW_LOCATION_HOLDER () In Android P, ViewLocationHolder has an mRoot field that is not cleared in its clear() method. Introduced in https://github.com/aosp-mirror/platform_frameworks_base/commit /86b326012813f09d8f1de7d6d26c986a909d ACTIVITY_MANAGER [androidJvm] ACTIVITY_MANAGER () Samsung added a static mContext field to ActivityManager, holding a reference to the activity. LAST_HOVERED_VIEW [androidJvm] LAST_HOVERED_VIEW () mLastHoveredView is a static field in TextView that leaks the last hovered view. BUBBLE_POPUP [androidJvm] BUBBLE_POPUP () A static helper for EditText bubble popups leaks a reference to the latest focused view. SAMSUNG_CLIPBOARD_MANAGER [androidJvm] SAMSUNG_CLIPBOARD_MANAGER () ClipboardUIManager is a static singleton that leaks an activity context. This fix makes sure the manager is called with an application context. CONNECTIVITY_MANAGER [androidJvm] CONNECTIVITY_MANAGER () ConnectivityManager has a sInstance field that is set when the first ConnectivityManager instance is created. ConnectivityManager has a mContext field. When calling activity.getSystemService(Context.CONNECTIVITY_SERVICE) , the first ConnectivityManager instance is created with the activity context and stored in sInstance. That activity context then leaks forever. ACCESSIBILITY_NODE_INFO [androidJvm] ACCESSIBILITY_NODE_INFO () Until API 28, AccessibilityNodeInfo has a mOriginalText field that was not properly cleared when instance were put back in the pool. Leak introduced here: https://android.googlesource.com/platform/frameworks/base/+ /193520e3dff5248ddcf8435203bf99d2ba667219%5E%21/core/java/android/view/accessibility /AccessibilityNodeInfo.java FLUSH_HANDLER_THREADS [androidJvm] FLUSH_HANDLER_THREADS () HandlerThread instances keep local reference to their last handled message after recycling it. That message is obtained by a dialog which sets on an OnClickListener on it and then never recycles it, expecting it to be garbage collected but it ends up being held by the HandlerThread. USER_MANAGER [androidJvm] USER_MANAGER () Obtaining the UserManager service ends up calling the hidden UserManager.get() method which stores the context in a singleton UserManager instance and then stores that instance in a static field. TEXT_LINE_POOL [androidJvm] TEXT_LINE_POOL () This flushes the TextLine pool when an activity is destroyed, to prevent memory leaks. MEDIA_SESSION_LEGACY_HELPER [androidJvm] MEDIA_SESSION_LEGACY_HELPER () MediaSessionLegacyHelper is a static singleton and did not use the application context. Introduced in android-5.0.1_r1, fixed in Android 5.1.0_r1. https://github.com/android/platform_frameworks_base/commit/ 9b5257c9c99c4cb541d8e8e78fb04f008b1a9091","title":"Entries"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / ACCESSIBILITY_NODE_INFO ACCESSIBILITY_NODE_INFO \u00b6 [androidJvm]\\ ACCESSIBILITY_NODE_INFO () Until API 28, AccessibilityNodeInfo has a mOriginalText field that was not properly cleared when instance were put back in the pool. Leak introduced here: https://android.googlesource.com/platform/frameworks/base/+ /193520e3dff5248ddcf8435203bf99d2ba667219%5E%21/core/java/android/view/accessibility /AccessibilityNodeInfo.java Fixed here: https://android.googlesource.com/platform/frameworks/base/+ /6f8ec1fd8c159b09d617ed6d9132658051443c0c Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o/#accessibility_node_info","text":"[androidJvm]\\ ACCESSIBILITY_NODE_INFO () Until API 28, AccessibilityNodeInfo has a mOriginalText field that was not properly cleared when instance were put back in the pool. Leak introduced here: https://android.googlesource.com/platform/frameworks/base/+ /193520e3dff5248ddcf8435203bf99d2ba667219%5E%21/core/java/android/view/accessibility /AccessibilityNodeInfo.java Fixed here: https://android.googlesource.com/platform/frameworks/base/+ /6f8ec1fd8c159b09d617ed6d9132658051443c0c","title":"ACCESSIBILITY_NODE_INFO"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / ACTIVITY_MANAGER ACTIVITY_MANAGER \u00b6 [androidJvm]\\ ACTIVITY_MANAGER () Samsung added a static mContext field to ActivityManager, holding a reference to the activity. This fix clears the field when an activity is destroyed if it refers to this specific activity. Observed here: https://github.com/square/leakcanary/issues/177 Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r/#activity_manager","text":"[androidJvm]\\ ACTIVITY_MANAGER () Samsung added a static mContext field to ActivityManager, holding a reference to the activity. This fix clears the field when an activity is destroyed if it refers to this specific activity. Observed here: https://github.com/square/leakcanary/issues/177","title":"ACTIVITY_MANAGER"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-b-u-b-b-l-e_-p-o-p-u-p/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / BUBBLE_POPUP BUBBLE_POPUP \u00b6 [androidJvm]\\ BUBBLE_POPUP () A static helper for EditText bubble popups leaks a reference to the latest focused view. This fix clears it when the activity is destroyed. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-b-u-b-b-l-e_-p-o-p-u-p/#bubble_popup","text":"[androidJvm]\\ BUBBLE_POPUP () A static helper for EditText bubble popups leaks a reference to the latest focused view. This fix clears it when the activity is destroyed.","title":"BUBBLE_POPUP"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-b-u-b-b-l-e_-p-o-p-u-p/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / CONNECTIVITY_MANAGER CONNECTIVITY_MANAGER \u00b6 [androidJvm]\\ CONNECTIVITY_MANAGER () ConnectivityManager has a sInstance field that is set when the first ConnectivityManager instance is created. ConnectivityManager has a mContext field. When calling activity.getSystemService(Context.CONNECTIVITY_SERVICE) , the first ConnectivityManager instance is created with the activity context and stored in sInstance. That activity context then leaks forever. This fix makes sure the connectivity manager is created with the application context. Tracked here: https://code.google.com/p/android/issues/detail?id=198852 Introduced here: https://github.com/android/platform_frameworks_base/commit/e0bef71662d81caaaa0d7214fb0bef5d39996a69 Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r/#connectivity_manager","text":"[androidJvm]\\ CONNECTIVITY_MANAGER () ConnectivityManager has a sInstance field that is set when the first ConnectivityManager instance is created. ConnectivityManager has a mContext field. When calling activity.getSystemService(Context.CONNECTIVITY_SERVICE) , the first ConnectivityManager instance is created with the activity context and stored in sInstance. That activity context then leaks forever. This fix makes sure the connectivity manager is created with the application context. Tracked here: https://code.google.com/p/android/issues/detail?id=198852 Introduced here: https://github.com/android/platform_frameworks_base/commit/e0bef71662d81caaaa0d7214fb0bef5d39996a69","title":"CONNECTIVITY_MANAGER"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-companion/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / Companion Companion \u00b6 [androidJvm]\\ object Companion Functions \u00b6 Name Summary applyFixes [androidJvm] fun applyFixes (application: Application , fixes: Set < AndroidLeakFixes > = EnumSet.allOf(AndroidLeakFixes::class.java))","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-companion/#functions","text":"Name Summary applyFixes [androidJvm] fun applyFixes (application: Application , fixes: Set < AndroidLeakFixes > = EnumSet.allOf(AndroidLeakFixes::class.java))","title":"Functions"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-companion/apply-fixes/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / Companion / applyFixes applyFixes \u00b6 [androidJvm]\\ fun applyFixes (application: Application , fixes: Set < AndroidLeakFixes > = EnumSet.allOf(AndroidLeakFixes::class.java))","title":"Apply fixes"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-companion/apply-fixes/#applyfixes","text":"[androidJvm]\\ fun applyFixes (application: Application , fixes: Set < AndroidLeakFixes > = EnumSet.allOf(AndroidLeakFixes::class.java))","title":"applyFixes"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-f-l-u-s-h_-h-a-n-d-l-e-r_-t-h-r-e-a-d-s/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / FLUSH_HANDLER_THREADS FLUSH_HANDLER_THREADS \u00b6 [androidJvm]\\ FLUSH_HANDLER_THREADS () HandlerThread instances keep local reference to their last handled message after recycling it. That message is obtained by a dialog which sets on an OnClickListener on it and then never recycles it, expecting it to be garbage collected but it ends up being held by the HandlerThread. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-f-l-u-s-h_-h-a-n-d-l-e-r_-t-h-r-e-a-d-s/#flush_handler_threads","text":"[androidJvm]\\ FLUSH_HANDLER_THREADS () HandlerThread instances keep local reference to their last handled message after recycling it. That message is obtained by a dialog which sets on an OnClickListener on it and then never recycles it, expecting it to be garbage collected but it ends up being held by the HandlerThread.","title":"FLUSH_HANDLER_THREADS"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-f-l-u-s-h_-h-a-n-d-l-e-r_-t-h-r-e-a-d-s/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-i-m-m_-c-u-r_-r-o-o-t_-v-i-e-w/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / IMM_CUR_ROOT_VIEW IMM_CUR_ROOT_VIEW \u00b6 [androidJvm]\\ IMM_CUR_ROOT_VIEW () When an activity is destroyed, the corresponding ViewRootImpl instance is released and ready to be garbage collected. Some time after that, ViewRootImpl#W receives a windowfocusChanged() callback, which it normally delegates to ViewRootImpl which in turn calls InputMethodManager#onPreWindowFocus which clears InputMethodManager#mCurRootView. Unfortunately, since the ViewRootImpl instance is garbage collectable it may be garbage collected before that happens. ViewRootImpl#W has a weak reference on ViewRootImpl, so that weak reference will then return null and the windowfocusChanged() callback will be ignored, leading to InputMethodManager#mCurRootView not being cleared. Filed here: https://issuetracker.google.com/u/0/issues/116078227 Fixed here: https://android.googlesource.com/platform/frameworks/base/+/dff365ef4dc61239fac70953b631e92972a9f41f%5E%21/#F0 InputMethodManager.mCurRootView is part of the unrestricted grey list on Android 9: https://android.googlesource.com/platform/frameworks/base/+/pie-release/config/hiddenapi-light-greylist.txt#6057 Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-i-m-m_-c-u-r_-r-o-o-t_-v-i-e-w/#imm_cur_root_view","text":"[androidJvm]\\ IMM_CUR_ROOT_VIEW () When an activity is destroyed, the corresponding ViewRootImpl instance is released and ready to be garbage collected. Some time after that, ViewRootImpl#W receives a windowfocusChanged() callback, which it normally delegates to ViewRootImpl which in turn calls InputMethodManager#onPreWindowFocus which clears InputMethodManager#mCurRootView. Unfortunately, since the ViewRootImpl instance is garbage collectable it may be garbage collected before that happens. ViewRootImpl#W has a weak reference on ViewRootImpl, so that weak reference will then return null and the windowfocusChanged() callback will be ignored, leading to InputMethodManager#mCurRootView not being cleared. Filed here: https://issuetracker.google.com/u/0/issues/116078227 Fixed here: https://android.googlesource.com/platform/frameworks/base/+/dff365ef4dc61239fac70953b631e92972a9f41f%5E%21/#F0 InputMethodManager.mCurRootView is part of the unrestricted grey list on Android 9: https://android.googlesource.com/platform/frameworks/base/+/pie-release/config/hiddenapi-light-greylist.txt#6057","title":"IMM_CUR_ROOT_VIEW"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-i-m-m_-c-u-r_-r-o-o-t_-v-i-e-w/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-i-m-m_-f-o-c-u-s-e-d_-v-i-e-w/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / IMM_FOCUSED_VIEW IMM_FOCUSED_VIEW \u00b6 [androidJvm]\\ IMM_FOCUSED_VIEW () Fix for https://code.google.com/p/android/issues/detail?id=171190 . When a view that has focus gets detached, we wait for the main thread to be idle and then check if the InputMethodManager is leaking a view. If yes, we tell it that the decor view got focus, which is what happens if you press home and come back from recent apps. This replaces the reference to the detached view with a reference to the decor view. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-i-m-m_-f-o-c-u-s-e-d_-v-i-e-w/#imm_focused_view","text":"[androidJvm]\\ IMM_FOCUSED_VIEW () Fix for https://code.google.com/p/android/issues/detail?id=171190 . When a view that has focus gets detached, we wait for the main thread to be idle and then check if the InputMethodManager is leaking a view. If yes, we tell it that the decor view got focus, which is what happens if you press home and come back from recent apps. This replaces the reference to the detached view with a reference to the decor view.","title":"IMM_FOCUSED_VIEW"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-i-m-m_-f-o-c-u-s-e-d_-v-i-e-w/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / LAST_HOVERED_VIEW LAST_HOVERED_VIEW \u00b6 [androidJvm]\\ LAST_HOVERED_VIEW () mLastHoveredView is a static field in TextView that leaks the last hovered view. This fix clears it when the activity is destroyed. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/#last_hovered_view","text":"[androidJvm]\\ LAST_HOVERED_VIEW () mLastHoveredView is a static field in TextView that leaks the last hovered view. This fix clears it when the activity is destroyed.","title":"LAST_HOVERED_VIEW"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / MEDIA_SESSION_LEGACY_HELPER MEDIA_SESSION_LEGACY_HELPER \u00b6 [androidJvm]\\ MEDIA_SESSION_LEGACY_HELPER () MediaSessionLegacyHelper is a static singleton and did not use the application context. Introduced in android-5.0.1_r1, fixed in Android 5.1.0_r1. https://github.com/android/platform_frameworks_base/commit/ 9b5257c9c99c4cb541d8e8e78fb04f008b1a9091 We fix this leak by invoking MediaSessionLegacyHelper.getHelper() early in the app lifecycle. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r/#media_session_legacy_helper","text":"[androidJvm]\\ MEDIA_SESSION_LEGACY_HELPER () MediaSessionLegacyHelper is a static singleton and did not use the application context. Introduced in android-5.0.1_r1, fixed in Android 5.1.0_r1. https://github.com/android/platform_frameworks_base/commit/ 9b5257c9c99c4cb541d8e8e78fb04f008b1a9091 We fix this leak by invoking MediaSessionLegacyHelper.getHelper() early in the app lifecycle.","title":"MEDIA_SESSION_LEGACY_HELPER"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-s-a-m-s-u-n-g_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / SAMSUNG_CLIPBOARD_MANAGER SAMSUNG_CLIPBOARD_MANAGER \u00b6 [androidJvm]\\ SAMSUNG_CLIPBOARD_MANAGER () ClipboardUIManager is a static singleton that leaks an activity context. This fix makes sure the manager is called with an application context. Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-s-a-m-s-u-n-g_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r/#samsung_clipboard_manager","text":"[androidJvm]\\ SAMSUNG_CLIPBOARD_MANAGER () ClipboardUIManager is a static singleton that leaks an activity context. This fix makes sure the manager is called with an application context.","title":"SAMSUNG_CLIPBOARD_MANAGER"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-s-a-m-s-u-n-g_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-s-p-e-l-l_-c-h-e-c-k-e-r/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / SPELL_CHECKER SPELL_CHECKER \u00b6 [androidJvm]\\ SPELL_CHECKER () Every editable TextView has an Editor instance which has a SpellChecker instance. SpellChecker is in charge of displaying the little squiggle spans that show typos. SpellChecker starts a SpellCheckerSession as needed and then closes it when the TextView is detached from the window. A SpellCheckerSession is in charge of communicating with the spell checker service (which lives in another process) through TextServicesManager. The SpellChecker sends the TextView content to the spell checker service every 400ms, ie every time the service calls back with a result the SpellChecker schedules another check for 400ms later. When the TextView is detached from the window, the spell checker closes the session. In practice, SpellCheckerSessionListenerImpl.mHandler is set to null and when the service calls SpellCheckerSessionListenerImpl.onGetSuggestions or SpellCheckerSessionListenerImpl.onGetSentenceSuggestions back from another process, there\u2019s a null check for SpellCheckerSessionListenerImpl.mHandler and the callback is dropped. Unfortunately, on Android M there\u2019s a race condition in how that\u2019s done. When the service calls back into our app process, the IPC call is received on a binder thread. That\u2019s when the null check happens. If the session is not closed at this point (mHandler not null), the callback is then posted to the main thread. If on the main thread the session is closed after that post but prior to that post being handled, then the post will still be processed, after the session has been closed. When the post is processed, SpellCheckerSession calls back into SpellChecker which in turns schedules a new spell check to be ran in 400ms. The check is an anonymous inner class (SpellChecker$1) stored as SpellChecker.mSpellRunnable and implementing Runnable. It is scheduled by calling View.postDelayed . As we\u2019ve seen, at this point the session may be closed which means that the view has been detached. View.postDelayed behaves differently when a view is detached: instead of posting to the single Handler used by the view hierarchy, it enqueues the Runnable into ViewRootImpl.RunQueue, a static queue that holds on to \u201cactions\u201d to be executed. As soon as a view hierarchy is attached, the ViewRootImpl.RunQueue is processed and emptied. Unfortunately, that means that as long as no view hierarchy is attached, ie as long as there are no activities alive, the actions stay in ViewRootImpl.RunQueue. That means SpellChecker$1 ends up being kept in memory. It holds on to SpellChecker which in turns holds on to the detached TextView and corresponding destroyed activity & view hierarchy. We have a fix for this! When the spell check session is closed, we replace SpellCheckerSession.mSpellCheckerSessionListener (which normally is the SpellChecker) with a no-op implementation. So even if callbacks are enqueued to the main thread handler, these callbacks will call the no-op implementation and SpellChecker will not be scheduling a spell check. Sources to corroborate: https://android.googlesource.com/platform/frameworks/base/+/marshmallow-release /core/java/android/view/textservice/SpellCheckerSession.java /core/java/android/view/textservice/TextServicesManager.java /core/java/android/widget/SpellChecker.java /core/java/android/view/ViewRootImpl.java Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-s-p-e-l-l_-c-h-e-c-k-e-r/#spell_checker","text":"[androidJvm]\\ SPELL_CHECKER () Every editable TextView has an Editor instance which has a SpellChecker instance. SpellChecker is in charge of displaying the little squiggle spans that show typos. SpellChecker starts a SpellCheckerSession as needed and then closes it when the TextView is detached from the window. A SpellCheckerSession is in charge of communicating with the spell checker service (which lives in another process) through TextServicesManager. The SpellChecker sends the TextView content to the spell checker service every 400ms, ie every time the service calls back with a result the SpellChecker schedules another check for 400ms later. When the TextView is detached from the window, the spell checker closes the session. In practice, SpellCheckerSessionListenerImpl.mHandler is set to null and when the service calls SpellCheckerSessionListenerImpl.onGetSuggestions or SpellCheckerSessionListenerImpl.onGetSentenceSuggestions back from another process, there\u2019s a null check for SpellCheckerSessionListenerImpl.mHandler and the callback is dropped. Unfortunately, on Android M there\u2019s a race condition in how that\u2019s done. When the service calls back into our app process, the IPC call is received on a binder thread. That\u2019s when the null check happens. If the session is not closed at this point (mHandler not null), the callback is then posted to the main thread. If on the main thread the session is closed after that post but prior to that post being handled, then the post will still be processed, after the session has been closed. When the post is processed, SpellCheckerSession calls back into SpellChecker which in turns schedules a new spell check to be ran in 400ms. The check is an anonymous inner class (SpellChecker$1) stored as SpellChecker.mSpellRunnable and implementing Runnable. It is scheduled by calling View.postDelayed . As we\u2019ve seen, at this point the session may be closed which means that the view has been detached. View.postDelayed behaves differently when a view is detached: instead of posting to the single Handler used by the view hierarchy, it enqueues the Runnable into ViewRootImpl.RunQueue, a static queue that holds on to \u201cactions\u201d to be executed. As soon as a view hierarchy is attached, the ViewRootImpl.RunQueue is processed and emptied. Unfortunately, that means that as long as no view hierarchy is attached, ie as long as there are no activities alive, the actions stay in ViewRootImpl.RunQueue. That means SpellChecker$1 ends up being kept in memory. It holds on to SpellChecker which in turns holds on to the detached TextView and corresponding destroyed activity & view hierarchy. We have a fix for this! When the spell check session is closed, we replace SpellCheckerSession.mSpellCheckerSessionListener (which normally is the SpellChecker) with a no-op implementation. So even if callbacks are enqueued to the main thread handler, these callbacks will call the no-op implementation and SpellChecker will not be scheduling a spell check. Sources to corroborate: https://android.googlesource.com/platform/frameworks/base/+/marshmallow-release /core/java/android/view/textservice/SpellCheckerSession.java /core/java/android/view/textservice/TextServicesManager.java /core/java/android/widget/SpellChecker.java /core/java/android/view/ViewRootImpl.java","title":"SPELL_CHECKER"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-s-p-e-l-l_-c-h-e-c-k-e-r/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-t-e-x-t_-l-i-n-e_-p-o-o-l/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / TEXT_LINE_POOL TEXT_LINE_POOL \u00b6 [androidJvm]\\ TEXT_LINE_POOL () This flushes the TextLine pool when an activity is destroyed, to prevent memory leaks. The first memory leak has been fixed in android-5.1.0_r1 https://github.com/android/platform_frameworks_base/commit/ 893d6fe48d37f71e683f722457bea646994a10bf Second memory leak: https://github.com/android/platform_frameworks_base/commit/ b3a9bc038d3a218b1dbdf7b5668e3d6c12be5ee4 Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-t-e-x-t_-l-i-n-e_-p-o-o-l/#text_line_pool","text":"[androidJvm]\\ TEXT_LINE_POOL () This flushes the TextLine pool when an activity is destroyed, to prevent memory leaks. The first memory leak has been fixed in android-5.1.0_r1 https://github.com/android/platform_frameworks_base/commit/ 893d6fe48d37f71e683f722457bea646994a10bf Second memory leak: https://github.com/android/platform_frameworks_base/commit/ b3a9bc038d3a218b1dbdf7b5668e3d6c12be5ee4","title":"TEXT_LINE_POOL"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-t-e-x-t_-l-i-n-e_-p-o-o-l/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-u-s-e-r_-m-a-n-a-g-e-r/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / USER_MANAGER USER_MANAGER \u00b6 [androidJvm]\\ USER_MANAGER () Obtaining the UserManager service ends up calling the hidden UserManager.get() method which stores the context in a singleton UserManager instance and then stores that instance in a static field. We obtain the user manager from an activity context, so if it hasn\u2019t been created yet it will leak that activity forever. This fix makes sure the UserManager is created and holds on to the Application context. Issue: https://code.google.com/p/android/issues/detail?id=173789 Fixed in https://android.googlesource.com/platform/frameworks/base/+/ 5200e1cb07190a1f6874d72a4561064cad3ee3e0%5E%21/#F0 (Android O) Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-u-s-e-r_-m-a-n-a-g-e-r/#user_manager","text":"[androidJvm]\\ USER_MANAGER () Obtaining the UserManager service ends up calling the hidden UserManager.get() method which stores the context in a singleton UserManager instance and then stores that instance in a static field. We obtain the user manager from an activity context, so if it hasn\u2019t been created yet it will leak that activity forever. This fix makes sure the UserManager is created and holds on to the Application context. Issue: https://code.google.com/p/android/issues/detail?id=173789 Fixed in https://android.googlesource.com/platform/frameworks/base/+/ 5200e1cb07190a1f6874d72a4561064cad3ee3e0%5E%21/#F0 (Android O)","title":"USER_MANAGER"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-u-s-e-r_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-v-i-e-w_-l-o-c-a-t-i-o-n_-h-o-l-d-e-r/","text":"// plumber-android-core / leakcanary / AndroidLeakFixes / VIEW_LOCATION_HOLDER VIEW_LOCATION_HOLDER \u00b6 [androidJvm]\\ VIEW_LOCATION_HOLDER () In Android P, ViewLocationHolder has an mRoot field that is not cleared in its clear() method. Introduced in https://github.com/aosp-mirror/platform_frameworks_base/commit /86b326012813f09d8f1de7d6d26c986a909d This leaks triggers very often when accessibility is on. To fix this leak we need to clear the ViewGroup.ViewLocationHolder.sPool pool. Unfortunately Android P prevents accessing that field through reflection. So instead, we call ViewGroup#addChildrenForAccessibility with a view group that has 32 children (32 being the pool size), which as result fills in the pool with 32 dumb views that reference a dummy context instead of an activity context. This fix empties the pool on every activity destroy and every AndroidX fragment view destroy. You can support other cases where views get detached by calling directly ViewLocationHolderLeakFix.clearStaticPool . Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-v-i-e-w_-l-o-c-a-t-i-o-n_-h-o-l-d-e-r/#view_location_holder","text":"[androidJvm]\\ VIEW_LOCATION_HOLDER () In Android P, ViewLocationHolder has an mRoot field that is not cleared in its clear() method. Introduced in https://github.com/aosp-mirror/platform_frameworks_base/commit /86b326012813f09d8f1de7d6d26c986a909d This leaks triggers very often when accessibility is on. To fix this leak we need to clear the ViewGroup.ViewLocationHolder.sPool pool. Unfortunately Android P prevents accessing that field through reflection. So instead, we call ViewGroup#addChildrenForAccessibility with a view group that has 32 children (32 being the pool size), which as result fills in the pool with 32 dumb views that reference a dummy context instead of an activity context. This fix empties the pool on every activity destroy and every AndroidX fragment view destroy. You can support other cases where views get detached by calling directly ViewLocationHolderLeakFix.clearStaticPool .","title":"VIEW_LOCATION_HOLDER"},{"location":"api/plumber-android-core/leakcanary/-android-leak-fixes/-v-i-e-w_-l-o-c-a-t-i-o-n_-h-o-l-d-e-r/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/plumber-android-core/leakcanary/-view-location-holder-leak-fix/","text":"// plumber-android-core / leakcanary / ViewLocationHolderLeakFix ViewLocationHolderLeakFix \u00b6 [androidJvm]\\ object ViewLocationHolderLeakFix See also \u00b6 androidJvm leakcanary.AndroidLeakFixes.VIEW_LOCATION_HOLDER . Functions \u00b6 Name Summary clearStaticPool [androidJvm] fun clearStaticPool (application: Application ) Clears the ViewGroup.ViewLocationHolder.sPool static pool.","title":"Index"},{"location":"api/plumber-android-core/leakcanary/-view-location-holder-leak-fix/#viewlocationholderleakfix","text":"[androidJvm]\\ object ViewLocationHolderLeakFix","title":"ViewLocationHolderLeakFix"},{"location":"api/plumber-android-core/leakcanary/-view-location-holder-leak-fix/#see-also","text":"androidJvm leakcanary.AndroidLeakFixes.VIEW_LOCATION_HOLDER .","title":"See also"},{"location":"api/plumber-android-core/leakcanary/-view-location-holder-leak-fix/#functions","text":"Name Summary clearStaticPool [androidJvm] fun clearStaticPool (application: Application ) Clears the ViewGroup.ViewLocationHolder.sPool static pool.","title":"Functions"},{"location":"api/plumber-android-core/leakcanary/-view-location-holder-leak-fix/clear-static-pool/","text":"// plumber-android-core / leakcanary / ViewLocationHolderLeakFix / clearStaticPool clearStaticPool \u00b6 [androidJvm]\\ fun clearStaticPool (application: Application ) Clears the ViewGroup.ViewLocationHolder.sPool static pool.","title":"Clear static pool"},{"location":"api/plumber-android-core/leakcanary/-view-location-holder-leak-fix/clear-static-pool/#clearstaticpool","text":"[androidJvm]\\ fun clearStaticPool (application: Application ) Clears the ViewGroup.ViewLocationHolder.sPool static pool.","title":"clearStaticPool"},{"location":"api/shark/shark/","text":"// shark / shark Package shark \u00b6 Types \u00b6 Name Summary ApplicationLeak [jvm] data class ApplicationLeak (leakTraces: List < LeakTrace >) : Leak A leak found by HeapAnalyzer in your application. AppSingletonInspector [jvm] class AppSingletonInspector (singletonClasses: String ) : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. FilteringLeakingObjectFinder [jvm] class FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >) : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter HeapAnalysis [jvm] sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. HeapAnalysisException [jvm] class HeapAnalysisException (cause: Throwable ) : RuntimeException HeapAnalysisFailure [jvm] data class HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess [jvm] data class HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >) : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . HeapAnalyzer [jvm] class HeapAnalyzer (listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks. IgnoredReferenceMatcher [jvm] class IgnoredReferenceMatcher (pattern: ReferencePattern ) : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. KeyedWeakReferenceFinder [jvm] object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. Leak [jvm] sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . LeakingObjectFinder [jvm] fun interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. LeakTrace [jvm] data class LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject ) : Serializable The best strong reference path from a GC root to the leaking object. \u201cBest\u201d here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don\u2019t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it\u2019s more interesting to find other paths causing leaks), then it prioritize paths that don\u2019t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. LeakTraceObject [jvm] data class LeakTraceObject (type: LeakTraceObject.ObjectType , className: String , labels: Set < String >, leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String , retainedHeapByteSize: Int ?, retainedObjectCount: Int ?) : Serializable LeakTraceReference [jvm] data class LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String ) : Serializable A LeakTraceReference represents an origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . LibraryLeak [jvm] data class LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String ) : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. LibraryLeakReferenceMatcher [jvm] data class LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String , patternApplies: (HeapGraph) -> Boolean ) : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . MetadataExtractor [jvm] fun interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . ObjectInspector [jvm] fun interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. ObjectInspectors [jvm] enum ObjectInspectors : Enum < ObjectInspectors > , ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. ObjectReporter [jvm] class ObjectReporter (heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. OnAnalysisProgressListener [jvm] fun interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. ReferenceMatcher [jvm] sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). ReferencePattern [jvm] sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher .","title":"Shark"},{"location":"api/shark/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark/shark/#types","text":"Name Summary ApplicationLeak [jvm] data class ApplicationLeak (leakTraces: List < LeakTrace >) : Leak A leak found by HeapAnalyzer in your application. AppSingletonInspector [jvm] class AppSingletonInspector (singletonClasses: String ) : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. FilteringLeakingObjectFinder [jvm] class FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >) : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter HeapAnalysis [jvm] sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. HeapAnalysisException [jvm] class HeapAnalysisException (cause: Throwable ) : RuntimeException HeapAnalysisFailure [jvm] data class HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. HeapAnalysisSuccess [jvm] data class HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >) : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . HeapAnalyzer [jvm] class HeapAnalyzer (listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks. IgnoredReferenceMatcher [jvm] class IgnoredReferenceMatcher (pattern: ReferencePattern ) : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. KeyedWeakReferenceFinder [jvm] object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. Leak [jvm] sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . LeakingObjectFinder [jvm] fun interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. LeakTrace [jvm] data class LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject ) : Serializable The best strong reference path from a GC root to the leaking object. \u201cBest\u201d here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don\u2019t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it\u2019s more interesting to find other paths causing leaks), then it prioritize paths that don\u2019t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. LeakTraceObject [jvm] data class LeakTraceObject (type: LeakTraceObject.ObjectType , className: String , labels: Set < String >, leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String , retainedHeapByteSize: Int ?, retainedObjectCount: Int ?) : Serializable LeakTraceReference [jvm] data class LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String ) : Serializable A LeakTraceReference represents an origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . LibraryLeak [jvm] data class LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String ) : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. LibraryLeakReferenceMatcher [jvm] data class LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String , patternApplies: (HeapGraph) -> Boolean ) : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . MetadataExtractor [jvm] fun interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . ObjectInspector [jvm] fun interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. ObjectInspectors [jvm] enum ObjectInspectors : Enum < ObjectInspectors > , ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. ObjectReporter [jvm] class ObjectReporter (heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. OnAnalysisProgressListener [jvm] fun interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. ReferenceMatcher [jvm] sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). ReferencePattern [jvm] sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher .","title":"Types"},{"location":"api/shark/shark/-app-singleton-inspector/","text":"// shark / shark / AppSingletonInspector AppSingletonInspector \u00b6 [jvm]\\ class AppSingletonInspector (singletonClasses: String ) : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons. Constructors \u00b6 AppSingletonInspector [jvm] fun AppSingletonInspector (vararg singletonClasses: String ) Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter )","title":"Index"},{"location":"api/shark/shark/-app-singleton-inspector/#appsingletoninspector","text":"[jvm]\\ class AppSingletonInspector (singletonClasses: String ) : ObjectInspector Inspector that automatically marks instances of the provided class names as not leaking because they\u2019re app wide singletons.","title":"AppSingletonInspector"},{"location":"api/shark/shark/-app-singleton-inspector/#constructors","text":"AppSingletonInspector [jvm] fun AppSingletonInspector (vararg singletonClasses: String )","title":"Constructors"},{"location":"api/shark/shark/-app-singleton-inspector/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-app-singleton-inspector/-app-singleton-inspector/","text":"// shark / shark / AppSingletonInspector / AppSingletonInspector AppSingletonInspector \u00b6 [jvm]\\ fun AppSingletonInspector (vararg singletonClasses: String )","title":" app singleton inspector"},{"location":"api/shark/shark/-app-singleton-inspector/-app-singleton-inspector/#appsingletoninspector","text":"[jvm]\\ fun AppSingletonInspector (vararg singletonClasses: String )","title":"AppSingletonInspector"},{"location":"api/shark/shark/-app-singleton-inspector/inspect/","text":"// shark / shark / AppSingletonInspector / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter ) See also \u00b6 jvm shark.ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-app-singleton-inspector/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter )","title":"inspect"},{"location":"api/shark/shark/-app-singleton-inspector/inspect/#see-also","text":"jvm shark.ObjectInspector","title":"See also"},{"location":"api/shark/shark/-application-leak/","text":"// shark / shark / ApplicationLeak ApplicationLeak \u00b6 [jvm]\\ data class ApplicationLeak (leakTraces: List < LeakTrace >) : Leak A leak found by HeapAnalyzer in your application. Constructors \u00b6 ApplicationLeak [jvm] fun ApplicationLeak (leakTraces: List < LeakTrace >) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary leakTraces [jvm] open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature. shortDescription [jvm] open override val shortDescription : String signature [jvm] open override val signature : String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize [jvm] val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. totalRetainedObjectCount [jvm] val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Index"},{"location":"api/shark/shark/-application-leak/#applicationleak","text":"[jvm]\\ data class ApplicationLeak (leakTraces: List < LeakTrace >) : Leak A leak found by HeapAnalyzer in your application.","title":"ApplicationLeak"},{"location":"api/shark/shark/-application-leak/#constructors","text":"ApplicationLeak [jvm] fun ApplicationLeak (leakTraces: List < LeakTrace >)","title":"Constructors"},{"location":"api/shark/shark/-application-leak/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-application-leak/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-application-leak/#properties","text":"Name Summary leakTraces [jvm] open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature. shortDescription [jvm] open override val shortDescription : String signature [jvm] open override val signature : String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize [jvm] val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. totalRetainedObjectCount [jvm] val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Properties"},{"location":"api/shark/shark/-application-leak/-application-leak/","text":"// shark / shark / ApplicationLeak / ApplicationLeak ApplicationLeak \u00b6 [jvm]\\ fun ApplicationLeak (leakTraces: List < LeakTrace >)","title":" application leak"},{"location":"api/shark/shark/-application-leak/-application-leak/#applicationleak","text":"[jvm]\\ fun ApplicationLeak (leakTraces: List < LeakTrace >)","title":"ApplicationLeak"},{"location":"api/shark/shark/-application-leak/leak-traces/","text":"// shark / shark / ApplicationLeak / leakTraces leakTraces \u00b6 [jvm]\\ open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature.","title":"Leak traces"},{"location":"api/shark/shark/-application-leak/leak-traces/#leaktraces","text":"[jvm]\\ open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature.","title":"leakTraces"},{"location":"api/shark/shark/-application-leak/short-description/","text":"// shark / shark / ApplicationLeak / shortDescription shortDescription \u00b6 [jvm]\\ open override val shortDescription : String","title":"Short description"},{"location":"api/shark/shark/-application-leak/short-description/#shortdescription","text":"[jvm]\\ open override val shortDescription : String","title":"shortDescription"},{"location":"api/shark/shark/-application-leak/signature/","text":"// shark / shark / ApplicationLeak / signature signature \u00b6 [jvm]\\ open override val signature : String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"Signature"},{"location":"api/shark/shark/-application-leak/signature/#signature","text":"[jvm]\\ open override val signature : String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"signature"},{"location":"api/shark/shark/-application-leak/to-string/","text":"// shark / shark / ApplicationLeak / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-application-leak/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-application-leak/-companion/","text":"// shark / shark / ApplicationLeak / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-application-leak/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-filtering-leaking-object-finder/","text":"// shark / shark / FilteringLeakingObjectFinder FilteringLeakingObjectFinder \u00b6 [jvm]\\ class FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >) : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter Constructors \u00b6 FilteringLeakingObjectFinder [jvm] fun FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >) Types \u00b6 Name Summary LeakingObjectFilter [jvm] fun interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor. Functions \u00b6 Name Summary findLeakingObjectIds [jvm] open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Index"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#filteringleakingobjectfinder","text":"[jvm]\\ class FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >) : LeakingObjectFinder Finds the objects that are leaking by scanning all objects in the heap dump and delegating the decision to a list of FilteringLeakingObjectFinder.LeakingObjectFilter","title":"FilteringLeakingObjectFinder"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#constructors","text":"FilteringLeakingObjectFinder [jvm] fun FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >)","title":"Constructors"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#types","text":"Name Summary LeakingObjectFilter [jvm] fun interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor.","title":"Types"},{"location":"api/shark/shark/-filtering-leaking-object-finder/#functions","text":"Name Summary findLeakingObjectIds [jvm] open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Functions"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-filtering-leaking-object-finder/","text":"// shark / shark / FilteringLeakingObjectFinder / FilteringLeakingObjectFinder FilteringLeakingObjectFinder \u00b6 [jvm]\\ fun FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >)","title":" filtering leaking object finder"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-filtering-leaking-object-finder/#filteringleakingobjectfinder","text":"[jvm]\\ fun FilteringLeakingObjectFinder (filters: List < FilteringLeakingObjectFinder.LeakingObjectFilter >)","title":"FilteringLeakingObjectFinder"},{"location":"api/shark/shark/-filtering-leaking-object-finder/find-leaking-object-ids/","text":"// shark / shark / FilteringLeakingObjectFinder / findLeakingObjectIds findLeakingObjectIds \u00b6 [jvm]\\ open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Find leaking object ids"},{"location":"api/shark/shark/-filtering-leaking-object-finder/find-leaking-object-ids/#findleakingobjectids","text":"[jvm]\\ open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"findLeakingObjectIds"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/","text":"// shark / shark / FilteringLeakingObjectFinder / LeakingObjectFilter LeakingObjectFilter \u00b6 [jvm]\\ fun interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor. Functions \u00b6 Name Summary isLeakingObject [jvm] abstract fun isLeakingObject (heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we\u2019re 100% sure the passed in heapObject should not be in memory anymore.","title":"Index"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/#leakingobjectfilter","text":"[jvm]\\ fun interface LeakingObjectFilter Filter to be passed to the FilteringLeakingObjectFinder constructor.","title":"LeakingObjectFilter"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/#functions","text":"Name Summary isLeakingObject [jvm] abstract fun isLeakingObject (heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we\u2019re 100% sure the passed in heapObject should not be in memory anymore.","title":"Functions"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/is-leaking-object/","text":"// shark / shark / FilteringLeakingObjectFinder / LeakingObjectFilter / isLeakingObject isLeakingObject \u00b6 [jvm]\\ abstract fun isLeakingObject (heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we\u2019re 100% sure the passed in heapObject should not be in memory anymore.","title":"Is leaking object"},{"location":"api/shark/shark/-filtering-leaking-object-finder/-leaking-object-filter/is-leaking-object/#isleakingobject","text":"[jvm]\\ abstract fun isLeakingObject (heapObject: HeapObject): Boolean Returns whether the passed in heapObject is leaking. This should only return true when we\u2019re 100% sure the passed in heapObject should not be in memory anymore.","title":"isLeakingObject"},{"location":"api/shark/shark/-heap-analysis/","text":"// shark / shark / HeapAnalysis HeapAnalysis \u00b6 [jvm]\\ sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility. Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary analysisDurationMillis [jvm] abstract val analysisDurationMillis : Long Total time spent analyzing the heap. createdAtTimeMillis [jvm] abstract val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created. dumpDurationMillis [jvm] abstract val dumpDurationMillis : Long Total time spent dumping the heap. heapDumpFile [jvm] abstract val heapDumpFile : File The hprof file that was analyzed. Inheritors \u00b6 Name HeapAnalysisFailure HeapAnalysisSuccess","title":"Index"},{"location":"api/shark/shark/-heap-analysis/#heapanalysis","text":"[jvm]\\ sealed class HeapAnalysis : Serializable The result of an analysis performed by HeapAnalyzer , either a HeapAnalysisSuccess or a HeapAnalysisFailure . This class is serializable however there are no guarantees of forward compatibility.","title":"HeapAnalysis"},{"location":"api/shark/shark/-heap-analysis/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-heap-analysis/#properties","text":"Name Summary analysisDurationMillis [jvm] abstract val analysisDurationMillis : Long Total time spent analyzing the heap. createdAtTimeMillis [jvm] abstract val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created. dumpDurationMillis [jvm] abstract val dumpDurationMillis : Long Total time spent dumping the heap. heapDumpFile [jvm] abstract val heapDumpFile : File The hprof file that was analyzed.","title":"Properties"},{"location":"api/shark/shark/-heap-analysis/#inheritors","text":"Name HeapAnalysisFailure HeapAnalysisSuccess","title":"Inheritors"},{"location":"api/shark/shark/-heap-analysis/analysis-duration-millis/","text":"// shark / shark / HeapAnalysis / analysisDurationMillis analysisDurationMillis \u00b6 [jvm]\\ abstract val analysisDurationMillis : Long Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis/analysis-duration-millis/#analysisdurationmillis","text":"[jvm]\\ abstract val analysisDurationMillis : Long Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis/created-at-time-millis/","text":"// shark / shark / HeapAnalysis / createdAtTimeMillis createdAtTimeMillis \u00b6 [jvm]\\ abstract val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis/created-at-time-millis/#createdattimemillis","text":"[jvm]\\ abstract val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis/dump-duration-millis/","text":"// shark / shark / HeapAnalysis / dumpDurationMillis dumpDurationMillis \u00b6 [jvm]\\ abstract val dumpDurationMillis : Long Total time spent dumping the heap.","title":"Dump duration millis"},{"location":"api/shark/shark/-heap-analysis/dump-duration-millis/#dumpdurationmillis","text":"[jvm]\\ abstract val dumpDurationMillis : Long Total time spent dumping the heap.","title":"dumpDurationMillis"},{"location":"api/shark/shark/-heap-analysis/heap-dump-file/","text":"// shark / shark / HeapAnalysis / heapDumpFile heapDumpFile \u00b6 [jvm]\\ abstract val heapDumpFile : File The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis/heap-dump-file/#heapdumpfile","text":"[jvm]\\ abstract val heapDumpFile : File The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis/-companion/","text":"// shark / shark / HeapAnalysis / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary DUMP_DURATION_UNKNOWN [jvm] const val DUMP_DURATION_UNKNOWN : Long","title":"Index"},{"location":"api/shark/shark/-heap-analysis/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-heap-analysis/-companion/#properties","text":"Name Summary DUMP_DURATION_UNKNOWN [jvm] const val DUMP_DURATION_UNKNOWN : Long","title":"Properties"},{"location":"api/shark/shark/-heap-analysis/-companion/-d-u-m-p_-d-u-r-a-t-i-o-n_-u-n-k-n-o-w-n/","text":"// shark / shark / HeapAnalysis / Companion / DUMP_DURATION_UNKNOWN DUMP_DURATION_UNKNOWN \u00b6 [jvm]\\ const val DUMP_DURATION_UNKNOWN : Long","title":" d u m p  d u r a t i o n  u n k n o w n"},{"location":"api/shark/shark/-heap-analysis/-companion/-d-u-m-p_-d-u-r-a-t-i-o-n_-u-n-k-n-o-w-n/#dump_duration_unknown","text":"[jvm]\\ const val DUMP_DURATION_UNKNOWN : Long","title":"DUMP_DURATION_UNKNOWN"},{"location":"api/shark/shark/-heap-analysis-exception/","text":"// shark / shark / HeapAnalysisException HeapAnalysisException \u00b6 [jvm]\\ class HeapAnalysisException (cause: Throwable ) : RuntimeException Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/shark/shark/-heap-analysis-exception/#heapanalysisexception","text":"[jvm]\\ class HeapAnalysisException (cause: Throwable ) : RuntimeException","title":"HeapAnalysisException"},{"location":"api/shark/shark/-heap-analysis-exception/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-heap-analysis-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/shark/shark/-heap-analysis-exception/-heap-analysis-exception/","text":"// shark / shark / HeapAnalysisException / HeapAnalysisException HeapAnalysisException \u00b6 [jvm]\\ fun HeapAnalysisException (cause: Throwable )","title":" heap analysis exception"},{"location":"api/shark/shark/-heap-analysis-exception/-heap-analysis-exception/#heapanalysisexception","text":"[jvm]\\ fun HeapAnalysisException (cause: Throwable )","title":"HeapAnalysisException"},{"location":"api/shark/shark/-heap-analysis-exception/to-string/","text":"// shark / shark / HeapAnalysisException / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-exception/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-exception/-companion/","text":"// shark / shark / HeapAnalysisException / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-heap-analysis-exception/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-heap-analysis-failure/","text":"// shark / shark / HeapAnalysisFailure HeapAnalysisFailure \u00b6 [jvm]\\ data class HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully. Constructors \u00b6 HeapAnalysisFailure [jvm] fun HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , exception: HeapAnalysisException ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary analysisDurationMillis [jvm] open override val analysisDurationMillis : Long Total time spent analyzing the heap. createdAtTimeMillis [jvm] open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created. dumpDurationMillis [jvm] open override val dumpDurationMillis : Long Total time spent dumping the heap. exception [jvm] val exception : HeapAnalysisException An exception wrapping the actual exception that was thrown. heapDumpFile [jvm] open override val heapDumpFile : File The hprof file that was analyzed.","title":"Index"},{"location":"api/shark/shark/-heap-analysis-failure/#heapanalysisfailure","text":"[jvm]\\ data class HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , exception: HeapAnalysisException ) : HeapAnalysis The analysis performed by HeapAnalyzer did not complete successfully.","title":"HeapAnalysisFailure"},{"location":"api/shark/shark/-heap-analysis-failure/#constructors","text":"HeapAnalysisFailure [jvm] fun HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , exception: HeapAnalysisException )","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-failure/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-heap-analysis-failure/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-failure/#properties","text":"Name Summary analysisDurationMillis [jvm] open override val analysisDurationMillis : Long Total time spent analyzing the heap. createdAtTimeMillis [jvm] open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created. dumpDurationMillis [jvm] open override val dumpDurationMillis : Long Total time spent dumping the heap. exception [jvm] val exception : HeapAnalysisException An exception wrapping the actual exception that was thrown. heapDumpFile [jvm] open override val heapDumpFile : File The hprof file that was analyzed.","title":"Properties"},{"location":"api/shark/shark/-heap-analysis-failure/-heap-analysis-failure/","text":"// shark / shark / HeapAnalysisFailure / HeapAnalysisFailure HeapAnalysisFailure \u00b6 [jvm]\\ fun HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , exception: HeapAnalysisException )","title":" heap analysis failure"},{"location":"api/shark/shark/-heap-analysis-failure/-heap-analysis-failure/#heapanalysisfailure","text":"[jvm]\\ fun HeapAnalysisFailure (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , exception: HeapAnalysisException )","title":"HeapAnalysisFailure"},{"location":"api/shark/shark/-heap-analysis-failure/analysis-duration-millis/","text":"// shark / shark / HeapAnalysisFailure / analysisDurationMillis analysisDurationMillis \u00b6 [jvm]\\ open override val analysisDurationMillis : Long Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis-failure/analysis-duration-millis/#analysisdurationmillis","text":"[jvm]\\ open override val analysisDurationMillis : Long Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis-failure/created-at-time-millis/","text":"// shark / shark / HeapAnalysisFailure / createdAtTimeMillis createdAtTimeMillis \u00b6 [jvm]\\ open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis-failure/created-at-time-millis/#createdattimemillis","text":"[jvm]\\ open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis-failure/dump-duration-millis/","text":"// shark / shark / HeapAnalysisFailure / dumpDurationMillis dumpDurationMillis \u00b6 [jvm]\\ open override val dumpDurationMillis : Long Total time spent dumping the heap.","title":"Dump duration millis"},{"location":"api/shark/shark/-heap-analysis-failure/dump-duration-millis/#dumpdurationmillis","text":"[jvm]\\ open override val dumpDurationMillis : Long Total time spent dumping the heap.","title":"dumpDurationMillis"},{"location":"api/shark/shark/-heap-analysis-failure/exception/","text":"// shark / shark / HeapAnalysisFailure / exception exception \u00b6 [jvm]\\ val exception : HeapAnalysisException An exception wrapping the actual exception that was thrown.","title":"Exception"},{"location":"api/shark/shark/-heap-analysis-failure/exception/#exception","text":"[jvm]\\ val exception : HeapAnalysisException An exception wrapping the actual exception that was thrown.","title":"exception"},{"location":"api/shark/shark/-heap-analysis-failure/heap-dump-file/","text":"// shark / shark / HeapAnalysisFailure / heapDumpFile heapDumpFile \u00b6 [jvm]\\ open override val heapDumpFile : File The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis-failure/heap-dump-file/#heapdumpfile","text":"[jvm]\\ open override val heapDumpFile : File The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-failure/to-string/","text":"// shark / shark / HeapAnalysisFailure / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-failure/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-failure/-companion/","text":"// shark / shark / HeapAnalysisFailure / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-heap-analysis-failure/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-heap-analysis-success/","text":"// shark / shark / HeapAnalysisSuccess HeapAnalysisSuccess \u00b6 [jvm]\\ data class HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >) : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer . Constructors \u00b6 HeapAnalysisSuccess [jvm] fun HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary allLeaks [jvm] val allLeaks : Sequence < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list. analysisDurationMillis [jvm] open override val analysisDurationMillis : Long Total time spent analyzing the heap. applicationLeaks [jvm] val applicationLeaks : List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer . createdAtTimeMillis [jvm] open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created. dumpDurationMillis [jvm] open override val dumpDurationMillis : Long Total time spent dumping the heap. heapDumpFile [jvm] open override val heapDumpFile : File The hprof file that was analyzed. libraryLeaks [jvm] val libraryLeaks : List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer . metadata [jvm] val metadata : Map < String , String > unreachableObjects [jvm] val unreachableObjects : List < LeakTraceObject >","title":"Index"},{"location":"api/shark/shark/-heap-analysis-success/#heapanalysissuccess","text":"[jvm]\\ data class HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long , analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >) : HeapAnalysis The result of a successful heap analysis performed by HeapAnalyzer .","title":"HeapAnalysisSuccess"},{"location":"api/shark/shark/-heap-analysis-success/#constructors","text":"HeapAnalysisSuccess [jvm] fun HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >)","title":"Constructors"},{"location":"api/shark/shark/-heap-analysis-success/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-heap-analysis-success/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-heap-analysis-success/#properties","text":"Name Summary allLeaks [jvm] val allLeaks : Sequence < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list. analysisDurationMillis [jvm] open override val analysisDurationMillis : Long Total time spent analyzing the heap. applicationLeaks [jvm] val applicationLeaks : List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer . createdAtTimeMillis [jvm] open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created. dumpDurationMillis [jvm] open override val dumpDurationMillis : Long Total time spent dumping the heap. heapDumpFile [jvm] open override val heapDumpFile : File The hprof file that was analyzed. libraryLeaks [jvm] val libraryLeaks : List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer . metadata [jvm] val metadata : Map < String , String > unreachableObjects [jvm] val unreachableObjects : List < LeakTraceObject >","title":"Properties"},{"location":"api/shark/shark/-heap-analysis-success/-heap-analysis-success/","text":"// shark / shark / HeapAnalysisSuccess / HeapAnalysisSuccess HeapAnalysisSuccess \u00b6 [jvm]\\ fun HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >)","title":" heap analysis success"},{"location":"api/shark/shark/-heap-analysis-success/-heap-analysis-success/#heapanalysissuccess","text":"[jvm]\\ fun HeapAnalysisSuccess (heapDumpFile: File , createdAtTimeMillis: Long , dumpDurationMillis: Long = DUMP_DURATION_UNKNOWN, analysisDurationMillis: Long , metadata: Map < String , String >, applicationLeaks: List < ApplicationLeak >, libraryLeaks: List < LibraryLeak >, unreachableObjects: List < LeakTraceObject >)","title":"HeapAnalysisSuccess"},{"location":"api/shark/shark/-heap-analysis-success/all-leaks/","text":"// shark / shark / HeapAnalysisSuccess / allLeaks allLeaks \u00b6 [jvm]\\ val allLeaks : Sequence < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list.","title":"All leaks"},{"location":"api/shark/shark/-heap-analysis-success/all-leaks/#allleaks","text":"[jvm]\\ val allLeaks : Sequence < Leak > The list of Leak found in the heap dump by HeapAnalyzer , ie all applicationLeaks and all libraryLeaks in one list.","title":"allLeaks"},{"location":"api/shark/shark/-heap-analysis-success/analysis-duration-millis/","text":"// shark / shark / HeapAnalysisSuccess / analysisDurationMillis analysisDurationMillis \u00b6 [jvm]\\ open override val analysisDurationMillis : Long Total time spent analyzing the heap.","title":"Analysis duration millis"},{"location":"api/shark/shark/-heap-analysis-success/analysis-duration-millis/#analysisdurationmillis","text":"[jvm]\\ open override val analysisDurationMillis : Long Total time spent analyzing the heap.","title":"analysisDurationMillis"},{"location":"api/shark/shark/-heap-analysis-success/application-leaks/","text":"// shark / shark / HeapAnalysisSuccess / applicationLeaks applicationLeaks \u00b6 [jvm]\\ val applicationLeaks : List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer .","title":"Application leaks"},{"location":"api/shark/shark/-heap-analysis-success/application-leaks/#applicationleaks","text":"[jvm]\\ val applicationLeaks : List < ApplicationLeak > The list of ApplicationLeak found in the heap dump by HeapAnalyzer .","title":"applicationLeaks"},{"location":"api/shark/shark/-heap-analysis-success/created-at-time-millis/","text":"// shark / shark / HeapAnalysisSuccess / createdAtTimeMillis createdAtTimeMillis \u00b6 [jvm]\\ open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"Created at time millis"},{"location":"api/shark/shark/-heap-analysis-success/created-at-time-millis/#createdattimemillis","text":"[jvm]\\ open override val createdAtTimeMillis : Long The System.currentTimeMillis when this HeapAnalysis instance was created.","title":"createdAtTimeMillis"},{"location":"api/shark/shark/-heap-analysis-success/dump-duration-millis/","text":"// shark / shark / HeapAnalysisSuccess / dumpDurationMillis dumpDurationMillis \u00b6 [jvm]\\ open override val dumpDurationMillis : Long Total time spent dumping the heap.","title":"Dump duration millis"},{"location":"api/shark/shark/-heap-analysis-success/dump-duration-millis/#dumpdurationmillis","text":"[jvm]\\ open override val dumpDurationMillis : Long Total time spent dumping the heap.","title":"dumpDurationMillis"},{"location":"api/shark/shark/-heap-analysis-success/heap-dump-file/","text":"// shark / shark / HeapAnalysisSuccess / heapDumpFile heapDumpFile \u00b6 [jvm]\\ open override val heapDumpFile : File The hprof file that was analyzed.","title":"Heap dump file"},{"location":"api/shark/shark/-heap-analysis-success/heap-dump-file/#heapdumpfile","text":"[jvm]\\ open override val heapDumpFile : File The hprof file that was analyzed.","title":"heapDumpFile"},{"location":"api/shark/shark/-heap-analysis-success/library-leaks/","text":"// shark / shark / HeapAnalysisSuccess / libraryLeaks libraryLeaks \u00b6 [jvm]\\ val libraryLeaks : List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer .","title":"Library leaks"},{"location":"api/shark/shark/-heap-analysis-success/library-leaks/#libraryleaks","text":"[jvm]\\ val libraryLeaks : List < LibraryLeak > The list of LibraryLeak found in the heap dump by HeapAnalyzer .","title":"libraryLeaks"},{"location":"api/shark/shark/-heap-analysis-success/metadata/","text":"// shark / shark / HeapAnalysisSuccess / metadata metadata \u00b6 [jvm]\\ val metadata : Map < String , String >","title":"Metadata"},{"location":"api/shark/shark/-heap-analysis-success/metadata/#metadata","text":"[jvm]\\ val metadata : Map < String , String >","title":"metadata"},{"location":"api/shark/shark/-heap-analysis-success/to-string/","text":"// shark / shark / HeapAnalysisSuccess / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-heap-analysis-success/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-heap-analysis-success/unreachable-objects/","text":"// shark / shark / HeapAnalysisSuccess / unreachableObjects unreachableObjects \u00b6 [jvm]\\ val unreachableObjects : List < LeakTraceObject >","title":"Unreachable objects"},{"location":"api/shark/shark/-heap-analysis-success/unreachable-objects/#unreachableobjects","text":"[jvm]\\ val unreachableObjects : List < LeakTraceObject >","title":"unreachableObjects"},{"location":"api/shark/shark/-heap-analysis-success/-companion/","text":"// shark / shark / HeapAnalysisSuccess / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-heap-analysis-success/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-heap-analyzer/","text":"// shark / shark / HeapAnalyzer HeapAnalyzer \u00b6 [jvm]\\ class HeapAnalyzer (listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks. Constructors \u00b6 HeapAnalyzer [jvm] fun HeapAnalyzer (listener: OnAnalysisProgressListener ) Functions \u00b6 Name Summary analyze [jvm] fun analyze (heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"Index"},{"location":"api/shark/shark/-heap-analyzer/#heapanalyzer","text":"[jvm]\\ class HeapAnalyzer (listener: OnAnalysisProgressListener ) Analyzes heap dumps to look for leaks.","title":"HeapAnalyzer"},{"location":"api/shark/shark/-heap-analyzer/#constructors","text":"HeapAnalyzer [jvm] fun HeapAnalyzer (listener: OnAnalysisProgressListener )","title":"Constructors"},{"location":"api/shark/shark/-heap-analyzer/#functions","text":"Name Summary analyze [jvm] fun analyze (heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"Functions"},{"location":"api/shark/shark/-heap-analyzer/-heap-analyzer/","text":"// shark / shark / HeapAnalyzer / HeapAnalyzer HeapAnalyzer \u00b6 [jvm]\\ fun HeapAnalyzer (listener: OnAnalysisProgressListener )","title":" heap analyzer"},{"location":"api/shark/shark/-heap-analyzer/-heap-analyzer/#heapanalyzer","text":"[jvm]\\ fun HeapAnalyzer (listener: OnAnalysisProgressListener )","title":"HeapAnalyzer"},{"location":"api/shark/shark/-heap-analyzer/analyze/","text":"// shark / shark / HeapAnalyzer / analyze analyze \u00b6 [jvm]\\ fun analyze (heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"Analyze"},{"location":"api/shark/shark/-heap-analyzer/analyze/#analyze","text":"[jvm]\\ fun analyze (heapDumpFile: File , graph: HeapGraph, leakingObjectFinder: LeakingObjectFinder , referenceMatchers: List < ReferenceMatcher > = emptyList(), computeRetainedHeapSize: Boolean = false, objectInspectors: List < ObjectInspector > = emptyList(), metadataExtractor: MetadataExtractor = MetadataExtractor.NO_OP): HeapAnalysis Searches the heap dump for leaking instances and then computes the shortest strong reference path from those instances to the GC roots.","title":"analyze"},{"location":"api/shark/shark/-ignored-reference-matcher/","text":"// shark / shark / IgnoredReferenceMatcher IgnoredReferenceMatcher \u00b6 [jvm]\\ class IgnoredReferenceMatcher (pattern: ReferencePattern ) : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references. Constructors \u00b6 IgnoredReferenceMatcher [jvm] fun IgnoredReferenceMatcher (pattern: ReferencePattern ) Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary pattern [jvm] open override val pattern : ReferencePattern The pattern that references will be matched against.","title":"Index"},{"location":"api/shark/shark/-ignored-reference-matcher/#ignoredreferencematcher","text":"[jvm]\\ class IgnoredReferenceMatcher (pattern: ReferencePattern ) : ReferenceMatcher IgnoredReferenceMatcher should be used to match references that cannot ever create leaks. The shortest path finder will never go through matching references.","title":"IgnoredReferenceMatcher"},{"location":"api/shark/shark/-ignored-reference-matcher/#constructors","text":"IgnoredReferenceMatcher [jvm] fun IgnoredReferenceMatcher (pattern: ReferencePattern )","title":"Constructors"},{"location":"api/shark/shark/-ignored-reference-matcher/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-ignored-reference-matcher/#properties","text":"Name Summary pattern [jvm] open override val pattern : ReferencePattern The pattern that references will be matched against.","title":"Properties"},{"location":"api/shark/shark/-ignored-reference-matcher/-ignored-reference-matcher/","text":"// shark / shark / IgnoredReferenceMatcher / IgnoredReferenceMatcher IgnoredReferenceMatcher \u00b6 [jvm]\\ fun IgnoredReferenceMatcher (pattern: ReferencePattern )","title":" ignored reference matcher"},{"location":"api/shark/shark/-ignored-reference-matcher/-ignored-reference-matcher/#ignoredreferencematcher","text":"[jvm]\\ fun IgnoredReferenceMatcher (pattern: ReferencePattern )","title":"IgnoredReferenceMatcher"},{"location":"api/shark/shark/-ignored-reference-matcher/pattern/","text":"// shark / shark / IgnoredReferenceMatcher / pattern pattern \u00b6 [jvm]\\ open override val pattern : ReferencePattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-ignored-reference-matcher/pattern/#pattern","text":"[jvm]\\ open override val pattern : ReferencePattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-ignored-reference-matcher/to-string/","text":"// shark / shark / IgnoredReferenceMatcher / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-ignored-reference-matcher/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-keyed-weak-reference-finder/","text":"// shark / shark / KeyedWeakReferenceFinder KeyedWeakReferenceFinder \u00b6 [jvm]\\ object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch. Functions \u00b6 Name Summary findLeakingObjectIds [jvm] open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking. heapDumpUptimeMillis [jvm] fun heapDumpUptimeMillis (graph: HeapGraph): Long ?","title":"Index"},{"location":"api/shark/shark/-keyed-weak-reference-finder/#keyedweakreferencefinder","text":"[jvm]\\ object KeyedWeakReferenceFinder : LeakingObjectFinder Finds all objects tracked by a KeyedWeakReference, ie all objects that were passed to ObjectWatcher.watch.","title":"KeyedWeakReferenceFinder"},{"location":"api/shark/shark/-keyed-weak-reference-finder/#functions","text":"Name Summary findLeakingObjectIds [jvm] open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking. heapDumpUptimeMillis [jvm] fun heapDumpUptimeMillis (graph: HeapGraph): Long ?","title":"Functions"},{"location":"api/shark/shark/-keyed-weak-reference-finder/find-leaking-object-ids/","text":"// shark / shark / KeyedWeakReferenceFinder / findLeakingObjectIds findLeakingObjectIds \u00b6 [jvm]\\ open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Find leaking object ids"},{"location":"api/shark/shark/-keyed-weak-reference-finder/find-leaking-object-ids/#findleakingobjectids","text":"[jvm]\\ open override fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"findLeakingObjectIds"},{"location":"api/shark/shark/-keyed-weak-reference-finder/heap-dump-uptime-millis/","text":"// shark / shark / KeyedWeakReferenceFinder / heapDumpUptimeMillis heapDumpUptimeMillis \u00b6 [jvm]\\ fun heapDumpUptimeMillis (graph: HeapGraph): Long ?","title":"Heap dump uptime millis"},{"location":"api/shark/shark/-keyed-weak-reference-finder/heap-dump-uptime-millis/#heapdumpuptimemillis","text":"[jvm]\\ fun heapDumpUptimeMillis (graph: HeapGraph): Long ?","title":"heapDumpUptimeMillis"},{"location":"api/shark/shark/-leak/","text":"// shark / shark / Leak Leak \u00b6 [jvm]\\ sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak . Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary leakTraces [jvm] abstract val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature. shortDescription [jvm] abstract val shortDescription : String signature [jvm] abstract val signature : String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize [jvm] val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. totalRetainedObjectCount [jvm] val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed. Inheritors \u00b6 Name LibraryLeak ApplicationLeak","title":"Index"},{"location":"api/shark/shark/-leak/#leak","text":"[jvm]\\ sealed class Leak : Serializable A leak found by HeapAnalyzer , either an ApplicationLeak or a LibraryLeak .","title":"Leak"},{"location":"api/shark/shark/-leak/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-leak/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-leak/#properties","text":"Name Summary leakTraces [jvm] abstract val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature. shortDescription [jvm] abstract val shortDescription : String signature [jvm] abstract val signature : String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize [jvm] val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. totalRetainedObjectCount [jvm] val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Properties"},{"location":"api/shark/shark/-leak/#inheritors","text":"Name LibraryLeak ApplicationLeak","title":"Inheritors"},{"location":"api/shark/shark/-leak/leak-traces/","text":"// shark / shark / Leak / leakTraces leakTraces \u00b6 [jvm]\\ abstract val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature.","title":"Leak traces"},{"location":"api/shark/shark/-leak/leak-traces/#leaktraces","text":"[jvm]\\ abstract val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature.","title":"leakTraces"},{"location":"api/shark/shark/-leak/short-description/","text":"// shark / shark / Leak / shortDescription shortDescription \u00b6 [jvm]\\ abstract val shortDescription : String","title":"Short description"},{"location":"api/shark/shark/-leak/short-description/#shortdescription","text":"[jvm]\\ abstract val shortDescription : String","title":"shortDescription"},{"location":"api/shark/shark/-leak/signature/","text":"// shark / shark / Leak / signature signature \u00b6 [jvm]\\ abstract val signature : String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"Signature"},{"location":"api/shark/shark/-leak/signature/#signature","text":"[jvm]\\ abstract val signature : String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"signature"},{"location":"api/shark/shark/-leak/to-string/","text":"// shark / shark / Leak / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-leak/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-leak/total-retained-heap-byte-size/","text":"// shark / shark / Leak / totalRetainedHeapByteSize totalRetainedHeapByteSize \u00b6 [jvm]\\ val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Total retained heap byte size"},{"location":"api/shark/shark/-leak/total-retained-heap-byte-size/#totalretainedheapbytesize","text":"[jvm]\\ val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed.","title":"totalRetainedHeapByteSize"},{"location":"api/shark/shark/-leak/total-retained-object-count/","text":"// shark / shark / Leak / totalRetainedObjectCount totalRetainedObjectCount \u00b6 [jvm]\\ val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Total retained object count"},{"location":"api/shark/shark/-leak/total-retained-object-count/#totalretainedobjectcount","text":"[jvm]\\ val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed.","title":"totalRetainedObjectCount"},{"location":"api/shark/shark/-leak/-companion/","text":"// shark / shark / Leak / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-leak/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-leak-trace/","text":"// shark / shark / LeakTrace LeakTrace \u00b6 [jvm]\\ data class LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject ) : Serializable The best strong reference path from a GC root to the leaking object. \u201cBest\u201d here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don\u2019t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it\u2019s more interesting to find other paths causing leaks), then it prioritize paths that don\u2019t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak. Constructors \u00b6 LeakTrace [jvm] fun LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject ) Types \u00b6 Name Summary Companion [jvm] object Companion GcRootType [jvm] enum GcRootType : Enum < LeakTrace.GcRootType > Functions \u00b6 Name Summary referencePathElementIsSuspect [jvm] fun referencePathElementIsSuspect (index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object. toSimplePathString [jvm] fun toSimplePathString (): String toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary gcRootType [jvm] val gcRootType : LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath . leakingObject [jvm] val leakingObject : LeakTraceObject referencePath [jvm] val referencePath : List < LeakTraceReference > retainedHeapByteSize [jvm] val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if the leak was fixed. Null if the retained heap size was not computed. retainedObjectCount [jvm] val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if the leak was fixed. Null if the retained heap size was not computed. signature [jvm] val signature : String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. suspectReferenceSubpath [jvm] val suspectReferenceSubpath : Sequence < LeakTraceReference > A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object.","title":"Index"},{"location":"api/shark/shark/-leak-trace/#leaktrace","text":"[jvm]\\ data class LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject ) : Serializable The best strong reference path from a GC root to the leaking object. \u201cBest\u201d here means the shortest prioritized path. A large number of distinct paths can generally be found leading to a leaking object. Shark prioritizes paths that don\u2019t go through known LibraryLeakReferenceMatcher (because those are known to create leaks so it\u2019s more interesting to find other paths causing leaks), then it prioritize paths that don\u2019t go through java local gc roots (because those are harder to reason about). Taking those priorities into account, finding the shortest path means there are less LeakTraceReference that can be suspected to cause the leak.","title":"LeakTrace"},{"location":"api/shark/shark/-leak-trace/#constructors","text":"LeakTrace [jvm] fun LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject )","title":"Constructors"},{"location":"api/shark/shark/-leak-trace/#types","text":"Name Summary Companion [jvm] object Companion GcRootType [jvm] enum GcRootType : Enum < LeakTrace.GcRootType >","title":"Types"},{"location":"api/shark/shark/-leak-trace/#functions","text":"Name Summary referencePathElementIsSuspect [jvm] fun referencePathElementIsSuspect (index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object. toSimplePathString [jvm] fun toSimplePathString (): String toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-leak-trace/#properties","text":"Name Summary gcRootType [jvm] val gcRootType : LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath . leakingObject [jvm] val leakingObject : LeakTraceObject referencePath [jvm] val referencePath : List < LeakTraceReference > retainedHeapByteSize [jvm] val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if the leak was fixed. Null if the retained heap size was not computed. retainedObjectCount [jvm] val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if the leak was fixed. Null if the retained heap size was not computed. signature [jvm] val signature : String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. suspectReferenceSubpath [jvm] val suspectReferenceSubpath : Sequence < LeakTraceReference > A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object.","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-leak-trace/","text":"// shark / shark / LeakTrace / LeakTrace LeakTrace \u00b6 [jvm]\\ fun LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject )","title":" leak trace"},{"location":"api/shark/shark/-leak-trace/-leak-trace/#leaktrace","text":"[jvm]\\ fun LeakTrace (gcRootType: LeakTrace.GcRootType , referencePath: List < LeakTraceReference >, leakingObject: LeakTraceObject )","title":"LeakTrace"},{"location":"api/shark/shark/-leak-trace/gc-root-type/","text":"// shark / shark / LeakTrace / gcRootType gcRootType \u00b6 [jvm]\\ val gcRootType : LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath .","title":"Gc root type"},{"location":"api/shark/shark/-leak-trace/gc-root-type/#gcroottype","text":"[jvm]\\ val gcRootType : LeakTrace.GcRootType The Garbage Collection root that references the LeakTraceReference.originObject in the first LeakTraceReference of referencePath .","title":"gcRootType"},{"location":"api/shark/shark/-leak-trace/leaking-object/","text":"// shark / shark / LeakTrace / leakingObject leakingObject \u00b6 [jvm]\\ val leakingObject : LeakTraceObject","title":"Leaking object"},{"location":"api/shark/shark/-leak-trace/leaking-object/#leakingobject","text":"[jvm]\\ val leakingObject : LeakTraceObject","title":"leakingObject"},{"location":"api/shark/shark/-leak-trace/reference-path-element-is-suspect/","text":"// shark / shark / LeakTrace / referencePathElementIsSuspect referencePathElementIsSuspect \u00b6 [jvm]\\ fun referencePathElementIsSuspect (index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object.","title":"Reference path element is suspect"},{"location":"api/shark/shark/-leak-trace/reference-path-element-is-suspect/#referencepathelementissuspect","text":"[jvm]\\ fun referencePathElementIsSuspect (index: Int ): Boolean Returns true if the referencePath element at the provided index contains a reference that is suspected to cause the leak, ie if index is greater than or equal to the index of the LeakTraceReference of the last non leaking object and strictly lower than the index of the LeakTraceReference of the first leaking object.","title":"referencePathElementIsSuspect"},{"location":"api/shark/shark/-leak-trace/reference-path/","text":"// shark / shark / LeakTrace / referencePath referencePath \u00b6 [jvm]\\ val referencePath : List < LeakTraceReference >","title":"Reference path"},{"location":"api/shark/shark/-leak-trace/reference-path/#referencepath","text":"[jvm]\\ val referencePath : List < LeakTraceReference >","title":"referencePath"},{"location":"api/shark/shark/-leak-trace/retained-heap-byte-size/","text":"// shark / shark / LeakTrace / retainedHeapByteSize retainedHeapByteSize \u00b6 [jvm]\\ val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if the leak was fixed. Null if the retained heap size was not computed.","title":"Retained heap byte size"},{"location":"api/shark/shark/-leak-trace/retained-heap-byte-size/#retainedheapbytesize","text":"[jvm]\\ val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if the leak was fixed. Null if the retained heap size was not computed.","title":"retainedHeapByteSize"},{"location":"api/shark/shark/-leak-trace/retained-object-count/","text":"// shark / shark / LeakTrace / retainedObjectCount retainedObjectCount \u00b6 [jvm]\\ val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if the leak was fixed. Null if the retained heap size was not computed.","title":"Retained object count"},{"location":"api/shark/shark/-leak-trace/retained-object-count/#retainedobjectcount","text":"[jvm]\\ val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if the leak was fixed. Null if the retained heap size was not computed.","title":"retainedObjectCount"},{"location":"api/shark/shark/-leak-trace/signature/","text":"// shark / shark / LeakTrace / signature signature \u00b6 [jvm]\\ val signature : String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. The signature is a hash of suspectReferenceSubpath .","title":"Signature"},{"location":"api/shark/shark/-leak-trace/signature/#signature","text":"[jvm]\\ val signature : String A SHA1 hash that represents this leak trace. This can be useful to group together similar leak traces. The signature is a hash of suspectReferenceSubpath .","title":"signature"},{"location":"api/shark/shark/-leak-trace/suspect-reference-subpath/","text":"// shark / shark / LeakTrace / suspectReferenceSubpath suspectReferenceSubpath \u00b6 [jvm]\\ val suspectReferenceSubpath : Sequence < LeakTraceReference > A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object.","title":"Suspect reference subpath"},{"location":"api/shark/shark/-leak-trace/suspect-reference-subpath/#suspectreferencesubpath","text":"[jvm]\\ val suspectReferenceSubpath : Sequence < LeakTraceReference > A part of referencePath that contains the references suspected to cause the leak. Starts at the last non leaking object and ends before the first leaking object.","title":"suspectReferenceSubpath"},{"location":"api/shark/shark/-leak-trace/to-simple-path-string/","text":"// shark / shark / LeakTrace / toSimplePathString toSimplePathString \u00b6 [jvm]\\ fun toSimplePathString (): String","title":"To simple path string"},{"location":"api/shark/shark/-leak-trace/to-simple-path-string/#tosimplepathstring","text":"[jvm]\\ fun toSimplePathString (): String","title":"toSimplePathString"},{"location":"api/shark/shark/-leak-trace/to-string/","text":"// shark / shark / LeakTrace / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-leak-trace/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-leak-trace/-companion/","text":"// shark / shark / LeakTrace / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-leak-trace/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/","text":"// shark / shark / LeakTrace / GcRootType GcRootType \u00b6 [jvm]\\ enum GcRootType : Enum < LeakTrace.GcRootType > Entries \u00b6 JNI_MONITOR [jvm] JNI_MONITOR (\u201cRoot JNI monitor\u201d) THREAD_OBJECT [jvm] THREAD_OBJECT (\u201cThread object\u201d) MONITOR_USED [jvm] MONITOR_USED (\u201cMonitor (anything that called the wait() or notify() methods, or that is synchronized.)\u201d) THREAD_BLOCK [jvm] THREAD_BLOCK (\u201cThread block\u201d) STICKY_CLASS [jvm] STICKY_CLASS (\u201cSystem class\u201d) NATIVE_STACK [jvm] NATIVE_STACK (\u201cInput or output parameters in native code\u201d) JAVA_FRAME [jvm] JAVA_FRAME (\u201cJava local variable\u201d) JNI_LOCAL [jvm] JNI_LOCAL (\u201cLocal variable in native code\u201d) JNI_GLOBAL [jvm] JNI_GLOBAL (\u201cGlobal variable in native code\u201d) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#gcroottype","text":"[jvm]\\ enum GcRootType : Enum < LeakTrace.GcRootType >","title":"GcRootType"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#entries","text":"JNI_MONITOR [jvm] JNI_MONITOR (\u201cRoot JNI monitor\u201d) THREAD_OBJECT [jvm] THREAD_OBJECT (\u201cThread object\u201d) MONITOR_USED [jvm] MONITOR_USED (\u201cMonitor (anything that called the wait() or notify() methods, or that is synchronized.)\u201d) THREAD_BLOCK [jvm] THREAD_BLOCK (\u201cThread block\u201d) STICKY_CLASS [jvm] STICKY_CLASS (\u201cSystem class\u201d) NATIVE_STACK [jvm] NATIVE_STACK (\u201cInput or output parameters in native code\u201d) JAVA_FRAME [jvm] JAVA_FRAME (\u201cJava local variable\u201d) JNI_LOCAL [jvm] JNI_LOCAL (\u201cLocal variable in native code\u201d) JNI_GLOBAL [jvm] JNI_GLOBAL (\u201cGlobal variable in native code\u201d)","title":"Entries"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/description/","text":"// shark / shark / LeakTrace / GcRootType / description description \u00b6 [jvm]\\ val description : String","title":"Description"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/description/#description","text":"[jvm]\\ val description : String","title":"description"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-companion/","text":"// shark / shark / LeakTrace / GcRootType / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary fromGcRoot [jvm] fun fromGcRoot (gcRoot: GcRoot): LeakTrace.GcRootType","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-companion/#functions","text":"Name Summary fromGcRoot [jvm] fun fromGcRoot (gcRoot: GcRoot): LeakTrace.GcRootType","title":"Functions"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-companion/from-gc-root/","text":"// shark / shark / LeakTrace / GcRootType / Companion / fromGcRoot fromGcRoot \u00b6 [jvm]\\ fun fromGcRoot (gcRoot: GcRoot): LeakTrace.GcRootType","title":"From gc root"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-companion/from-gc-root/#fromgcroot","text":"[jvm]\\ fun fromGcRoot (gcRoot: GcRoot): LeakTrace.GcRootType","title":"fromGcRoot"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-a-v-a_-f-r-a-m-e/","text":"// shark / shark / LeakTrace / GcRootType / JAVA_FRAME JAVA_FRAME \u00b6 [jvm]\\ JAVA_FRAME (\u201cJava local variable\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-a-v-a_-f-r-a-m-e/#java_frame","text":"[jvm]\\ JAVA_FRAME (\u201cJava local variable\u201d)","title":"JAVA_FRAME"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-a-v-a_-f-r-a-m-e/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-g-l-o-b-a-l/","text":"// shark / shark / LeakTrace / GcRootType / JNI_GLOBAL JNI_GLOBAL \u00b6 [jvm]\\ JNI_GLOBAL (\u201cGlobal variable in native code\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-g-l-o-b-a-l/#jni_global","text":"[jvm]\\ JNI_GLOBAL (\u201cGlobal variable in native code\u201d)","title":"JNI_GLOBAL"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-g-l-o-b-a-l/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-l-o-c-a-l/","text":"// shark / shark / LeakTrace / GcRootType / JNI_LOCAL JNI_LOCAL \u00b6 [jvm]\\ JNI_LOCAL (\u201cLocal variable in native code\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-l-o-c-a-l/#jni_local","text":"[jvm]\\ JNI_LOCAL (\u201cLocal variable in native code\u201d)","title":"JNI_LOCAL"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-l-o-c-a-l/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-m-o-n-i-t-o-r/","text":"// shark / shark / LeakTrace / GcRootType / JNI_MONITOR JNI_MONITOR \u00b6 [jvm]\\ JNI_MONITOR (\u201cRoot JNI monitor\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-m-o-n-i-t-o-r/#jni_monitor","text":"[jvm]\\ JNI_MONITOR (\u201cRoot JNI monitor\u201d)","title":"JNI_MONITOR"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-j-n-i_-m-o-n-i-t-o-r/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-m-o-n-i-t-o-r_-u-s-e-d/","text":"// shark / shark / LeakTrace / GcRootType / MONITOR_USED MONITOR_USED \u00b6 [jvm]\\ MONITOR_USED (\u201cMonitor (anything that called the wait() or notify() methods, or that is synchronized.)\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-m-o-n-i-t-o-r_-u-s-e-d/#monitor_used","text":"[jvm]\\ MONITOR_USED (\u201cMonitor (anything that called the wait() or notify() methods, or that is synchronized.)\u201d)","title":"MONITOR_USED"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-m-o-n-i-t-o-r_-u-s-e-d/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-n-a-t-i-v-e_-s-t-a-c-k/","text":"// shark / shark / LeakTrace / GcRootType / NATIVE_STACK NATIVE_STACK \u00b6 [jvm]\\ NATIVE_STACK (\u201cInput or output parameters in native code\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-n-a-t-i-v-e_-s-t-a-c-k/#native_stack","text":"[jvm]\\ NATIVE_STACK (\u201cInput or output parameters in native code\u201d)","title":"NATIVE_STACK"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-n-a-t-i-v-e_-s-t-a-c-k/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-s-t-i-c-k-y_-c-l-a-s-s/","text":"// shark / shark / LeakTrace / GcRootType / STICKY_CLASS STICKY_CLASS \u00b6 [jvm]\\ STICKY_CLASS (\u201cSystem class\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-s-t-i-c-k-y_-c-l-a-s-s/#sticky_class","text":"[jvm]\\ STICKY_CLASS (\u201cSystem class\u201d)","title":"STICKY_CLASS"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-s-t-i-c-k-y_-c-l-a-s-s/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-b-l-o-c-k/","text":"// shark / shark / LeakTrace / GcRootType / THREAD_BLOCK THREAD_BLOCK \u00b6 [jvm]\\ THREAD_BLOCK (\u201cThread block\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-b-l-o-c-k/#thread_block","text":"[jvm]\\ THREAD_BLOCK (\u201cThread block\u201d)","title":"THREAD_BLOCK"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-b-l-o-c-k/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-o-b-j-e-c-t/","text":"// shark / shark / LeakTrace / GcRootType / THREAD_OBJECT THREAD_OBJECT \u00b6 [jvm]\\ THREAD_OBJECT (\u201cThread object\u201d) Properties \u00b6 Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-o-b-j-e-c-t/#thread_object","text":"[jvm]\\ THREAD_OBJECT (\u201cThread object\u201d)","title":"THREAD_OBJECT"},{"location":"api/shark/shark/-leak-trace/-gc-root-type/-t-h-r-e-a-d_-o-b-j-e-c-t/#properties","text":"Name Summary description [jvm] val description : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/","text":"// shark / shark / LeakTraceObject LeakTraceObject \u00b6 [jvm]\\ data class LeakTraceObject (type: LeakTraceObject.ObjectType , className: String , labels: Set < String >, leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String , retainedHeapByteSize: Int ?, retainedObjectCount: Int ?) : Serializable Types \u00b6 Name Summary Companion [jvm] object Companion LeakingStatus [jvm] enum LeakingStatus : Enum < LeakTraceObject.LeakingStatus > ObjectType [jvm] enum ObjectType : Enum < LeakTraceObject.ObjectType > Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary className [jvm] val className : String Class name of the object. The class name format is the same as what would be returned by Class.getName . classSimpleName [jvm] val classSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included). labels [jvm] val labels : Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object. leakingStatus [jvm] val leakingStatus : LeakTraceObject.LeakingStatus leakingStatusReason [jvm] val leakingStatusReason : String retainedHeapByteSize [jvm] val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING . retainedObjectCount [jvm] val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING . type [jvm] val type : LeakTraceObject.ObjectType typeName [jvm] val typeName : String","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/#leaktraceobject","text":"[jvm]\\ data class LeakTraceObject (type: LeakTraceObject.ObjectType , className: String , labels: Set < String >, leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String , retainedHeapByteSize: Int ?, retainedObjectCount: Int ?) : Serializable","title":"LeakTraceObject"},{"location":"api/shark/shark/-leak-trace-object/#types","text":"Name Summary Companion [jvm] object Companion LeakingStatus [jvm] enum LeakingStatus : Enum < LeakTraceObject.LeakingStatus > ObjectType [jvm] enum ObjectType : Enum < LeakTraceObject.ObjectType >","title":"Types"},{"location":"api/shark/shark/-leak-trace-object/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-leak-trace-object/#properties","text":"Name Summary className [jvm] val className : String Class name of the object. The class name format is the same as what would be returned by Class.getName . classSimpleName [jvm] val classSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included). labels [jvm] val labels : Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object. leakingStatus [jvm] val leakingStatus : LeakTraceObject.LeakingStatus leakingStatusReason [jvm] val leakingStatusReason : String retainedHeapByteSize [jvm] val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING . retainedObjectCount [jvm] val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING . type [jvm] val type : LeakTraceObject.ObjectType typeName [jvm] val typeName : String","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-leak-trace-object/","text":"// shark / shark / LeakTraceObject / LeakTraceObject LeakTraceObject \u00b6 [jvm]\\ fun LeakTraceObject (type: LeakTraceObject.ObjectType , className: String , labels: Set < String >, leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String , retainedHeapByteSize: Int ?, retainedObjectCount: Int ?)","title":" leak trace object"},{"location":"api/shark/shark/-leak-trace-object/-leak-trace-object/#leaktraceobject","text":"[jvm]\\ fun LeakTraceObject (type: LeakTraceObject.ObjectType , className: String , labels: Set < String >, leakingStatus: LeakTraceObject.LeakingStatus , leakingStatusReason: String , retainedHeapByteSize: Int ?, retainedObjectCount: Int ?)","title":"LeakTraceObject"},{"location":"api/shark/shark/-leak-trace-object/class-name/","text":"// shark / shark / LeakTraceObject / className className \u00b6 [jvm]\\ val className : String Class name of the object. The class name format is the same as what would be returned by Class.getName .","title":"Class name"},{"location":"api/shark/shark/-leak-trace-object/class-name/#classname","text":"[jvm]\\ val className : String Class name of the object. The class name format is the same as what would be returned by Class.getName .","title":"className"},{"location":"api/shark/shark/-leak-trace-object/class-simple-name/","text":"// shark / shark / LeakTraceObject / classSimpleName classSimpleName \u00b6 [jvm]\\ val classSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included).","title":"Class simple name"},{"location":"api/shark/shark/-leak-trace-object/class-simple-name/#classsimplename","text":"[jvm]\\ val classSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included).","title":"classSimpleName"},{"location":"api/shark/shark/-leak-trace-object/labels/","text":"// shark / shark / LeakTraceObject / labels labels \u00b6 [jvm]\\ val labels : Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object.","title":"Labels"},{"location":"api/shark/shark/-leak-trace-object/labels/#labels","text":"[jvm]\\ val labels : Set < String > Labels that were computed during analysis. A label provides extra information that helps understand the state of the leak trace object.","title":"labels"},{"location":"api/shark/shark/-leak-trace-object/leaking-status-reason/","text":"// shark / shark / LeakTraceObject / leakingStatusReason leakingStatusReason \u00b6 [jvm]\\ val leakingStatusReason : String","title":"Leaking status reason"},{"location":"api/shark/shark/-leak-trace-object/leaking-status-reason/#leakingstatusreason","text":"[jvm]\\ val leakingStatusReason : String","title":"leakingStatusReason"},{"location":"api/shark/shark/-leak-trace-object/leaking-status/","text":"// shark / shark / LeakTraceObject / leakingStatus leakingStatus \u00b6 [jvm]\\ val leakingStatus : LeakTraceObject.LeakingStatus","title":"Leaking status"},{"location":"api/shark/shark/-leak-trace-object/leaking-status/#leakingstatus","text":"[jvm]\\ val leakingStatus : LeakTraceObject.LeakingStatus","title":"leakingStatus"},{"location":"api/shark/shark/-leak-trace-object/retained-heap-byte-size/","text":"// shark / shark / LeakTraceObject / retainedHeapByteSize retainedHeapByteSize \u00b6 [jvm]\\ val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING .","title":"Retained heap byte size"},{"location":"api/shark/shark/-leak-trace-object/retained-heap-byte-size/#retainedheapbytesize","text":"[jvm]\\ val retainedHeapByteSize : Int ? The minimum number of bytes which would be freed if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING .","title":"retainedHeapByteSize"},{"location":"api/shark/shark/-leak-trace-object/retained-object-count/","text":"// shark / shark / LeakTraceObject / retainedObjectCount retainedObjectCount \u00b6 [jvm]\\ val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING .","title":"Retained object count"},{"location":"api/shark/shark/-leak-trace-object/retained-object-count/#retainedobjectcount","text":"[jvm]\\ val retainedObjectCount : Int ? The minimum number of objects which would be unreachable if all references to this object were released. Not null only if the retained heap size was computed AND leakingStatus is equal to LeakingStatus.UNKNOWN or LeakingStatus.LEAKING .","title":"retainedObjectCount"},{"location":"api/shark/shark/-leak-trace-object/to-string/","text":"// shark / shark / LeakTraceObject / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-leak-trace-object/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-leak-trace-object/type-name/","text":"// shark / shark / LeakTraceObject / typeName typeName \u00b6 [jvm]\\ val typeName : String","title":"Type name"},{"location":"api/shark/shark/-leak-trace-object/type-name/#typename","text":"[jvm]\\ val typeName : String","title":"typeName"},{"location":"api/shark/shark/-leak-trace-object/type/","text":"// shark / shark / LeakTraceObject / type type \u00b6 [jvm]\\ val type : LeakTraceObject.ObjectType","title":"Type"},{"location":"api/shark/shark/-leak-trace-object/type/#type","text":"[jvm]\\ val type : LeakTraceObject.ObjectType","title":"type"},{"location":"api/shark/shark/-leak-trace-object/-companion/","text":"// shark / shark / LeakTraceObject / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/","text":"// shark / shark / LeakTraceObject / LeakingStatus LeakingStatus \u00b6 [jvm]\\ enum LeakingStatus : Enum < LeakTraceObject.LeakingStatus > Entries \u00b6 UNKNOWN [jvm] UNKNOWN () No decision can be made about the provided object. LEAKING [jvm] LEAKING () The object was no longer needed and therefore expected to be unreachable. NOT_LEAKING [jvm] NOT_LEAKING () The object was needed and therefore expected to be reachable. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/#leakingstatus","text":"[jvm]\\ enum LeakingStatus : Enum < LeakTraceObject.LeakingStatus >","title":"LeakingStatus"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/#entries","text":"UNKNOWN [jvm] UNKNOWN () No decision can be made about the provided object. LEAKING [jvm] LEAKING () The object was no longer needed and therefore expected to be unreachable. NOT_LEAKING [jvm] NOT_LEAKING () The object was needed and therefore expected to be reachable.","title":"Entries"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-l-e-a-k-i-n-g/","text":"// shark / shark / LeakTraceObject / LeakingStatus / LEAKING LEAKING \u00b6 [jvm]\\ LEAKING () The object was no longer needed and therefore expected to be unreachable. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-l-e-a-k-i-n-g/#leaking","text":"[jvm]\\ LEAKING () The object was no longer needed and therefore expected to be unreachable.","title":"LEAKING"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-l-e-a-k-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-n-o-t_-l-e-a-k-i-n-g/","text":"// shark / shark / LeakTraceObject / LeakingStatus / NOT_LEAKING NOT_LEAKING \u00b6 [jvm]\\ NOT_LEAKING () The object was needed and therefore expected to be reachable. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-n-o-t_-l-e-a-k-i-n-g/#not_leaking","text":"[jvm]\\ NOT_LEAKING () The object was needed and therefore expected to be reachable.","title":"NOT_LEAKING"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-n-o-t_-l-e-a-k-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-u-n-k-n-o-w-n/","text":"// shark / shark / LeakTraceObject / LeakingStatus / UNKNOWN UNKNOWN \u00b6 [jvm]\\ UNKNOWN () No decision can be made about the provided object. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-u-n-k-n-o-w-n/#unknown","text":"[jvm]\\ UNKNOWN () No decision can be made about the provided object.","title":"UNKNOWN"},{"location":"api/shark/shark/-leak-trace-object/-leaking-status/-u-n-k-n-o-w-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-object-type/","text":"// shark / shark / LeakTraceObject / ObjectType ObjectType \u00b6 [jvm]\\ enum ObjectType : Enum < LeakTraceObject.ObjectType > Entries \u00b6 INSTANCE [jvm] INSTANCE () ARRAY [jvm] ARRAY () CLASS [jvm] CLASS () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-object-type/#objecttype","text":"[jvm]\\ enum ObjectType : Enum < LeakTraceObject.ObjectType >","title":"ObjectType"},{"location":"api/shark/shark/-leak-trace-object/-object-type/#entries","text":"INSTANCE [jvm] INSTANCE () ARRAY [jvm] ARRAY () CLASS [jvm] CLASS ()","title":"Entries"},{"location":"api/shark/shark/-leak-trace-object/-object-type/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-a-r-r-a-y/","text":"// shark / shark / LeakTraceObject / ObjectType / ARRAY ARRAY \u00b6 [jvm]\\ ARRAY () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-a-r-r-a-y/#array","text":"[jvm]\\ ARRAY ()","title":"ARRAY"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-a-r-r-a-y/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-c-l-a-s-s/","text":"// shark / shark / LeakTraceObject / ObjectType / CLASS CLASS \u00b6 [jvm]\\ CLASS () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-c-l-a-s-s/#class","text":"[jvm]\\ CLASS ()","title":"CLASS"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-c-l-a-s-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-i-n-s-t-a-n-c-e/","text":"// shark / shark / LeakTraceObject / ObjectType / INSTANCE INSTANCE \u00b6 [jvm]\\ INSTANCE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-i-n-s-t-a-n-c-e/#instance","text":"[jvm]\\ INSTANCE ()","title":"INSTANCE"},{"location":"api/shark/shark/-leak-trace-object/-object-type/-i-n-s-t-a-n-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-reference/","text":"// shark / shark / LeakTraceReference LeakTraceReference \u00b6 [jvm]\\ data class LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String ) : Serializable A LeakTraceReference represents an origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath . Constructors \u00b6 LeakTraceReference [jvm] fun LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String ) Types \u00b6 Name Summary Companion [jvm] object Companion ReferenceType [jvm] enum ReferenceType : Enum < LeakTraceReference.ReferenceType > Properties \u00b6 Name Summary originObject [jvm] val originObject : LeakTraceObject owningClassName [jvm] val owningClassName : String owningClassSimpleName [jvm] val owningClassSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included). referenceDisplayName [jvm] val referenceDisplayName : String referenceGenericName [jvm] val referenceGenericName : String referenceName [jvm] val referenceName : String referenceType [jvm] val referenceType : LeakTraceReference.ReferenceType","title":"Index"},{"location":"api/shark/shark/-leak-trace-reference/#leaktracereference","text":"[jvm]\\ data class LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String ) : Serializable A LeakTraceReference represents an origin LeakTraceObject and either a reference from that object to the LeakTraceObject in the next LeakTraceReference in LeakTrace.referencePath , or to LeakTrace.leakingObject if this is the last LeakTraceReference in LeakTrace.referencePath .","title":"LeakTraceReference"},{"location":"api/shark/shark/-leak-trace-reference/#constructors","text":"LeakTraceReference [jvm] fun LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String )","title":"Constructors"},{"location":"api/shark/shark/-leak-trace-reference/#types","text":"Name Summary Companion [jvm] object Companion ReferenceType [jvm] enum ReferenceType : Enum < LeakTraceReference.ReferenceType >","title":"Types"},{"location":"api/shark/shark/-leak-trace-reference/#properties","text":"Name Summary originObject [jvm] val originObject : LeakTraceObject owningClassName [jvm] val owningClassName : String owningClassSimpleName [jvm] val owningClassSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included). referenceDisplayName [jvm] val referenceDisplayName : String referenceGenericName [jvm] val referenceGenericName : String referenceName [jvm] val referenceName : String referenceType [jvm] val referenceType : LeakTraceReference.ReferenceType","title":"Properties"},{"location":"api/shark/shark/-leak-trace-reference/-leak-trace-reference/","text":"// shark / shark / LeakTraceReference / LeakTraceReference LeakTraceReference \u00b6 [jvm]\\ fun LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String )","title":" leak trace reference"},{"location":"api/shark/shark/-leak-trace-reference/-leak-trace-reference/#leaktracereference","text":"[jvm]\\ fun LeakTraceReference (originObject: LeakTraceObject , referenceType: LeakTraceReference.ReferenceType , owningClassName: String , referenceName: String )","title":"LeakTraceReference"},{"location":"api/shark/shark/-leak-trace-reference/origin-object/","text":"// shark / shark / LeakTraceReference / originObject originObject \u00b6 [jvm]\\ val originObject : LeakTraceObject","title":"Origin object"},{"location":"api/shark/shark/-leak-trace-reference/origin-object/#originobject","text":"[jvm]\\ val originObject : LeakTraceObject","title":"originObject"},{"location":"api/shark/shark/-leak-trace-reference/owning-class-name/","text":"// shark / shark / LeakTraceReference / owningClassName owningClassName \u00b6 [jvm]\\ val owningClassName : String","title":"Owning class name"},{"location":"api/shark/shark/-leak-trace-reference/owning-class-name/#owningclassname","text":"[jvm]\\ val owningClassName : String","title":"owningClassName"},{"location":"api/shark/shark/-leak-trace-reference/owning-class-simple-name/","text":"// shark / shark / LeakTraceReference / owningClassSimpleName owningClassSimpleName \u00b6 [jvm]\\ val owningClassSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included).","title":"Owning class simple name"},{"location":"api/shark/shark/-leak-trace-reference/owning-class-simple-name/#owningclasssimplename","text":"[jvm]\\ val owningClassSimpleName : String Returns {@link #className} without the package, ie stripped of any string content before the last period (included).","title":"owningClassSimpleName"},{"location":"api/shark/shark/-leak-trace-reference/reference-display-name/","text":"// shark / shark / LeakTraceReference / referenceDisplayName referenceDisplayName \u00b6 [jvm]\\ val referenceDisplayName : String","title":"Reference display name"},{"location":"api/shark/shark/-leak-trace-reference/reference-display-name/#referencedisplayname","text":"[jvm]\\ val referenceDisplayName : String","title":"referenceDisplayName"},{"location":"api/shark/shark/-leak-trace-reference/reference-generic-name/","text":"// shark / shark / LeakTraceReference / referenceGenericName referenceGenericName \u00b6 [jvm]\\ val referenceGenericName : String","title":"Reference generic name"},{"location":"api/shark/shark/-leak-trace-reference/reference-generic-name/#referencegenericname","text":"[jvm]\\ val referenceGenericName : String","title":"referenceGenericName"},{"location":"api/shark/shark/-leak-trace-reference/reference-name/","text":"// shark / shark / LeakTraceReference / referenceName referenceName \u00b6 [jvm]\\ val referenceName : String","title":"Reference name"},{"location":"api/shark/shark/-leak-trace-reference/reference-name/#referencename","text":"[jvm]\\ val referenceName : String","title":"referenceName"},{"location":"api/shark/shark/-leak-trace-reference/reference-type/","text":"// shark / shark / LeakTraceReference / referenceType referenceType \u00b6 [jvm]\\ val referenceType : LeakTraceReference.ReferenceType","title":"Reference type"},{"location":"api/shark/shark/-leak-trace-reference/reference-type/#referencetype","text":"[jvm]\\ val referenceType : LeakTraceReference.ReferenceType","title":"referenceType"},{"location":"api/shark/shark/-leak-trace-reference/-companion/","text":"// shark / shark / LeakTraceReference / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-leak-trace-reference/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/","text":"// shark / shark / LeakTraceReference / ReferenceType ReferenceType \u00b6 [jvm]\\ enum ReferenceType : Enum < LeakTraceReference.ReferenceType > Entries \u00b6 ARRAY_ENTRY [jvm] ARRAY_ENTRY () LOCAL [jvm] LOCAL () STATIC_FIELD [jvm] STATIC_FIELD () INSTANCE_FIELD [jvm] INSTANCE_FIELD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/#referencetype","text":"[jvm]\\ enum ReferenceType : Enum < LeakTraceReference.ReferenceType >","title":"ReferenceType"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/#entries","text":"ARRAY_ENTRY [jvm] ARRAY_ENTRY () LOCAL [jvm] LOCAL () STATIC_FIELD [jvm] STATIC_FIELD () INSTANCE_FIELD [jvm] INSTANCE_FIELD ()","title":"Entries"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-a-r-r-a-y_-e-n-t-r-y/","text":"// shark / shark / LeakTraceReference / ReferenceType / ARRAY_ENTRY ARRAY_ENTRY \u00b6 [jvm]\\ ARRAY_ENTRY () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-a-r-r-a-y_-e-n-t-r-y/#array_entry","text":"[jvm]\\ ARRAY_ENTRY ()","title":"ARRAY_ENTRY"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-a-r-r-a-y_-e-n-t-r-y/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d/","text":"// shark / shark / LeakTraceReference / ReferenceType / INSTANCE_FIELD INSTANCE_FIELD \u00b6 [jvm]\\ INSTANCE_FIELD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d/#instance_field","text":"[jvm]\\ INSTANCE_FIELD ()","title":"INSTANCE_FIELD"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-i-n-s-t-a-n-c-e_-f-i-e-l-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-l-o-c-a-l/","text":"// shark / shark / LeakTraceReference / ReferenceType / LOCAL LOCAL \u00b6 [jvm]\\ LOCAL () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-l-o-c-a-l/#local","text":"[jvm]\\ LOCAL ()","title":"LOCAL"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-l-o-c-a-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-s-t-a-t-i-c_-f-i-e-l-d/","text":"// shark / shark / LeakTraceReference / ReferenceType / STATIC_FIELD STATIC_FIELD \u00b6 [jvm]\\ STATIC_FIELD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-s-t-a-t-i-c_-f-i-e-l-d/#static_field","text":"[jvm]\\ STATIC_FIELD ()","title":"STATIC_FIELD"},{"location":"api/shark/shark/-leak-trace-reference/-reference-type/-s-t-a-t-i-c_-f-i-e-l-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-leaking-object-finder/","text":"// shark / shark / LeakingObjectFinder LeakingObjectFinder \u00b6 [jvm]\\ fun interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. This is a functional interface with which you can create a LeakingObjectFinder from a lambda. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary findLeakingObjectIds [jvm] abstract fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking. Inheritors \u00b6 Name FilteringLeakingObjectFinder KeyedWeakReferenceFinder","title":"Index"},{"location":"api/shark/shark/-leaking-object-finder/#leakingobjectfinder","text":"[jvm]\\ fun interface LeakingObjectFinder Finds the objects that are leaking, for which Shark will compute leak traces. This is a functional interface with which you can create a LeakingObjectFinder from a lambda.","title":"LeakingObjectFinder"},{"location":"api/shark/shark/-leaking-object-finder/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-leaking-object-finder/#functions","text":"Name Summary findLeakingObjectIds [jvm] abstract fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Functions"},{"location":"api/shark/shark/-leaking-object-finder/#inheritors","text":"Name FilteringLeakingObjectFinder KeyedWeakReferenceFinder","title":"Inheritors"},{"location":"api/shark/shark/-leaking-object-finder/find-leaking-object-ids/","text":"// shark / shark / LeakingObjectFinder / findLeakingObjectIds findLeakingObjectIds \u00b6 [jvm]\\ abstract fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"Find leaking object ids"},{"location":"api/shark/shark/-leaking-object-finder/find-leaking-object-ids/#findleakingobjectids","text":"[jvm]\\ abstract fun findLeakingObjectIds (graph: HeapGraph): Set < Long > For a given heap graph, returns a set of object ids for the objects that are leaking.","title":"findLeakingObjectIds"},{"location":"api/shark/shark/-leaking-object-finder/-companion/","text":"// shark / shark / LeakingObjectFinder / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: (HeapGraph) -> Set < Long >): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax.","title":"Index"},{"location":"api/shark/shark/-leaking-object-finder/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-leaking-object-finder/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: (HeapGraph) -> Set < Long >): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax.","title":"Functions"},{"location":"api/shark/shark/-leaking-object-finder/-companion/invoke/","text":"// shark / shark / LeakingObjectFinder / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: (HeapGraph) -> Set < Long >): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax. Usage: val listener = LeakingObjectFinder {\\ \\ }","title":"Invoke"},{"location":"api/shark/shark/-leaking-object-finder/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: (HeapGraph) -> Set < Long >): LeakingObjectFinder Utility function to create a LeakingObjectFinder from the passed in block lambda instead of using the anonymous object : LeakingObjectFinder syntax. Usage: val listener = LeakingObjectFinder {\\ \\ }","title":"invoke"},{"location":"api/shark/shark/-library-leak/","text":"// shark / shark / LibraryLeak LibraryLeak \u00b6 [jvm]\\ data class LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String ) : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control. Constructors \u00b6 LibraryLeak [jvm] fun LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary description [jvm] val description : String A description that conveys what we know about this library leak. leakTraces [jvm] open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature. pattern [jvm] val pattern : ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance. shortDescription [jvm] open override val shortDescription : String signature [jvm] open override val signature : String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize [jvm] val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. totalRetainedObjectCount [jvm] val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Index"},{"location":"api/shark/shark/-library-leak/#libraryleak","text":"[jvm]\\ data class LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String ) : Leak A leak found by HeapAnalyzer , where the only path to the leaking object required going through a reference matched by pattern , as provided to a LibraryLeakReferenceMatcher instance. This is a known leak in library code that is beyond your control.","title":"LibraryLeak"},{"location":"api/shark/shark/-library-leak/#constructors","text":"LibraryLeak [jvm] fun LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String )","title":"Constructors"},{"location":"api/shark/shark/-library-leak/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-library-leak/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-library-leak/#properties","text":"Name Summary description [jvm] val description : String A description that conveys what we know about this library leak. leakTraces [jvm] open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature. pattern [jvm] val pattern : ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance. shortDescription [jvm] open override val shortDescription : String signature [jvm] open override val signature : String A unique SHA1 hash that represents this group of leak traces. totalRetainedHeapByteSize [jvm] val totalRetainedHeapByteSize : Int ? Sum of LeakTrace.retainedHeapByteSize for all elements in leakTraces . Null if the retained heap size was not computed. totalRetainedObjectCount [jvm] val totalRetainedObjectCount : Int ? Sum of LeakTrace.retainedObjectCount for all elements in leakTraces . Null if the retained heap size was not computed.","title":"Properties"},{"location":"api/shark/shark/-library-leak/-library-leak/","text":"// shark / shark / LibraryLeak / LibraryLeak LibraryLeak \u00b6 [jvm]\\ fun LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String )","title":" library leak"},{"location":"api/shark/shark/-library-leak/-library-leak/#libraryleak","text":"[jvm]\\ fun LibraryLeak (leakTraces: List < LeakTrace >, pattern: ReferencePattern , description: String )","title":"LibraryLeak"},{"location":"api/shark/shark/-library-leak/description/","text":"// shark / shark / LibraryLeak / description description \u00b6 [jvm]\\ val description : String A description that conveys what we know about this library leak.","title":"Description"},{"location":"api/shark/shark/-library-leak/description/#description","text":"[jvm]\\ val description : String A description that conveys what we know about this library leak.","title":"description"},{"location":"api/shark/shark/-library-leak/leak-traces/","text":"// shark / shark / LibraryLeak / leakTraces leakTraces \u00b6 [jvm]\\ open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature.","title":"Leak traces"},{"location":"api/shark/shark/-library-leak/leak-traces/#leaktraces","text":"[jvm]\\ open override val leakTraces : List < LeakTrace > Group of leak traces which share the same leak signature.","title":"leakTraces"},{"location":"api/shark/shark/-library-leak/pattern/","text":"// shark / shark / LibraryLeak / pattern pattern \u00b6 [jvm]\\ val pattern : ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance.","title":"Pattern"},{"location":"api/shark/shark/-library-leak/pattern/#pattern","text":"[jvm]\\ val pattern : ReferencePattern The pattern that matched one of the references in each of leakTraces , as provided to a LibraryLeakReferenceMatcher instance.","title":"pattern"},{"location":"api/shark/shark/-library-leak/short-description/","text":"// shark / shark / LibraryLeak / shortDescription shortDescription \u00b6 [jvm]\\ open override val shortDescription : String","title":"Short description"},{"location":"api/shark/shark/-library-leak/short-description/#shortdescription","text":"[jvm]\\ open override val shortDescription : String","title":"shortDescription"},{"location":"api/shark/shark/-library-leak/signature/","text":"// shark / shark / LibraryLeak / signature signature \u00b6 [jvm]\\ open override val signature : String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"Signature"},{"location":"api/shark/shark/-library-leak/signature/#signature","text":"[jvm]\\ open override val signature : String A unique SHA1 hash that represents this group of leak traces. For ApplicationLeak this is based on LeakTrace.signature and for LibraryLeak this is based on LibraryLeak.pattern .","title":"signature"},{"location":"api/shark/shark/-library-leak/to-string/","text":"// shark / shark / LibraryLeak / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-library-leak/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-library-leak/-companion/","text":"// shark / shark / LibraryLeak / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-library-leak/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-library-leak-reference-matcher/","text":"// shark / shark / LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher \u00b6 [jvm]\\ data class LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String , patternApplies: (HeapGraph) -> Boolean ) : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak . Constructors \u00b6 LibraryLeakReferenceMatcher [jvm] fun LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String = \u201c\u201d, patternApplies: (HeapGraph) -> Boolean = { true }) Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary description [jvm] val description : String A description that conveys what we know about this library leak. pattern [jvm] open override val pattern : ReferencePattern The pattern that references will be matched against. patternApplies [jvm] val patternApplies : (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph. Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false.","title":"Index"},{"location":"api/shark/shark/-library-leak-reference-matcher/#libraryleakreferencematcher","text":"[jvm]\\ data class LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String , patternApplies: (HeapGraph) -> Boolean ) : ReferenceMatcher LibraryLeakReferenceMatcher should be used to match references in library code that are known to create leaks and are beyond your control. The shortest path finder will only go through matching references after it has exhausted references that don\u2019t match, prioritizing finding an application leak over a known library leak. Library leaks will be reported as LibraryLeak instead of ApplicationLeak .","title":"LibraryLeakReferenceMatcher"},{"location":"api/shark/shark/-library-leak-reference-matcher/#constructors","text":"LibraryLeakReferenceMatcher [jvm] fun LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String = \u201c\u201d, patternApplies: (HeapGraph) -> Boolean = { true })","title":"Constructors"},{"location":"api/shark/shark/-library-leak-reference-matcher/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-library-leak-reference-matcher/#properties","text":"Name Summary description [jvm] val description : String A description that conveys what we know about this library leak. pattern [jvm] open override val pattern : ReferencePattern The pattern that references will be matched against. patternApplies [jvm] val patternApplies : (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph. Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false.","title":"Properties"},{"location":"api/shark/shark/-library-leak-reference-matcher/-library-leak-reference-matcher/","text":"// shark / shark / LibraryLeakReferenceMatcher / LibraryLeakReferenceMatcher LibraryLeakReferenceMatcher \u00b6 [jvm]\\ fun LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String = \u201c\u201d, patternApplies: (HeapGraph) -> Boolean = { true })","title":" library leak reference matcher"},{"location":"api/shark/shark/-library-leak-reference-matcher/-library-leak-reference-matcher/#libraryleakreferencematcher","text":"[jvm]\\ fun LibraryLeakReferenceMatcher (pattern: ReferencePattern , description: String = \u201c\u201d, patternApplies: (HeapGraph) -> Boolean = { true })","title":"LibraryLeakReferenceMatcher"},{"location":"api/shark/shark/-library-leak-reference-matcher/description/","text":"// shark / shark / LibraryLeakReferenceMatcher / description description \u00b6 [jvm]\\ val description : String A description that conveys what we know about this library leak.","title":"Description"},{"location":"api/shark/shark/-library-leak-reference-matcher/description/#description","text":"[jvm]\\ val description : String A description that conveys what we know about this library leak.","title":"description"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern-applies/","text":"// shark / shark / LibraryLeakReferenceMatcher / patternApplies patternApplies \u00b6 [jvm]\\ val patternApplies : (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph. Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false.","title":"Pattern applies"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern-applies/#patternapplies","text":"[jvm]\\ val patternApplies : (HeapGraph) -> Boolean Whether the identified leak may exist in the provided HeapGraph. Defaults to true. If the heap dump comes from a VM that runs a different version of the library that doesn\u2019t have the leak, then this should return false.","title":"patternApplies"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern/","text":"// shark / shark / LibraryLeakReferenceMatcher / pattern pattern \u00b6 [jvm]\\ open override val pattern : ReferencePattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-library-leak-reference-matcher/pattern/#pattern","text":"[jvm]\\ open override val pattern : ReferencePattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-library-leak-reference-matcher/to-string/","text":"// shark / shark / LibraryLeakReferenceMatcher / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-library-leak-reference-matcher/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-metadata-extractor/","text":"// shark / shark / MetadataExtractor MetadataExtractor \u00b6 [jvm]\\ fun interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . This is a functional interface with which you can create a MetadataExtractor from a lambda. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary extractMetadata [jvm] abstract fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"Index"},{"location":"api/shark/shark/-metadata-extractor/#metadataextractor","text":"[jvm]\\ fun interface MetadataExtractor Extracts metadata from a hprof to be reported in HeapAnalysisSuccess.metadata . This is a functional interface with which you can create a MetadataExtractor from a lambda.","title":"MetadataExtractor"},{"location":"api/shark/shark/-metadata-extractor/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-metadata-extractor/#functions","text":"Name Summary extractMetadata [jvm] abstract fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"Functions"},{"location":"api/shark/shark/-metadata-extractor/extract-metadata/","text":"// shark / shark / MetadataExtractor / extractMetadata extractMetadata \u00b6 [jvm]\\ abstract fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"Extract metadata"},{"location":"api/shark/shark/-metadata-extractor/extract-metadata/#extractmetadata","text":"[jvm]\\ abstract fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"extractMetadata"},{"location":"api/shark/shark/-metadata-extractor/-companion/","text":"// shark / shark / MetadataExtractor / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax. Properties \u00b6 Name Summary NO_OP [jvm] val NO_OP : MetadataExtractor A no-op MetadataExtractor","title":"Index"},{"location":"api/shark/shark/-metadata-extractor/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-metadata-extractor/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax.","title":"Functions"},{"location":"api/shark/shark/-metadata-extractor/-companion/#properties","text":"Name Summary NO_OP [jvm] val NO_OP : MetadataExtractor A no-op MetadataExtractor","title":"Properties"},{"location":"api/shark/shark/-metadata-extractor/-companion/-n-o_-o-p/","text":"// shark / shark / MetadataExtractor / Companion / NO_OP NO_OP \u00b6 [jvm]\\ val NO_OP : MetadataExtractor A no-op MetadataExtractor","title":" n o  o p"},{"location":"api/shark/shark/-metadata-extractor/-companion/-n-o_-o-p/#no_op","text":"[jvm]\\ val NO_OP : MetadataExtractor A no-op MetadataExtractor","title":"NO_OP"},{"location":"api/shark/shark/-metadata-extractor/-companion/invoke/","text":"// shark / shark / MetadataExtractor / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax. Usage: val inspector = MetadataExtractor { graph ->\\ \\ }","title":"Invoke"},{"location":"api/shark/shark/-metadata-extractor/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: (HeapGraph) -> Map < String , String >): MetadataExtractor Utility function to create a MetadataExtractor from the passed in block lambda instead of using the anonymous object : MetadataExtractor syntax. Usage: val inspector = MetadataExtractor { graph ->\\ \\ }","title":"invoke"},{"location":"api/shark/shark/-object-inspector/","text":"// shark / shark / ObjectInspector ObjectInspector \u00b6 [jvm]\\ fun interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. This is a functional interface with which you can create a ObjectInspector from a lambda. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary inspect [jvm] abstract fun inspect (reporter: ObjectReporter ) Inheritors \u00b6 Name AppSingletonInspector ObjectInspectors","title":"Index"},{"location":"api/shark/shark/-object-inspector/#objectinspector","text":"[jvm]\\ fun interface ObjectInspector Provides LeakCanary with insights about objects (classes, instances and arrays) found in the heap. inspect will be called for each object that LeakCanary wants to know more about. The implementation can then use the provided ObjectReporter to provide insights for that object. This is a functional interface with which you can create a ObjectInspector from a lambda.","title":"ObjectInspector"},{"location":"api/shark/shark/-object-inspector/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-object-inspector/#functions","text":"Name Summary inspect [jvm] abstract fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-object-inspector/#inheritors","text":"Name AppSingletonInspector ObjectInspectors","title":"Inheritors"},{"location":"api/shark/shark/-object-inspector/inspect/","text":"// shark / shark / ObjectInspector / inspect inspect \u00b6 [jvm]\\ abstract fun inspect (reporter: ObjectReporter ) See also \u00b6 jvm shark.ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspector/inspect/#inspect","text":"[jvm]\\ abstract fun inspect (reporter: ObjectReporter )","title":"inspect"},{"location":"api/shark/shark/-object-inspector/inspect/#see-also","text":"jvm shark.ObjectInspector","title":"See also"},{"location":"api/shark/shark/-object-inspector/-companion/","text":"// shark / shark / ObjectInspector / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax.","title":"Index"},{"location":"api/shark/shark/-object-inspector/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-object-inspector/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax.","title":"Functions"},{"location":"api/shark/shark/-object-inspector/-companion/invoke/","text":"// shark / shark / ObjectInspector / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val inspector = ObjectInspector { reporter ->\\ \\ }","title":"Invoke"},{"location":"api/shark/shark/-object-inspector/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: ( ObjectReporter ) -> Unit ): ObjectInspector Utility function to create a ObjectInspector from the passed in block lambda instead of using the anonymous object : OnHeapAnalyzedListener syntax. Usage: val inspector = ObjectInspector { reporter ->\\ \\ }","title":"invoke"},{"location":"api/shark/shark/-object-inspectors/","text":"// shark / shark / ObjectInspectors ObjectInspectors \u00b6 [jvm]\\ enum ObjectInspectors : Enum < ObjectInspectors > , ObjectInspector A set of default ObjectInspector s that knows about common JDK objects. Entries \u00b6 THREAD [jvm] THREAD () ANONYMOUS_CLASS [jvm] ANONYMOUS_CLASS () CLASS [jvm] CLASS () CLASSLOADER [jvm] CLASSLOADER () KEYED_WEAK_REFERENCE [jvm] KEYED_WEAK_REFERENCE () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary inspect [jvm] abstract fun inspect (reporter: ObjectReporter ) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-object-inspectors/#objectinspectors","text":"[jvm]\\ enum ObjectInspectors : Enum < ObjectInspectors > , ObjectInspector A set of default ObjectInspector s that knows about common JDK objects.","title":"ObjectInspectors"},{"location":"api/shark/shark/-object-inspectors/#entries","text":"THREAD [jvm] THREAD () ANONYMOUS_CLASS [jvm] ANONYMOUS_CLASS () CLASS [jvm] CLASS () CLASSLOADER [jvm] CLASSLOADER () KEYED_WEAK_REFERENCE [jvm] KEYED_WEAK_REFERENCE ()","title":"Entries"},{"location":"api/shark/shark/-object-inspectors/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-object-inspectors/#functions","text":"Name Summary inspect [jvm] abstract fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/","text":"// shark / shark / ObjectInspectors / ANONYMOUS_CLASS ANONYMOUS_CLASS \u00b6 [jvm]\\ ANONYMOUS_CLASS () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter ) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/#anonymous_class","text":"[jvm]\\ ANONYMOUS_CLASS ()","title":"ANONYMOUS_CLASS"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect/","text":"// shark / shark / ObjectInspectors / ANONYMOUS_CLASS / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter ) See also \u00b6 jvm shark.ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter )","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-a-n-o-n-y-m-o-u-s_-c-l-a-s-s/inspect/#see-also","text":"jvm shark.ObjectInspector","title":"See also"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/","text":"// shark / shark / ObjectInspectors / CLASS CLASS \u00b6 [jvm]\\ CLASS () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter ) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/#class","text":"[jvm]\\ CLASS ()","title":"CLASS"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect/","text":"// shark / shark / ObjectInspectors / CLASS / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter ) See also \u00b6 jvm shark.ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter )","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s/inspect/#see-also","text":"jvm shark.ObjectInspector","title":"See also"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/","text":"// shark / shark / ObjectInspectors / CLASSLOADER CLASSLOADER \u00b6 [jvm]\\ CLASSLOADER () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter ) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/#classloader","text":"[jvm]\\ CLASSLOADER ()","title":"CLASSLOADER"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect/","text":"// shark / shark / ObjectInspectors / CLASSLOADER / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter ) See also \u00b6 jvm shark.ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter )","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-c-l-a-s-s-l-o-a-d-e-r/inspect/#see-also","text":"jvm shark.ObjectInspector","title":"See also"},{"location":"api/shark/shark/-object-inspectors/-companion/","text":"// shark / shark / ObjectInspectors / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary createLeakingObjectFilters [jvm] fun createLeakingObjectFilters (inspectors: Set < ObjectInspectors >): List < FilteringLeakingObjectFinder.LeakingObjectFilter > Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors . Properties \u00b6 Name Summary jdkDefaults [jvm] val jdkDefaults : List < ObjectInspector > jdkLeakingObjectFilters [jvm] val jdkLeakingObjectFilters : List < FilteringLeakingObjectFinder.LeakingObjectFilter > Returns a list of LeakingObjectFilter suitable for common JDK projects.","title":"Index"},{"location":"api/shark/shark/-object-inspectors/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-object-inspectors/-companion/#functions","text":"Name Summary createLeakingObjectFilters [jvm] fun createLeakingObjectFilters (inspectors: Set < ObjectInspectors >): List < FilteringLeakingObjectFinder.LeakingObjectFilter > Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors .","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-companion/#properties","text":"Name Summary jdkDefaults [jvm] val jdkDefaults : List < ObjectInspector > jdkLeakingObjectFilters [jvm] val jdkLeakingObjectFilters : List < FilteringLeakingObjectFinder.LeakingObjectFilter > Returns a list of LeakingObjectFilter suitable for common JDK projects.","title":"Properties"},{"location":"api/shark/shark/-object-inspectors/-companion/create-leaking-object-filters/","text":"// shark / shark / ObjectInspectors / Companion / createLeakingObjectFilters createLeakingObjectFilters \u00b6 [jvm]\\ fun createLeakingObjectFilters (inspectors: Set < ObjectInspectors >): List < FilteringLeakingObjectFinder.LeakingObjectFilter > Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors .","title":"Create leaking object filters"},{"location":"api/shark/shark/-object-inspectors/-companion/create-leaking-object-filters/#createleakingobjectfilters","text":"[jvm]\\ fun createLeakingObjectFilters (inspectors: Set < ObjectInspectors >): List < FilteringLeakingObjectFinder.LeakingObjectFilter > Creates a list of LeakingObjectFilter based on the passed in ObjectInspectors .","title":"createLeakingObjectFilters"},{"location":"api/shark/shark/-object-inspectors/-companion/jdk-defaults/","text":"// shark / shark / ObjectInspectors / Companion / jdkDefaults jdkDefaults \u00b6 [jvm]\\ val jdkDefaults : List < ObjectInspector > See also \u00b6 jvm shark.ObjectInspectors","title":"Jdk defaults"},{"location":"api/shark/shark/-object-inspectors/-companion/jdk-defaults/#jdkdefaults","text":"[jvm]\\ val jdkDefaults : List < ObjectInspector >","title":"jdkDefaults"},{"location":"api/shark/shark/-object-inspectors/-companion/jdk-defaults/#see-also","text":"jvm shark.ObjectInspectors","title":"See also"},{"location":"api/shark/shark/-object-inspectors/-companion/jdk-leaking-object-filters/","text":"// shark / shark / ObjectInspectors / Companion / jdkLeakingObjectFilters jdkLeakingObjectFilters \u00b6 [jvm]\\ val jdkLeakingObjectFilters : List < FilteringLeakingObjectFinder.LeakingObjectFilter > Returns a list of LeakingObjectFilter suitable for common JDK projects.","title":"Jdk leaking object filters"},{"location":"api/shark/shark/-object-inspectors/-companion/jdk-leaking-object-filters/#jdkleakingobjectfilters","text":"[jvm]\\ val jdkLeakingObjectFilters : List < FilteringLeakingObjectFinder.LeakingObjectFilter > Returns a list of LeakingObjectFilter suitable for common JDK projects.","title":"jdkLeakingObjectFilters"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/","text":"// shark / shark / ObjectInspectors / KEYED_WEAK_REFERENCE KEYED_WEAK_REFERENCE \u00b6 [jvm]\\ KEYED_WEAK_REFERENCE () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter ) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/#keyed_weak_reference","text":"[jvm]\\ KEYED_WEAK_REFERENCE ()","title":"KEYED_WEAK_REFERENCE"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect/","text":"// shark / shark / ObjectInspectors / KEYED_WEAK_REFERENCE / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter ) See also \u00b6 jvm shark.ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter )","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-k-e-y-e-d_-w-e-a-k_-r-e-f-e-r-e-n-c-e/inspect/#see-also","text":"jvm shark.ObjectInspector","title":"See also"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/","text":"// shark / shark / ObjectInspectors / THREAD THREAD \u00b6 [jvm]\\ THREAD () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter ) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/#thread","text":"[jvm]\\ THREAD ()","title":"THREAD"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter )","title":"Functions"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect/","text":"// shark / shark / ObjectInspectors / THREAD / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter ) See also \u00b6 jvm shark.ObjectInspector","title":"Inspect"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter )","title":"inspect"},{"location":"api/shark/shark/-object-inspectors/-t-h-r-e-a-d/inspect/#see-also","text":"jvm shark.ObjectInspector","title":"See also"},{"location":"api/shark/shark/-object-reporter/","text":"// shark / shark / ObjectReporter ObjectReporter \u00b6 [jvm]\\ class ObjectReporter (heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights. Constructors \u00b6 ObjectReporter [jvm] fun ObjectReporter (heapObject: HeapObject) Functions \u00b6 Name Summary whenInstanceOf [jvm] fun whenInstanceOf (expectedClassName: String , block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClassName . [jvm] fun whenInstanceOf (expectedClass: KClass <out Any >, block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClass . Properties \u00b6 Name Summary heapObject [jvm] val heapObject : HeapObject labels [jvm] val labels : LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace. leakingReasons [jvm] val leakingReasons : MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking). notLeakingReasons [jvm] val notLeakingReasons : MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking).","title":"Index"},{"location":"api/shark/shark/-object-reporter/#objectreporter","text":"[jvm]\\ class ObjectReporter (heapObject: HeapObject) Enables ObjectInspector implementations to provide insights on heapObject , which is an object (class, instance or array) found in the heap. A given ObjectReporter only maps to one object in the heap, but is shared to many ObjectInspector implementations and accumulates insights.","title":"ObjectReporter"},{"location":"api/shark/shark/-object-reporter/#constructors","text":"ObjectReporter [jvm] fun ObjectReporter (heapObject: HeapObject)","title":"Constructors"},{"location":"api/shark/shark/-object-reporter/#functions","text":"Name Summary whenInstanceOf [jvm] fun whenInstanceOf (expectedClassName: String , block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClassName . [jvm] fun whenInstanceOf (expectedClass: KClass <out Any >, block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClass .","title":"Functions"},{"location":"api/shark/shark/-object-reporter/#properties","text":"Name Summary heapObject [jvm] val heapObject : HeapObject labels [jvm] val labels : LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace. leakingReasons [jvm] val leakingReasons : MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking). notLeakingReasons [jvm] val notLeakingReasons : MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking).","title":"Properties"},{"location":"api/shark/shark/-object-reporter/-object-reporter/","text":"// shark / shark / ObjectReporter / ObjectReporter ObjectReporter \u00b6 [jvm]\\ fun ObjectReporter (heapObject: HeapObject)","title":" object reporter"},{"location":"api/shark/shark/-object-reporter/-object-reporter/#objectreporter","text":"[jvm]\\ fun ObjectReporter (heapObject: HeapObject)","title":"ObjectReporter"},{"location":"api/shark/shark/-object-reporter/heap-object/","text":"// shark / shark / ObjectReporter / heapObject heapObject \u00b6 [jvm]\\ val heapObject : HeapObject","title":"Heap object"},{"location":"api/shark/shark/-object-reporter/heap-object/#heapobject","text":"[jvm]\\ val heapObject : HeapObject","title":"heapObject"},{"location":"api/shark/shark/-object-reporter/labels/","text":"// shark / shark / ObjectReporter / labels labels \u00b6 [jvm]\\ val labels : LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace.","title":"Labels"},{"location":"api/shark/shark/-object-reporter/labels/#labels","text":"[jvm]\\ val labels : LinkedHashSet < String > Labels that will be visible on the corresponding heapObject in the leak trace.","title":"labels"},{"location":"api/shark/shark/-object-reporter/leaking-reasons/","text":"// shark / shark / ObjectReporter / leakingReasons leakingReasons \u00b6 [jvm]\\ val leakingReasons : MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking).","title":"Leaking reasons"},{"location":"api/shark/shark/-object-reporter/leaking-reasons/#leakingreasons","text":"[jvm]\\ val leakingReasons : MutableSet < String > Reasons for which this object is expected to be unreachable (ie it\u2019s leaking).","title":"leakingReasons"},{"location":"api/shark/shark/-object-reporter/not-leaking-reasons/","text":"// shark / shark / ObjectReporter / notLeakingReasons notLeakingReasons \u00b6 [jvm]\\ val notLeakingReasons : MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking).","title":"Not leaking reasons"},{"location":"api/shark/shark/-object-reporter/not-leaking-reasons/#notleakingreasons","text":"[jvm]\\ val notLeakingReasons : MutableSet < String > Reasons for which this object is expected to be reachable (ie it\u2019s not leaking).","title":"notLeakingReasons"},{"location":"api/shark/shark/-object-reporter/when-instance-of/","text":"// shark / shark / ObjectReporter / whenInstanceOf whenInstanceOf \u00b6 [jvm]\\ fun whenInstanceOf (expectedClass: KClass <out Any >, block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClass . [jvm]\\ fun whenInstanceOf (expectedClassName: String , block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"When instance of"},{"location":"api/shark/shark/-object-reporter/when-instance-of/#wheninstanceof","text":"[jvm]\\ fun whenInstanceOf (expectedClass: KClass <out Any >, block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClass . [jvm]\\ fun whenInstanceOf (expectedClassName: String , block: ObjectReporter .(HeapObject.HeapInstance) -> Unit ) Runs block if ObjectReporter.heapObject is an instance of expectedClassName .","title":"whenInstanceOf"},{"location":"api/shark/shark/-on-analysis-progress-listener/","text":"// shark / shark / OnAnalysisProgressListener OnAnalysisProgressListener \u00b6 [jvm]\\ fun interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. This is a functional interface with which you can create a OnAnalysisProgressListener from a lambda. Types \u00b6 Name Summary Companion [jvm] object Companion Step [jvm] enum Step : Enum < OnAnalysisProgressListener.Step > Functions \u00b6 Name Summary onAnalysisProgress [jvm] abstract fun onAnalysisProgress (step: OnAnalysisProgressListener.Step )","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/#onanalysisprogresslistener","text":"[jvm]\\ fun interface OnAnalysisProgressListener Reports progress from the HeapAnalyzer as they occur, as Step values. This is a functional interface with which you can create a OnAnalysisProgressListener from a lambda.","title":"OnAnalysisProgressListener"},{"location":"api/shark/shark/-on-analysis-progress-listener/#types","text":"Name Summary Companion [jvm] object Companion Step [jvm] enum Step : Enum < OnAnalysisProgressListener.Step >","title":"Types"},{"location":"api/shark/shark/-on-analysis-progress-listener/#functions","text":"Name Summary onAnalysisProgress [jvm] abstract fun onAnalysisProgress (step: OnAnalysisProgressListener.Step )","title":"Functions"},{"location":"api/shark/shark/-on-analysis-progress-listener/on-analysis-progress/","text":"// shark / shark / OnAnalysisProgressListener / onAnalysisProgress onAnalysisProgress \u00b6 [jvm]\\ abstract fun onAnalysisProgress (step: OnAnalysisProgressListener.Step )","title":"On analysis progress"},{"location":"api/shark/shark/-on-analysis-progress-listener/on-analysis-progress/#onanalysisprogress","text":"[jvm]\\ abstract fun onAnalysisProgress (step: OnAnalysisProgressListener.Step )","title":"onAnalysisProgress"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/","text":"// shark / shark / OnAnalysisProgressListener / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax. Properties \u00b6 Name Summary NO_OP [jvm] val NO_OP : OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax.","title":"Functions"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/#properties","text":"Name Summary NO_OP [jvm] val NO_OP : OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/-n-o_-o-p/","text":"// shark / shark / OnAnalysisProgressListener / Companion / NO_OP NO_OP \u00b6 [jvm]\\ val NO_OP : OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":" n o  o p"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/-n-o_-o-p/#no_op","text":"[jvm]\\ val NO_OP : OnAnalysisProgressListener A no-op OnAnalysisProgressListener","title":"NO_OP"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/invoke/","text":"// shark / shark / OnAnalysisProgressListener / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax. Usage: val listener = OnAnalysisProgressListener {\\ \\ }","title":"Invoke"},{"location":"api/shark/shark/-on-analysis-progress-listener/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: ( OnAnalysisProgressListener.Step ) -> Unit ): OnAnalysisProgressListener Utility function to create a OnAnalysisProgressListener from the passed in block lambda instead of using the anonymous object : OnAnalysisProgressListener syntax. Usage: val listener = OnAnalysisProgressListener {\\ \\ }","title":"invoke"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/","text":"// shark / shark / OnAnalysisProgressListener / Step Step \u00b6 [jvm]\\ enum Step : Enum < OnAnalysisProgressListener.Step > Entries \u00b6 REPORTING_HEAP_ANALYSIS [jvm] REPORTING_HEAP_ANALYSIS () BUILDING_LEAK_TRACES [jvm] BUILDING_LEAK_TRACES () COMPUTING_RETAINED_SIZE [jvm] COMPUTING_RETAINED_SIZE () COMPUTING_NATIVE_RETAINED_SIZE [jvm] COMPUTING_NATIVE_RETAINED_SIZE () INSPECTING_OBJECTS [jvm] INSPECTING_OBJECTS () FINDING_DOMINATORS [jvm] FINDING_DOMINATORS () FINDING_PATHS_TO_RETAINED_OBJECTS [jvm] FINDING_PATHS_TO_RETAINED_OBJECTS () FINDING_RETAINED_OBJECTS [jvm] FINDING_RETAINED_OBJECTS () EXTRACTING_METADATA [jvm] EXTRACTING_METADATA () PARSING_HEAP_DUMP [jvm] PARSING_HEAP_DUMP () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/#step","text":"[jvm]\\ enum Step : Enum < OnAnalysisProgressListener.Step >","title":"Step"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/#entries","text":"REPORTING_HEAP_ANALYSIS [jvm] REPORTING_HEAP_ANALYSIS () BUILDING_LEAK_TRACES [jvm] BUILDING_LEAK_TRACES () COMPUTING_RETAINED_SIZE [jvm] COMPUTING_RETAINED_SIZE () COMPUTING_NATIVE_RETAINED_SIZE [jvm] COMPUTING_NATIVE_RETAINED_SIZE () INSPECTING_OBJECTS [jvm] INSPECTING_OBJECTS () FINDING_DOMINATORS [jvm] FINDING_DOMINATORS () FINDING_PATHS_TO_RETAINED_OBJECTS [jvm] FINDING_PATHS_TO_RETAINED_OBJECTS () FINDING_RETAINED_OBJECTS [jvm] FINDING_RETAINED_OBJECTS () EXTRACTING_METADATA [jvm] EXTRACTING_METADATA () PARSING_HEAP_DUMP [jvm] PARSING_HEAP_DUMP ()","title":"Entries"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/human-readable-name/","text":"// shark / shark / OnAnalysisProgressListener / Step / humanReadableName humanReadableName \u00b6 [jvm]\\ val humanReadableName : String","title":"Human readable name"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/human-readable-name/#humanreadablename","text":"[jvm]\\ val humanReadableName : String","title":"humanReadableName"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s/","text":"// shark / shark / OnAnalysisProgressListener / Step / BUILDING_LEAK_TRACES BUILDING_LEAK_TRACES \u00b6 [jvm]\\ BUILDING_LEAK_TRACES () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s/#building_leak_traces","text":"[jvm]\\ BUILDING_LEAK_TRACES ()","title":"BUILDING_LEAK_TRACES"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-b-u-i-l-d-i-n-g_-l-e-a-k_-t-r-a-c-e-s/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e/","text":"// shark / shark / OnAnalysisProgressListener / Step / COMPUTING_NATIVE_RETAINED_SIZE COMPUTING_NATIVE_RETAINED_SIZE \u00b6 [jvm]\\ COMPUTING_NATIVE_RETAINED_SIZE () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e/#computing_native_retained_size","text":"[jvm]\\ COMPUTING_NATIVE_RETAINED_SIZE ()","title":"COMPUTING_NATIVE_RETAINED_SIZE"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-n-a-t-i-v-e_-r-e-t-a-i-n-e-d_-s-i-z-e/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e/","text":"// shark / shark / OnAnalysisProgressListener / Step / COMPUTING_RETAINED_SIZE COMPUTING_RETAINED_SIZE \u00b6 [jvm]\\ COMPUTING_RETAINED_SIZE () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e/#computing_retained_size","text":"[jvm]\\ COMPUTING_RETAINED_SIZE ()","title":"COMPUTING_RETAINED_SIZE"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-c-o-m-p-u-t-i-n-g_-r-e-t-a-i-n-e-d_-s-i-z-e/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-e-x-t-r-a-c-t-i-n-g_-m-e-t-a-d-a-t-a/","text":"// shark / shark / OnAnalysisProgressListener / Step / EXTRACTING_METADATA EXTRACTING_METADATA \u00b6 [jvm]\\ EXTRACTING_METADATA () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-e-x-t-r-a-c-t-i-n-g_-m-e-t-a-d-a-t-a/#extracting_metadata","text":"[jvm]\\ EXTRACTING_METADATA ()","title":"EXTRACTING_METADATA"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-e-x-t-r-a-c-t-i-n-g_-m-e-t-a-d-a-t-a/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s/","text":"// shark / shark / OnAnalysisProgressListener / Step / FINDING_DOMINATORS FINDING_DOMINATORS \u00b6 [jvm]\\ FINDING_DOMINATORS () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s/#finding_dominators","text":"[jvm]\\ FINDING_DOMINATORS ()","title":"FINDING_DOMINATORS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-d-o-m-i-n-a-t-o-r-s/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/","text":"// shark / shark / OnAnalysisProgressListener / Step / FINDING_PATHS_TO_RETAINED_OBJECTS FINDING_PATHS_TO_RETAINED_OBJECTS \u00b6 [jvm]\\ FINDING_PATHS_TO_RETAINED_OBJECTS () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#finding_paths_to_retained_objects","text":"[jvm]\\ FINDING_PATHS_TO_RETAINED_OBJECTS ()","title":"FINDING_PATHS_TO_RETAINED_OBJECTS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-p-a-t-h-s_-t-o_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/","text":"// shark / shark / OnAnalysisProgressListener / Step / FINDING_RETAINED_OBJECTS FINDING_RETAINED_OBJECTS \u00b6 [jvm]\\ FINDING_RETAINED_OBJECTS () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#finding_retained_objects","text":"[jvm]\\ FINDING_RETAINED_OBJECTS ()","title":"FINDING_RETAINED_OBJECTS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-f-i-n-d-i-n-g_-r-e-t-a-i-n-e-d_-o-b-j-e-c-t-s/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-i-n-s-p-e-c-t-i-n-g_-o-b-j-e-c-t-s/","text":"// shark / shark / OnAnalysisProgressListener / Step / INSPECTING_OBJECTS INSPECTING_OBJECTS \u00b6 [jvm]\\ INSPECTING_OBJECTS () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-i-n-s-p-e-c-t-i-n-g_-o-b-j-e-c-t-s/#inspecting_objects","text":"[jvm]\\ INSPECTING_OBJECTS ()","title":"INSPECTING_OBJECTS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-i-n-s-p-e-c-t-i-n-g_-o-b-j-e-c-t-s/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p/","text":"// shark / shark / OnAnalysisProgressListener / Step / PARSING_HEAP_DUMP PARSING_HEAP_DUMP \u00b6 [jvm]\\ PARSING_HEAP_DUMP () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p/#parsing_heap_dump","text":"[jvm]\\ PARSING_HEAP_DUMP ()","title":"PARSING_HEAP_DUMP"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-p-a-r-s-i-n-g_-h-e-a-p_-d-u-m-p/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-r-e-p-o-r-t-i-n-g_-h-e-a-p_-a-n-a-l-y-s-i-s/","text":"// shark / shark / OnAnalysisProgressListener / Step / REPORTING_HEAP_ANALYSIS REPORTING_HEAP_ANALYSIS \u00b6 [jvm]\\ REPORTING_HEAP_ANALYSIS () Properties \u00b6 Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-r-e-p-o-r-t-i-n-g_-h-e-a-p_-a-n-a-l-y-s-i-s/#reporting_heap_analysis","text":"[jvm]\\ REPORTING_HEAP_ANALYSIS ()","title":"REPORTING_HEAP_ANALYSIS"},{"location":"api/shark/shark/-on-analysis-progress-listener/-step/-r-e-p-o-r-t-i-n-g_-h-e-a-p_-a-n-a-l-y-s-i-s/#properties","text":"Name Summary humanReadableName [jvm] val humanReadableName : String name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark/shark/-reference-matcher/","text":"// shark / shark / ReferenceMatcher ReferenceMatcher \u00b6 [jvm]\\ sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ). Properties \u00b6 Name Summary pattern [jvm] abstract val pattern : ReferencePattern The pattern that references will be matched against. Inheritors \u00b6 Name LibraryLeakReferenceMatcher IgnoredReferenceMatcher","title":"Index"},{"location":"api/shark/shark/-reference-matcher/#referencematcher","text":"[jvm]\\ sealed class ReferenceMatcher Used to pattern match known patterns of references in the heap, either to ignore them ( IgnoredReferenceMatcher ) or to mark them as library leaks ( LibraryLeakReferenceMatcher ).","title":"ReferenceMatcher"},{"location":"api/shark/shark/-reference-matcher/#properties","text":"Name Summary pattern [jvm] abstract val pattern : ReferencePattern The pattern that references will be matched against.","title":"Properties"},{"location":"api/shark/shark/-reference-matcher/#inheritors","text":"Name LibraryLeakReferenceMatcher IgnoredReferenceMatcher","title":"Inheritors"},{"location":"api/shark/shark/-reference-matcher/pattern/","text":"// shark / shark / ReferenceMatcher / pattern pattern \u00b6 [jvm]\\ abstract val pattern : ReferencePattern The pattern that references will be matched against.","title":"Pattern"},{"location":"api/shark/shark/-reference-matcher/pattern/#pattern","text":"[jvm]\\ abstract val pattern : ReferencePattern The pattern that references will be matched against.","title":"pattern"},{"location":"api/shark/shark/-reference-pattern/","text":"// shark / shark / ReferencePattern ReferencePattern \u00b6 [jvm]\\ sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher . Types \u00b6 Name Summary Companion [jvm] object Companion InstanceFieldPattern [jvm] data class InstanceFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern [jvm] data class JavaLocalPattern (threadName: String ) : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern [jvm] data class NativeGlobalVariablePattern (className: String ) : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern [jvm] data class StaticFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches static field references, identified by className and fieldName . Inheritors \u00b6 Name JavaLocalPattern StaticFieldPattern InstanceFieldPattern NativeGlobalVariablePattern","title":"Index"},{"location":"api/shark/shark/-reference-pattern/#referencepattern","text":"[jvm]\\ sealed class ReferencePattern : Serializable A pattern that will match references for a given ReferenceMatcher .","title":"ReferencePattern"},{"location":"api/shark/shark/-reference-pattern/#types","text":"Name Summary Companion [jvm] object Companion InstanceFieldPattern [jvm] data class InstanceFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches instances field references, identified by className and fieldName . JavaLocalPattern [jvm] data class JavaLocalPattern (threadName: String ) : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. NativeGlobalVariablePattern [jvm] data class NativeGlobalVariablePattern (className: String ) : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. StaticFieldPattern [jvm] data class StaticFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches static field references, identified by className and fieldName .","title":"Types"},{"location":"api/shark/shark/-reference-pattern/#inheritors","text":"Name JavaLocalPattern StaticFieldPattern InstanceFieldPattern NativeGlobalVariablePattern","title":"Inheritors"},{"location":"api/shark/shark/-reference-pattern/-companion/","text":"// shark / shark / ReferencePattern / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/","text":"// shark / shark / ReferencePattern / InstanceFieldPattern InstanceFieldPattern \u00b6 [jvm]\\ data class InstanceFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins. Constructors \u00b6 InstanceFieldPattern [jvm] fun InstanceFieldPattern (className: String , fieldName: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary className [jvm] val className : String fieldName [jvm] val fieldName : String","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#instancefieldpattern","text":"[jvm]\\ data class InstanceFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches instances field references, identified by className and fieldName . Note: If fieldName is declared in a superclass it will still match for subclasses. This is to support overriding of rules for specific cases. If two ReferenceMatcher match for the same fieldName but for different className in a class hierarchy, then the closest class in the hierarchy wins.","title":"InstanceFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#constructors","text":"InstanceFieldPattern [jvm] fun InstanceFieldPattern (className: String , fieldName: String )","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/#properties","text":"Name Summary className [jvm] val className : String fieldName [jvm] val fieldName : String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-instance-field-pattern/","text":"// shark / shark / ReferencePattern / InstanceFieldPattern / InstanceFieldPattern InstanceFieldPattern \u00b6 [jvm]\\ fun InstanceFieldPattern (className: String , fieldName: String )","title":" instance field pattern"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-instance-field-pattern/#instancefieldpattern","text":"[jvm]\\ fun InstanceFieldPattern (className: String , fieldName: String )","title":"InstanceFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/class-name/","text":"// shark / shark / ReferencePattern / InstanceFieldPattern / className className \u00b6 [jvm]\\ val className : String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/class-name/#classname","text":"[jvm]\\ val className : String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/field-name/","text":"// shark / shark / ReferencePattern / InstanceFieldPattern / fieldName fieldName \u00b6 [jvm]\\ val fieldName : String","title":"Field name"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/field-name/#fieldname","text":"[jvm]\\ val fieldName : String","title":"fieldName"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/to-string/","text":"// shark / shark / ReferencePattern / InstanceFieldPattern / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-companion/","text":"// shark / shark / ReferencePattern / InstanceFieldPattern / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-instance-field-pattern/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/","text":"// shark / shark / ReferencePattern / JavaLocalPattern JavaLocalPattern \u00b6 [jvm]\\ data class JavaLocalPattern (threadName: String ) : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name. Constructors \u00b6 JavaLocalPattern [jvm] fun JavaLocalPattern (threadName: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary threadName [jvm] val threadName : String","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#javalocalpattern","text":"[jvm]\\ data class JavaLocalPattern (threadName: String ) : ReferencePattern Matches local references held in the stack of frames of a given thread, identified by its name.","title":"JavaLocalPattern"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#constructors","text":"JavaLocalPattern [jvm] fun JavaLocalPattern (threadName: String )","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/#properties","text":"Name Summary threadName [jvm] val threadName : String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-java-local-pattern/","text":"// shark / shark / ReferencePattern / JavaLocalPattern / JavaLocalPattern JavaLocalPattern \u00b6 [jvm]\\ fun JavaLocalPattern (threadName: String )","title":" java local pattern"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-java-local-pattern/#javalocalpattern","text":"[jvm]\\ fun JavaLocalPattern (threadName: String )","title":"JavaLocalPattern"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/thread-name/","text":"// shark / shark / ReferencePattern / JavaLocalPattern / threadName threadName \u00b6 [jvm]\\ val threadName : String","title":"Thread name"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/thread-name/#threadname","text":"[jvm]\\ val threadName : String","title":"threadName"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/to-string/","text":"// shark / shark / ReferencePattern / JavaLocalPattern / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-companion/","text":"// shark / shark / ReferencePattern / JavaLocalPattern / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-java-local-pattern/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/","text":"// shark / shark / ReferencePattern / NativeGlobalVariablePattern NativeGlobalVariablePattern \u00b6 [jvm]\\ data class NativeGlobalVariablePattern (className: String ) : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name. Constructors \u00b6 NativeGlobalVariablePattern [jvm] fun NativeGlobalVariablePattern (className: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary className [jvm] val className : String","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#nativeglobalvariablepattern","text":"[jvm]\\ data class NativeGlobalVariablePattern (className: String ) : ReferencePattern Matches native global variables (also known as jni global gc roots) that reference Java objects. The class name will match against classes, instances and object arrays with a matching class name.","title":"NativeGlobalVariablePattern"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#constructors","text":"NativeGlobalVariablePattern [jvm] fun NativeGlobalVariablePattern (className: String )","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/#properties","text":"Name Summary className [jvm] val className : String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-native-global-variable-pattern/","text":"// shark / shark / ReferencePattern / NativeGlobalVariablePattern / NativeGlobalVariablePattern NativeGlobalVariablePattern \u00b6 [jvm]\\ fun NativeGlobalVariablePattern (className: String )","title":" native global variable pattern"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-native-global-variable-pattern/#nativeglobalvariablepattern","text":"[jvm]\\ fun NativeGlobalVariablePattern (className: String )","title":"NativeGlobalVariablePattern"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/class-name/","text":"// shark / shark / ReferencePattern / NativeGlobalVariablePattern / className className \u00b6 [jvm]\\ val className : String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/class-name/#classname","text":"[jvm]\\ val className : String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/to-string/","text":"// shark / shark / ReferencePattern / NativeGlobalVariablePattern / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-companion/","text":"// shark / shark / ReferencePattern / NativeGlobalVariablePattern / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-native-global-variable-pattern/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/","text":"// shark / shark / ReferencePattern / StaticFieldPattern StaticFieldPattern \u00b6 [jvm]\\ data class StaticFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches static field references, identified by className and fieldName . Constructors \u00b6 StaticFieldPattern [jvm] fun StaticFieldPattern (className: String , fieldName: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary className [jvm] val className : String fieldName [jvm] val fieldName : String","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#staticfieldpattern","text":"[jvm]\\ data class StaticFieldPattern (className: String , fieldName: String ) : ReferencePattern Matches static field references, identified by className and fieldName .","title":"StaticFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#constructors","text":"StaticFieldPattern [jvm] fun StaticFieldPattern (className: String , fieldName: String )","title":"Constructors"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#functions","text":"Name Summary toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/#properties","text":"Name Summary className [jvm] val className : String fieldName [jvm] val fieldName : String","title":"Properties"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-static-field-pattern/","text":"// shark / shark / ReferencePattern / StaticFieldPattern / StaticFieldPattern StaticFieldPattern \u00b6 [jvm]\\ fun StaticFieldPattern (className: String , fieldName: String )","title":" static field pattern"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-static-field-pattern/#staticfieldpattern","text":"[jvm]\\ fun StaticFieldPattern (className: String , fieldName: String )","title":"StaticFieldPattern"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/class-name/","text":"// shark / shark / ReferencePattern / StaticFieldPattern / className className \u00b6 [jvm]\\ val className : String","title":"Class name"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/class-name/#classname","text":"[jvm]\\ val className : String","title":"className"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/field-name/","text":"// shark / shark / ReferencePattern / StaticFieldPattern / fieldName fieldName \u00b6 [jvm]\\ val fieldName : String","title":"Field name"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/field-name/#fieldname","text":"[jvm]\\ val fieldName : String","title":"fieldName"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/to-string/","text":"// shark / shark / ReferencePattern / StaticFieldPattern / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-companion/","text":"// shark / shark / ReferencePattern / StaticFieldPattern / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark/shark/-reference-pattern/-static-field-pattern/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-android/shark/","text":"// shark-android / shark Package shark \u00b6 Types \u00b6 Name Summary AndroidBuildMirror [jvm] class AndroidBuildMirror (manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . AndroidMetadataExtractor [jvm] object AndroidMetadataExtractor : MetadataExtractor AndroidObjectInspectors [jvm] enum AndroidObjectInspectors : Enum < AndroidObjectInspectors > , ObjectInspector A set of default ObjectInspectors that knows about common AOSP and library classes. AndroidReferenceMatchers [jvm] enum AndroidReferenceMatchers : Enum < AndroidReferenceMatchers > AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher. AndroidResourceIdNames [jvm] class AndroidResourceIdNames AndroidServices [jvm] object AndroidServices","title":"Extension: Shark Android"},{"location":"api/shark-android/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-android/shark/#types","text":"Name Summary AndroidBuildMirror [jvm] class AndroidBuildMirror (manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . AndroidMetadataExtractor [jvm] object AndroidMetadataExtractor : MetadataExtractor AndroidObjectInspectors [jvm] enum AndroidObjectInspectors : Enum < AndroidObjectInspectors > , ObjectInspector A set of default ObjectInspectors that knows about common AOSP and library classes. AndroidReferenceMatchers [jvm] enum AndroidReferenceMatchers : Enum < AndroidReferenceMatchers > AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher. AndroidResourceIdNames [jvm] class AndroidResourceIdNames AndroidServices [jvm] object AndroidServices","title":"Types"},{"location":"api/shark-android/shark/-android-build-mirror/","text":"// shark-android / shark / AndroidBuildMirror AndroidBuildMirror \u00b6 [jvm]\\ class AndroidBuildMirror (manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph . Constructors \u00b6 AndroidBuildMirror [jvm] fun AndroidBuildMirror (manufacturer: String , sdkInt: Int ) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary manufacturer [jvm] val manufacturer : String Value of android.os.Build.MANUFACTURER sdkInt [jvm] val sdkInt : Int Value of android.os.Build.VERSION.SDK_INT","title":"Index"},{"location":"api/shark-android/shark/-android-build-mirror/#androidbuildmirror","text":"[jvm]\\ class AndroidBuildMirror (manufacturer: String , sdkInt: Int ) Caches values from the android.os.Build class in the heap dump. Retrieve a cached instances via fromHeapGraph .","title":"AndroidBuildMirror"},{"location":"api/shark-android/shark/-android-build-mirror/#constructors","text":"AndroidBuildMirror [jvm] fun AndroidBuildMirror (manufacturer: String , sdkInt: Int )","title":"Constructors"},{"location":"api/shark-android/shark/-android-build-mirror/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-android/shark/-android-build-mirror/#properties","text":"Name Summary manufacturer [jvm] val manufacturer : String Value of android.os.Build.MANUFACTURER sdkInt [jvm] val sdkInt : Int Value of android.os.Build.VERSION.SDK_INT","title":"Properties"},{"location":"api/shark-android/shark/-android-build-mirror/-android-build-mirror/","text":"// shark-android / shark / AndroidBuildMirror / AndroidBuildMirror AndroidBuildMirror \u00b6 [jvm]\\ fun AndroidBuildMirror (manufacturer: String , sdkInt: Int )","title":" android build mirror"},{"location":"api/shark-android/shark/-android-build-mirror/-android-build-mirror/#androidbuildmirror","text":"[jvm]\\ fun AndroidBuildMirror (manufacturer: String , sdkInt: Int )","title":"AndroidBuildMirror"},{"location":"api/shark-android/shark/-android-build-mirror/manufacturer/","text":"// shark-android / shark / AndroidBuildMirror / manufacturer manufacturer \u00b6 [jvm]\\ val manufacturer : String Value of android.os.Build.MANUFACTURER","title":"Manufacturer"},{"location":"api/shark-android/shark/-android-build-mirror/manufacturer/#manufacturer","text":"[jvm]\\ val manufacturer : String Value of android.os.Build.MANUFACTURER","title":"manufacturer"},{"location":"api/shark-android/shark/-android-build-mirror/sdk-int/","text":"// shark-android / shark / AndroidBuildMirror / sdkInt sdkInt \u00b6 [jvm]\\ val sdkInt : Int Value of android.os.Build.VERSION.SDK_INT","title":"Sdk int"},{"location":"api/shark-android/shark/-android-build-mirror/sdk-int/#sdkint","text":"[jvm]\\ val sdkInt : Int Value of android.os.Build.VERSION.SDK_INT","title":"sdkInt"},{"location":"api/shark-android/shark/-android-build-mirror/-companion/","text":"// shark-android / shark / AndroidBuildMirror / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary fromHeapGraph [jvm] fun fromHeapGraph (graph: HeapGraph): AndroidBuildMirror","title":"Index"},{"location":"api/shark-android/shark/-android-build-mirror/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-android/shark/-android-build-mirror/-companion/#functions","text":"Name Summary fromHeapGraph [jvm] fun fromHeapGraph (graph: HeapGraph): AndroidBuildMirror","title":"Functions"},{"location":"api/shark-android/shark/-android-build-mirror/-companion/from-heap-graph/","text":"// shark-android / shark / AndroidBuildMirror / Companion / fromHeapGraph fromHeapGraph \u00b6 [jvm]\\ fun fromHeapGraph (graph: HeapGraph): AndroidBuildMirror See also \u00b6 jvm shark.AndroidBuildMirror","title":"From heap graph"},{"location":"api/shark-android/shark/-android-build-mirror/-companion/from-heap-graph/#fromheapgraph","text":"[jvm]\\ fun fromHeapGraph (graph: HeapGraph): AndroidBuildMirror","title":"fromHeapGraph"},{"location":"api/shark-android/shark/-android-build-mirror/-companion/from-heap-graph/#see-also","text":"jvm shark.AndroidBuildMirror","title":"See also"},{"location":"api/shark-android/shark/-android-metadata-extractor/","text":"// shark-android / shark / AndroidMetadataExtractor AndroidMetadataExtractor \u00b6 [jvm]\\ object AndroidMetadataExtractor : MetadataExtractor Functions \u00b6 Name Summary extractMetadata [jvm] open override fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"Index"},{"location":"api/shark-android/shark/-android-metadata-extractor/#androidmetadataextractor","text":"[jvm]\\ object AndroidMetadataExtractor : MetadataExtractor","title":"AndroidMetadataExtractor"},{"location":"api/shark-android/shark/-android-metadata-extractor/#functions","text":"Name Summary extractMetadata [jvm] open override fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"Functions"},{"location":"api/shark-android/shark/-android-metadata-extractor/extract-metadata/","text":"// shark-android / shark / AndroidMetadataExtractor / extractMetadata extractMetadata \u00b6 [jvm]\\ open override fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"Extract metadata"},{"location":"api/shark-android/shark/-android-metadata-extractor/extract-metadata/#extractmetadata","text":"[jvm]\\ open override fun extractMetadata (graph: HeapGraph): Map < String , String >","title":"extractMetadata"},{"location":"api/shark-android/shark/-android-object-inspectors/","text":"// shark-android / shark / AndroidObjectInspectors AndroidObjectInspectors \u00b6 [jvm]\\ enum AndroidObjectInspectors : Enum < AndroidObjectInspectors > , ObjectInspector A set of default ObjectInspectors that knows about common AOSP and library classes. These are heuristics based on our experience and knowledge of AOSP and various library internals. We only make a decision if we\u2019re reasonably sure the state of an object is unlikely to be the result of a programmer mistake. For example, no matter how many mistakes we make in our code, the value of Activity.mDestroy will not be influenced by those mistakes. Most developers should use the entire set of default ObjectInspector by calling appDefaults , unless there\u2019s a bug and you temporarily want to remove an inspector. Entries \u00b6 OBJECT_ANIMATOR [jvm] OBJECT_ANIMATOR () ANIMATOR [jvm] ANIMATOR () COMPOSITION_IMPL [jvm] COMPOSITION_IMPL () RECOMPOSER [jvm] RECOMPOSER () TOAST [jvm] TOAST () MESSAGE [jvm] MESSAGE () WINDOW [jvm] WINDOW () VIEW_ROOT_IMPL [jvm] VIEW_ROOT_IMPL () MAIN_THREAD [jvm] MAIN_THREAD () COORDINATOR [jvm] COORDINATOR () MORTAR_SCOPE [jvm] MORTAR_SCOPE () MORTAR_PRESENTER [jvm] MORTAR_PRESENTER () LOADED_APK [jvm] LOADED_APK () MESSAGE_QUEUE [jvm] MESSAGE_QUEUE () ANDROIDX_FRAGMENT [jvm] ANDROIDX_FRAGMENT () SUPPORT_FRAGMENT [jvm] SUPPORT_FRAGMENT () FRAGMENT [jvm] FRAGMENT () INPUT_METHOD_MANAGER [jvm] INPUT_METHOD_MANAGER () APPLICATION [jvm] APPLICATION () DIALOG [jvm] DIALOG () CONTEXT_IMPL [jvm] CONTEXT_IMPL () APPLICATION_PACKAGE_MANAGER [jvm] APPLICATION_PACKAGE_MANAGER () CONTEXT_WRAPPER [jvm] CONTEXT_WRAPPER () CONTEXT_FIELD [jvm] CONTEXT_FIELD () SERVICE [jvm] SERVICE () ACTIVITY [jvm] ACTIVITY () EDITOR [jvm] EDITOR () VIEW [jvm] VIEW () Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary inspect [jvm] abstract fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/#androidobjectinspectors","text":"[jvm]\\ enum AndroidObjectInspectors : Enum < AndroidObjectInspectors > , ObjectInspector A set of default ObjectInspectors that knows about common AOSP and library classes. These are heuristics based on our experience and knowledge of AOSP and various library internals. We only make a decision if we\u2019re reasonably sure the state of an object is unlikely to be the result of a programmer mistake. For example, no matter how many mistakes we make in our code, the value of Activity.mDestroy will not be influenced by those mistakes. Most developers should use the entire set of default ObjectInspector by calling appDefaults , unless there\u2019s a bug and you temporarily want to remove an inspector.","title":"AndroidObjectInspectors"},{"location":"api/shark-android/shark/-android-object-inspectors/#entries","text":"OBJECT_ANIMATOR [jvm] OBJECT_ANIMATOR () ANIMATOR [jvm] ANIMATOR () COMPOSITION_IMPL [jvm] COMPOSITION_IMPL () RECOMPOSER [jvm] RECOMPOSER () TOAST [jvm] TOAST () MESSAGE [jvm] MESSAGE () WINDOW [jvm] WINDOW () VIEW_ROOT_IMPL [jvm] VIEW_ROOT_IMPL () MAIN_THREAD [jvm] MAIN_THREAD () COORDINATOR [jvm] COORDINATOR () MORTAR_SCOPE [jvm] MORTAR_SCOPE () MORTAR_PRESENTER [jvm] MORTAR_PRESENTER () LOADED_APK [jvm] LOADED_APK () MESSAGE_QUEUE [jvm] MESSAGE_QUEUE () ANDROIDX_FRAGMENT [jvm] ANDROIDX_FRAGMENT () SUPPORT_FRAGMENT [jvm] SUPPORT_FRAGMENT () FRAGMENT [jvm] FRAGMENT () INPUT_METHOD_MANAGER [jvm] INPUT_METHOD_MANAGER () APPLICATION [jvm] APPLICATION () DIALOG [jvm] DIALOG () CONTEXT_IMPL [jvm] CONTEXT_IMPL () APPLICATION_PACKAGE_MANAGER [jvm] APPLICATION_PACKAGE_MANAGER () CONTEXT_WRAPPER [jvm] CONTEXT_WRAPPER () CONTEXT_FIELD [jvm] CONTEXT_FIELD () SERVICE [jvm] SERVICE () ACTIVITY [jvm] ACTIVITY () EDITOR [jvm] EDITOR () VIEW [jvm] VIEW ()","title":"Entries"},{"location":"api/shark-android/shark/-android-object-inspectors/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-android/shark/-android-object-inspectors/#functions","text":"Name Summary inspect [jvm] abstract fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/","text":"// shark-android / shark / AndroidObjectInspectors / ACTIVITY ACTIVITY \u00b6 [jvm]\\ ACTIVITY () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/#activity","text":"[jvm]\\ ACTIVITY ()","title":"ACTIVITY"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / ACTIVITY / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-c-t-i-v-i-t-y/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/","text":"// shark-android / shark / AndroidObjectInspectors / ANDROIDX_FRAGMENT ANDROIDX_FRAGMENT \u00b6 [jvm]\\ ANDROIDX_FRAGMENT () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/#androidx_fragment","text":"[jvm]\\ ANDROIDX_FRAGMENT ()","title":"ANDROIDX_FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / ANDROIDX_FRAGMENT / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-d-r-o-i-d-x_-f-r-a-g-m-e-n-t/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-i-m-a-t-o-r/","text":"// shark-android / shark / AndroidObjectInspectors / ANIMATOR ANIMATOR \u00b6 [jvm]\\ ANIMATOR () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-i-m-a-t-o-r/#animator","text":"[jvm]\\ ANIMATOR ()","title":"ANIMATOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-i-m-a-t-o-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-i-m-a-t-o-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-i-m-a-t-o-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / ANIMATOR / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-n-i-m-a-t-o-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/","text":"// shark-android / shark / AndroidObjectInspectors / APPLICATION APPLICATION \u00b6 [jvm]\\ APPLICATION () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/#application","text":"[jvm]\\ APPLICATION ()","title":"APPLICATION"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / APPLICATION / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidObjectInspectors / APPLICATION_PACKAGE_MANAGER APPLICATION_PACKAGE_MANAGER \u00b6 [jvm]\\ APPLICATION_PACKAGE_MANAGER () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r/#application_package_manager","text":"[jvm]\\ APPLICATION_PACKAGE_MANAGER ()","title":"APPLICATION_PACKAGE_MANAGER"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / APPLICATION_PACKAGE_MANAGER / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-m-p-o-s-i-t-i-o-n_-i-m-p-l/","text":"// shark-android / shark / AndroidObjectInspectors / COMPOSITION_IMPL COMPOSITION_IMPL \u00b6 [jvm]\\ COMPOSITION_IMPL () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-m-p-o-s-i-t-i-o-n_-i-m-p-l/#composition_impl","text":"[jvm]\\ COMPOSITION_IMPL ()","title":"COMPOSITION_IMPL"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-m-p-o-s-i-t-i-o-n_-i-m-p-l/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-m-p-o-s-i-t-i-o-n_-i-m-p-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-m-p-o-s-i-t-i-o-n_-i-m-p-l/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / COMPOSITION_IMPL / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-m-p-o-s-i-t-i-o-n_-i-m-p-l/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-f-i-e-l-d/","text":"// shark-android / shark / AndroidObjectInspectors / CONTEXT_FIELD CONTEXT_FIELD \u00b6 [jvm]\\ CONTEXT_FIELD () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-f-i-e-l-d/#context_field","text":"[jvm]\\ CONTEXT_FIELD ()","title":"CONTEXT_FIELD"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-f-i-e-l-d/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-f-i-e-l-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-f-i-e-l-d/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / CONTEXT_FIELD / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-f-i-e-l-d/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-i-m-p-l/","text":"// shark-android / shark / AndroidObjectInspectors / CONTEXT_IMPL CONTEXT_IMPL \u00b6 [jvm]\\ CONTEXT_IMPL () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-i-m-p-l/#context_impl","text":"[jvm]\\ CONTEXT_IMPL ()","title":"CONTEXT_IMPL"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-i-m-p-l/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-i-m-p-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-i-m-p-l/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / CONTEXT_IMPL / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-i-m-p-l/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/","text":"// shark-android / shark / AndroidObjectInspectors / CONTEXT_WRAPPER CONTEXT_WRAPPER \u00b6 [jvm]\\ CONTEXT_WRAPPER () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/#context_wrapper","text":"[jvm]\\ CONTEXT_WRAPPER ()","title":"CONTEXT_WRAPPER"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / CONTEXT_WRAPPER / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-n-t-e-x-t_-w-r-a-p-p-e-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/","text":"// shark-android / shark / AndroidObjectInspectors / COORDINATOR COORDINATOR \u00b6 [jvm]\\ COORDINATOR () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/#coordinator","text":"[jvm]\\ COORDINATOR ()","title":"COORDINATOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / COORDINATOR / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-c-o-o-r-d-i-n-a-t-o-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/","text":"// shark-android / shark / AndroidObjectInspectors / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary createLeakingObjectFilters [jvm] fun createLeakingObjectFilters (inspectors: Set < AndroidObjectInspectors >): List <FilteringLeakingObjectFinder.LeakingObjectFilter> Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors . Properties \u00b6 Name Summary appDefaults [jvm] val appDefaults : List <ObjectInspector> appLeakingObjectFilters [jvm] val appLeakingObjectFilters : List <FilteringLeakingObjectFinder.LeakingObjectFilter> Returns a list of LeakingObjectFilter suitable for apps.","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/#functions","text":"Name Summary createLeakingObjectFilters [jvm] fun createLeakingObjectFilters (inspectors: Set < AndroidObjectInspectors >): List <FilteringLeakingObjectFinder.LeakingObjectFilter> Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors .","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/#properties","text":"Name Summary appDefaults [jvm] val appDefaults : List <ObjectInspector> appLeakingObjectFilters [jvm] val appLeakingObjectFilters : List <FilteringLeakingObjectFinder.LeakingObjectFilter> Returns a list of LeakingObjectFilter suitable for apps.","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/app-defaults/","text":"// shark-android / shark / AndroidObjectInspectors / Companion / appDefaults appDefaults \u00b6 [jvm]\\ val appDefaults : List <ObjectInspector> See also \u00b6 jvm shark.AndroidObjectInspectors","title":"App defaults"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/app-defaults/#appdefaults","text":"[jvm]\\ val appDefaults : List <ObjectInspector>","title":"appDefaults"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/app-defaults/#see-also","text":"jvm shark.AndroidObjectInspectors","title":"See also"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/app-leaking-object-filters/","text":"// shark-android / shark / AndroidObjectInspectors / Companion / appLeakingObjectFilters appLeakingObjectFilters \u00b6 [jvm]\\ val appLeakingObjectFilters : List <FilteringLeakingObjectFinder.LeakingObjectFilter> Returns a list of LeakingObjectFilter suitable for apps.","title":"App leaking object filters"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/app-leaking-object-filters/#appleakingobjectfilters","text":"[jvm]\\ val appLeakingObjectFilters : List <FilteringLeakingObjectFinder.LeakingObjectFilter> Returns a list of LeakingObjectFilter suitable for apps.","title":"appLeakingObjectFilters"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/create-leaking-object-filters/","text":"// shark-android / shark / AndroidObjectInspectors / Companion / createLeakingObjectFilters createLeakingObjectFilters \u00b6 [jvm]\\ fun createLeakingObjectFilters (inspectors: Set < AndroidObjectInspectors >): List <FilteringLeakingObjectFinder.LeakingObjectFilter> Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors .","title":"Create leaking object filters"},{"location":"api/shark-android/shark/-android-object-inspectors/-companion/create-leaking-object-filters/#createleakingobjectfilters","text":"[jvm]\\ fun createLeakingObjectFilters (inspectors: Set < AndroidObjectInspectors >): List <FilteringLeakingObjectFinder.LeakingObjectFilter> Creates a list of LeakingObjectFilter based on the passed in AndroidObjectInspectors .","title":"createLeakingObjectFilters"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/","text":"// shark-android / shark / AndroidObjectInspectors / DIALOG DIALOG \u00b6 [jvm]\\ DIALOG () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/#dialog","text":"[jvm]\\ DIALOG ()","title":"DIALOG"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / DIALOG / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-d-i-a-l-o-g/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/","text":"// shark-android / shark / AndroidObjectInspectors / EDITOR EDITOR \u00b6 [jvm]\\ EDITOR () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/#editor","text":"[jvm]\\ EDITOR ()","title":"EDITOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / EDITOR / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-e-d-i-t-o-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/","text":"// shark-android / shark / AndroidObjectInspectors / FRAGMENT FRAGMENT \u00b6 [jvm]\\ FRAGMENT () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/#fragment","text":"[jvm]\\ FRAGMENT ()","title":"FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / FRAGMENT / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-f-r-a-g-m-e-n-t/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidObjectInspectors / INPUT_METHOD_MANAGER INPUT_METHOD_MANAGER \u00b6 [jvm]\\ INPUT_METHOD_MANAGER () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/#input_method_manager","text":"[jvm]\\ INPUT_METHOD_MANAGER ()","title":"INPUT_METHOD_MANAGER"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / INPUT_METHOD_MANAGER / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-l-o-a-d-e-d_-a-p-k/","text":"// shark-android / shark / AndroidObjectInspectors / LOADED_APK LOADED_APK \u00b6 [jvm]\\ LOADED_APK () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-l-o-a-d-e-d_-a-p-k/#loaded_apk","text":"[jvm]\\ LOADED_APK ()","title":"LOADED_APK"},{"location":"api/shark-android/shark/-android-object-inspectors/-l-o-a-d-e-d_-a-p-k/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-l-o-a-d-e-d_-a-p-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-l-o-a-d-e-d_-a-p-k/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / LOADED_APK / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-l-o-a-d-e-d_-a-p-k/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/","text":"// shark-android / shark / AndroidObjectInspectors / MAIN_THREAD MAIN_THREAD \u00b6 [jvm]\\ MAIN_THREAD () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/#main_thread","text":"[jvm]\\ MAIN_THREAD ()","title":"MAIN_THREAD"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / MAIN_THREAD / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-a-i-n_-t-h-r-e-a-d/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e/","text":"// shark-android / shark / AndroidObjectInspectors / MESSAGE MESSAGE \u00b6 [jvm]\\ MESSAGE () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e/#message","text":"[jvm]\\ MESSAGE ()","title":"MESSAGE"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / MESSAGE / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/","text":"// shark-android / shark / AndroidObjectInspectors / MESSAGE_QUEUE MESSAGE_QUEUE \u00b6 [jvm]\\ MESSAGE_QUEUE () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/#message_queue","text":"[jvm]\\ MESSAGE_QUEUE ()","title":"MESSAGE_QUEUE"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / MESSAGE_QUEUE / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-e-s-s-a-g-e_-q-u-e-u-e/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/","text":"// shark-android / shark / AndroidObjectInspectors / MORTAR_PRESENTER MORTAR_PRESENTER \u00b6 [jvm]\\ MORTAR_PRESENTER () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/#mortar_presenter","text":"[jvm]\\ MORTAR_PRESENTER ()","title":"MORTAR_PRESENTER"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / MORTAR_PRESENTER / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-p-r-e-s-e-n-t-e-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/","text":"// shark-android / shark / AndroidObjectInspectors / MORTAR_SCOPE MORTAR_SCOPE \u00b6 [jvm]\\ MORTAR_SCOPE () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/#mortar_scope","text":"[jvm]\\ MORTAR_SCOPE ()","title":"MORTAR_SCOPE"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / MORTAR_SCOPE / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-m-o-r-t-a-r_-s-c-o-p-e/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-o-b-j-e-c-t_-a-n-i-m-a-t-o-r/","text":"// shark-android / shark / AndroidObjectInspectors / OBJECT_ANIMATOR OBJECT_ANIMATOR \u00b6 [jvm]\\ OBJECT_ANIMATOR () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-o-b-j-e-c-t_-a-n-i-m-a-t-o-r/#object_animator","text":"[jvm]\\ OBJECT_ANIMATOR ()","title":"OBJECT_ANIMATOR"},{"location":"api/shark-android/shark/-android-object-inspectors/-o-b-j-e-c-t_-a-n-i-m-a-t-o-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-o-b-j-e-c-t_-a-n-i-m-a-t-o-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-o-b-j-e-c-t_-a-n-i-m-a-t-o-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / OBJECT_ANIMATOR / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-o-b-j-e-c-t_-a-n-i-m-a-t-o-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-r-e-c-o-m-p-o-s-e-r/","text":"// shark-android / shark / AndroidObjectInspectors / RECOMPOSER RECOMPOSER \u00b6 [jvm]\\ RECOMPOSER () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-r-e-c-o-m-p-o-s-e-r/#recomposer","text":"[jvm]\\ RECOMPOSER ()","title":"RECOMPOSER"},{"location":"api/shark-android/shark/-android-object-inspectors/-r-e-c-o-m-p-o-s-e-r/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-r-e-c-o-m-p-o-s-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-r-e-c-o-m-p-o-s-e-r/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / RECOMPOSER / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-r-e-c-o-m-p-o-s-e-r/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-e-r-v-i-c-e/","text":"// shark-android / shark / AndroidObjectInspectors / SERVICE SERVICE \u00b6 [jvm]\\ SERVICE () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-e-r-v-i-c-e/#service","text":"[jvm]\\ SERVICE ()","title":"SERVICE"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-e-r-v-i-c-e/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-e-r-v-i-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-e-r-v-i-c-e/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / SERVICE / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-e-r-v-i-c-e/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/","text":"// shark-android / shark / AndroidObjectInspectors / SUPPORT_FRAGMENT SUPPORT_FRAGMENT \u00b6 [jvm]\\ SUPPORT_FRAGMENT () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/#support_fragment","text":"[jvm]\\ SUPPORT_FRAGMENT ()","title":"SUPPORT_FRAGMENT"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / SUPPORT_FRAGMENT / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-s-u-p-p-o-r-t_-f-r-a-g-m-e-n-t/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/","text":"// shark-android / shark / AndroidObjectInspectors / TOAST TOAST \u00b6 [jvm]\\ TOAST () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/#toast","text":"[jvm]\\ TOAST ()","title":"TOAST"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / TOAST / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-t-o-a-s-t/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/","text":"// shark-android / shark / AndroidObjectInspectors / VIEW VIEW \u00b6 [jvm]\\ VIEW () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/#view","text":"[jvm]\\ VIEW ()","title":"VIEW"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / VIEW / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/","text":"// shark-android / shark / AndroidObjectInspectors / VIEW_ROOT_IMPL VIEW_ROOT_IMPL \u00b6 [jvm]\\ VIEW_ROOT_IMPL () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/#view_root_impl","text":"[jvm]\\ VIEW_ROOT_IMPL ()","title":"VIEW_ROOT_IMPL"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / VIEW_ROOT_IMPL / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-v-i-e-w_-r-o-o-t_-i-m-p-l/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/","text":"// shark-android / shark / AndroidObjectInspectors / WINDOW WINDOW \u00b6 [jvm]\\ WINDOW () Functions \u00b6 Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/#window","text":"[jvm]\\ WINDOW ()","title":"WINDOW"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/#functions","text":"Name Summary inspect [jvm] open override fun inspect (reporter: ObjectReporter)","title":"Functions"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect/","text":"// shark-android / shark / AndroidObjectInspectors / WINDOW / inspect inspect \u00b6 [jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"Inspect"},{"location":"api/shark-android/shark/-android-object-inspectors/-w-i-n-d-o-w/inspect/#inspect","text":"[jvm]\\ open override fun inspect (reporter: ObjectReporter)","title":"inspect"},{"location":"api/shark-android/shark/-android-reference-matchers/","text":"// shark-android / shark / AndroidReferenceMatchers AndroidReferenceMatchers \u00b6 [jvm]\\ enum AndroidReferenceMatchers : Enum < AndroidReferenceMatchers > AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher. AndroidReferenceMatchers is used to build the list of known references that cannot ever create leaks (via IgnoredReferenceMatcher) as well as the list of known leaks in the Android Framework and in manufacturer specific Android implementations. This class is a work in progress. You can help by reporting leak traces that seem to be caused by the Android SDK, here: https://github.com/square/leakcanary/issues/new We filter on SDK versions and Manufacturers because many of those leaks are specific to a given manufacturer implementation, they usually share their builds across multiple models, and the leaks eventually get fixed in newer versions. Most app developers should use appDefaults . However, you can also use a subset of AndroidReferenceMatchers by creating an EnumSet that matches your needs and calling buildKnownReferences . Entries \u00b6 EVENT_RECEIVER__MMESSAGE_QUEUE [jvm] EVENT_RECEIVER__MMESSAGE_QUEUE () LEAK_CANARY_INTERNAL [jvm] LEAK_CANARY_INTERNAL () LEAK_CANARY_HEAP_DUMPER [jvm] LEAK_CANARY_HEAP_DUMPER () LEAK_CANARY_THREAD [jvm] LEAK_CANARY_THREAD () MAIN [jvm] MAIN () FINALIZER_WATCHDOG_DAEMON [jvm] FINALIZER_WATCHDOG_DAEMON () REFERENCES [jvm] REFERENCES () RAZER_TEXT_KEY_LISTENER__MCONTEXT [jvm] RAZER_TEXT_KEY_LISTENER__MCONTEXT () OEM_SCENE_CALL_BLOCKER [jvm] OEM_SCENE_CALL_BLOCKER () EXTENDED_STATUS_BAR_MANAGER [jvm] EXTENDED_STATUS_BAR_MANAGER () DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER [jvm] DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER () INSTRUMENTATION_RECOMMEND_ACTIVITY [jvm] INSTRUMENTATION_RECOMMEND_ACTIVITY () SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL [jvm] SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL () MAPPER_CLIENT [jvm] MAPPER_CLIENT () SMART_COVER_MANAGER [jvm] SMART_COVER_MANAGER () LGCONTEXT__MCONTEXT [jvm] LGCONTEXT__MCONTEXT () BUBBLE_POPUP_HELPER__SHELPER [jvm] BUBBLE_POPUP_HELPER__SHELPER () GESTURE_BOOST_MANAGER [jvm] GESTURE_BOOST_MANAGER () MULTI_WINDOW_DECOR_SUPPORT__MWINDOW [jvm] MULTI_WINDOW_DECOR_SUPPORT__MWINDOW () STATIC_MTARGET_VIEW [jvm] STATIC_MTARGET_VIEW () ACTIVITY_MANAGER_MCONTEXT [jvm] ACTIVITY_MANAGER_MCONTEXT () AUDIO_MANAGER__MCONTEXT_STATIC [jvm] AUDIO_MANAGER__MCONTEXT_STATIC () VIEW_CONFIGURATION__MCONTEXT [jvm] VIEW_CONFIGURATION__MCONTEXT () RESOURCES__MCONTEXT [jvm] RESOURCES__MCONTEXT () PERSONA_MANAGER [jvm] PERSONA_MANAGER () TEXT_VIEW__MLAST_HOVERED_VIEW [jvm] TEXT_VIEW__MLAST_HOVERED_VIEW () AW_RESOURCE__SRESOURCES [jvm] AW_RESOURCE__SRESOURCES () SEM_APP_ICON_SOLUTION [jvm] SEM_APP_ICON_SOLUTION () SEM_PERSONA_MANAGER [jvm] SEM_PERSONA_MANAGER () SEM_EMERGENCY_MANAGER__MCONTEXT [jvm] SEM_EMERGENCY_MANAGER__MCONTEXT () CLIPBOARD_EX_MANAGER [jvm] CLIPBOARD_EX_MANAGER () SEM_CLIPBOARD_MANAGER__MCONTEXT [jvm] SEM_CLIPBOARD_MANAGER__MCONTEXT () CLIPBOARD_UI_MANAGER__SINSTANCE [jvm] CLIPBOARD_UI_MANAGER__SINSTANCE () SPEN_GESTURE_MANAGER [jvm] SPEN_GESTURE_MANAGER () COMPANION_DEVICE_SERVICE__STUB [jvm] COMPANION_DEVICE_SERVICE__STUB () APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY [jvm] APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY () TOAST_TN [jvm] TOAST_TN () CONTROLLED_INPUT_CONNECTION_WRAPPER [jvm] CONTROLLED_INPUT_CONNECTION_WRAPPER () TEXT_TO_SPEECH [jvm] TEXT_TO_SPEECH () ACCESSIBILITY_NODE_ID_MANAGER [jvm] ACCESSIBILITY_NODE_ID_MANAGER () VIEWLOCATIONHOLDER_ROOT [jvm] VIEWLOCATIONHOLDER_ROOT () BACKDROP_FRAME_RENDERER__MDECORVIEW [jvm] BACKDROP_FRAME_RENDERER__MDECORVIEW () MAGNIFIER [jvm] MAGNIFIER () BIOMETRIC_PROMPT [jvm] BIOMETRIC_PROMPT () ACCESSIBILITY_ITERATORS [jvm] ACCESSIBILITY_ITERATORS () ASSIST_STRUCTURE [jvm] ASSIST_STRUCTURE () ACCESSIBILITY_NODE_INFO__MORIGINALTEXT [jvm] ACCESSIBILITY_NODE_INFO__MORIGINALTEXT () CONNECTIVITY_MANAGER__SINSTANCE [jvm] CONNECTIVITY_MANAGER__SINSTANCE () EDITTEXT_BLINK_MESSAGEQUEUE [jvm] EDITTEXT_BLINK_MESSAGEQUEUE () AUDIO_MANAGER [jvm] AUDIO_MANAGER () APP_WIDGET_HOST_CALLBACKS [jvm] APP_WIDGET_HOST_CALLBACKS () USER_MANAGER__SINSTANCE [jvm] USER_MANAGER__SINSTANCE () MEDIA_SCANNER_CONNECTION [jvm] MEDIA_SCANNER_CONNECTION () ACCOUNT_MANAGER [jvm] ACCOUNT_MANAGER () SPEECH_RECOGNIZER [jvm] SPEECH_RECOGNIZER () MEDIA_PROJECTION_CALLBACK [jvm] MEDIA_PROJECTION_CALLBACK () ACTIVITY_CHOOSE_MODEL [jvm] ACTIVITY_CHOOSE_MODEL () SPELL_CHECKER [jvm] SPELL_CHECKER () SPELL_CHECKER_SESSION [jvm] SPELL_CHECKER_SESSION () LAYOUT_TRANSITION [jvm] LAYOUT_TRANSITION () INPUT_METHOD_MANAGER_IS_TERRIBLE [jvm] INPUT_METHOD_MANAGER_IS_TERRIBLE () BLOCKING_QUEUE [jvm] BLOCKING_QUEUE () TEXT_LINE__SCACHED [jvm] TEXT_LINE__SCACHED () MEDIA_SESSION_LEGACY_HELPER__SINSTANCE [jvm] MEDIA_SESSION_LEGACY_HELPER__SINSTANCE () SPAN_CONTROLLER [jvm] SPAN_CONTROLLER () ACTIVITY_CLIENT_RECORD__NEXT_IDLE [jvm] ACTIVITY_CLIENT_RECORD__NEXT_IDLE () IREQUEST_FINISH_CALLBACK [jvm] IREQUEST_FINISH_CALLBACK () Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/#androidreferencematchers","text":"[jvm]\\ enum AndroidReferenceMatchers : Enum < AndroidReferenceMatchers > AndroidReferenceMatchers values add ReferenceMatcher instances to a global list via their add method. A ReferenceMatcher is either a IgnoredReferenceMatcher or a LibraryLeakReferenceMatcher. AndroidReferenceMatchers is used to build the list of known references that cannot ever create leaks (via IgnoredReferenceMatcher) as well as the list of known leaks in the Android Framework and in manufacturer specific Android implementations. This class is a work in progress. You can help by reporting leak traces that seem to be caused by the Android SDK, here: https://github.com/square/leakcanary/issues/new We filter on SDK versions and Manufacturers because many of those leaks are specific to a given manufacturer implementation, they usually share their builds across multiple models, and the leaks eventually get fixed in newer versions. Most app developers should use appDefaults . However, you can also use a subset of AndroidReferenceMatchers by creating an EnumSet that matches your needs and calling buildKnownReferences .","title":"AndroidReferenceMatchers"},{"location":"api/shark-android/shark/-android-reference-matchers/#entries","text":"EVENT_RECEIVER__MMESSAGE_QUEUE [jvm] EVENT_RECEIVER__MMESSAGE_QUEUE () LEAK_CANARY_INTERNAL [jvm] LEAK_CANARY_INTERNAL () LEAK_CANARY_HEAP_DUMPER [jvm] LEAK_CANARY_HEAP_DUMPER () LEAK_CANARY_THREAD [jvm] LEAK_CANARY_THREAD () MAIN [jvm] MAIN () FINALIZER_WATCHDOG_DAEMON [jvm] FINALIZER_WATCHDOG_DAEMON () REFERENCES [jvm] REFERENCES () RAZER_TEXT_KEY_LISTENER__MCONTEXT [jvm] RAZER_TEXT_KEY_LISTENER__MCONTEXT () OEM_SCENE_CALL_BLOCKER [jvm] OEM_SCENE_CALL_BLOCKER () EXTENDED_STATUS_BAR_MANAGER [jvm] EXTENDED_STATUS_BAR_MANAGER () DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER [jvm] DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER () INSTRUMENTATION_RECOMMEND_ACTIVITY [jvm] INSTRUMENTATION_RECOMMEND_ACTIVITY () SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL [jvm] SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL () MAPPER_CLIENT [jvm] MAPPER_CLIENT () SMART_COVER_MANAGER [jvm] SMART_COVER_MANAGER () LGCONTEXT__MCONTEXT [jvm] LGCONTEXT__MCONTEXT () BUBBLE_POPUP_HELPER__SHELPER [jvm] BUBBLE_POPUP_HELPER__SHELPER () GESTURE_BOOST_MANAGER [jvm] GESTURE_BOOST_MANAGER () MULTI_WINDOW_DECOR_SUPPORT__MWINDOW [jvm] MULTI_WINDOW_DECOR_SUPPORT__MWINDOW () STATIC_MTARGET_VIEW [jvm] STATIC_MTARGET_VIEW () ACTIVITY_MANAGER_MCONTEXT [jvm] ACTIVITY_MANAGER_MCONTEXT () AUDIO_MANAGER__MCONTEXT_STATIC [jvm] AUDIO_MANAGER__MCONTEXT_STATIC () VIEW_CONFIGURATION__MCONTEXT [jvm] VIEW_CONFIGURATION__MCONTEXT () RESOURCES__MCONTEXT [jvm] RESOURCES__MCONTEXT () PERSONA_MANAGER [jvm] PERSONA_MANAGER () TEXT_VIEW__MLAST_HOVERED_VIEW [jvm] TEXT_VIEW__MLAST_HOVERED_VIEW () AW_RESOURCE__SRESOURCES [jvm] AW_RESOURCE__SRESOURCES () SEM_APP_ICON_SOLUTION [jvm] SEM_APP_ICON_SOLUTION () SEM_PERSONA_MANAGER [jvm] SEM_PERSONA_MANAGER () SEM_EMERGENCY_MANAGER__MCONTEXT [jvm] SEM_EMERGENCY_MANAGER__MCONTEXT () CLIPBOARD_EX_MANAGER [jvm] CLIPBOARD_EX_MANAGER () SEM_CLIPBOARD_MANAGER__MCONTEXT [jvm] SEM_CLIPBOARD_MANAGER__MCONTEXT () CLIPBOARD_UI_MANAGER__SINSTANCE [jvm] CLIPBOARD_UI_MANAGER__SINSTANCE () SPEN_GESTURE_MANAGER [jvm] SPEN_GESTURE_MANAGER () COMPANION_DEVICE_SERVICE__STUB [jvm] COMPANION_DEVICE_SERVICE__STUB () APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY [jvm] APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY () TOAST_TN [jvm] TOAST_TN () CONTROLLED_INPUT_CONNECTION_WRAPPER [jvm] CONTROLLED_INPUT_CONNECTION_WRAPPER () TEXT_TO_SPEECH [jvm] TEXT_TO_SPEECH () ACCESSIBILITY_NODE_ID_MANAGER [jvm] ACCESSIBILITY_NODE_ID_MANAGER () VIEWLOCATIONHOLDER_ROOT [jvm] VIEWLOCATIONHOLDER_ROOT () BACKDROP_FRAME_RENDERER__MDECORVIEW [jvm] BACKDROP_FRAME_RENDERER__MDECORVIEW () MAGNIFIER [jvm] MAGNIFIER () BIOMETRIC_PROMPT [jvm] BIOMETRIC_PROMPT () ACCESSIBILITY_ITERATORS [jvm] ACCESSIBILITY_ITERATORS () ASSIST_STRUCTURE [jvm] ASSIST_STRUCTURE () ACCESSIBILITY_NODE_INFO__MORIGINALTEXT [jvm] ACCESSIBILITY_NODE_INFO__MORIGINALTEXT () CONNECTIVITY_MANAGER__SINSTANCE [jvm] CONNECTIVITY_MANAGER__SINSTANCE () EDITTEXT_BLINK_MESSAGEQUEUE [jvm] EDITTEXT_BLINK_MESSAGEQUEUE () AUDIO_MANAGER [jvm] AUDIO_MANAGER () APP_WIDGET_HOST_CALLBACKS [jvm] APP_WIDGET_HOST_CALLBACKS () USER_MANAGER__SINSTANCE [jvm] USER_MANAGER__SINSTANCE () MEDIA_SCANNER_CONNECTION [jvm] MEDIA_SCANNER_CONNECTION () ACCOUNT_MANAGER [jvm] ACCOUNT_MANAGER () SPEECH_RECOGNIZER [jvm] SPEECH_RECOGNIZER () MEDIA_PROJECTION_CALLBACK [jvm] MEDIA_PROJECTION_CALLBACK () ACTIVITY_CHOOSE_MODEL [jvm] ACTIVITY_CHOOSE_MODEL () SPELL_CHECKER [jvm] SPELL_CHECKER () SPELL_CHECKER_SESSION [jvm] SPELL_CHECKER_SESSION () LAYOUT_TRANSITION [jvm] LAYOUT_TRANSITION () INPUT_METHOD_MANAGER_IS_TERRIBLE [jvm] INPUT_METHOD_MANAGER_IS_TERRIBLE () BLOCKING_QUEUE [jvm] BLOCKING_QUEUE () TEXT_LINE__SCACHED [jvm] TEXT_LINE__SCACHED () MEDIA_SESSION_LEGACY_HELPER__SINSTANCE [jvm] MEDIA_SESSION_LEGACY_HELPER__SINSTANCE () SPAN_CONTROLLER [jvm] SPAN_CONTROLLER () ACTIVITY_CLIENT_RECORD__NEXT_IDLE [jvm] ACTIVITY_CLIENT_RECORD__NEXT_IDLE () IREQUEST_FINISH_CALLBACK [jvm] IREQUEST_FINISH_CALLBACK ()","title":"Entries"},{"location":"api/shark-android/shark/-android-reference-matchers/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-android/shark/-android-reference-matchers/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-i-t-e-r-a-t-o-r-s/","text":"// shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_ITERATORS ACCESSIBILITY_ITERATORS \u00b6 [jvm]\\ ACCESSIBILITY_ITERATORS () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-i-t-e-r-a-t-o-r-s/#accessibility_iterators","text":"[jvm]\\ ACCESSIBILITY_ITERATORS ()","title":"ACCESSIBILITY_ITERATORS"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-i-t-e-r-a-t-o-r-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_NODE_ID_MANAGER ACCESSIBILITY_NODE_ID_MANAGER \u00b6 [jvm]\\ ACCESSIBILITY_NODE_ID_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r/#accessibility_node_id_manager","text":"[jvm]\\ ACCESSIBILITY_NODE_ID_MANAGER ()","title":"ACCESSIBILITY_NODE_ID_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-d_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ACCESSIBILITY_NODE_INFO__MORIGINALTEXT \u00b6 [jvm]\\ ACCESSIBILITY_NODE_INFO__MORIGINALTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t/#accessibility_node_info__moriginaltext","text":"[jvm]\\ ACCESSIBILITY_NODE_INFO__MORIGINALTEXT ()","title":"ACCESSIBILITY_NODE_INFO__MORIGINALTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-e-s-s-i-b-i-l-i-t-y_-n-o-d-e_-i-n-f-o__-m-o-r-i-g-i-n-a-l-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / ACCOUNT_MANAGER ACCOUNT_MANAGER \u00b6 [jvm]\\ ACCOUNT_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r/#account_manager","text":"[jvm]\\ ACCOUNT_MANAGER ()","title":"ACCOUNT_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-c-o-u-n-t_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l/","text":"// shark-android / shark / AndroidReferenceMatchers / ACTIVITY_CHOOSE_MODEL ACTIVITY_CHOOSE_MODEL \u00b6 [jvm]\\ ACTIVITY_CHOOSE_MODEL () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l/#activity_choose_model","text":"[jvm]\\ ACTIVITY_CHOOSE_MODEL ()","title":"ACTIVITY_CHOOSE_MODEL"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-h-o-o-s-e_-m-o-d-e-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e/","text":"// shark-android / shark / AndroidReferenceMatchers / ACTIVITY_CLIENT_RECORD__NEXT_IDLE ACTIVITY_CLIENT_RECORD__NEXT_IDLE \u00b6 [jvm]\\ ACTIVITY_CLIENT_RECORD__NEXT_IDLE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e/#activity_client_record__next_idle","text":"[jvm]\\ ACTIVITY_CLIENT_RECORD__NEXT_IDLE ()","title":"ACTIVITY_CLIENT_RECORD__NEXT_IDLE"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-c-l-i-e-n-t_-r-e-c-o-r-d__-n-e-x-t_-i-d-l-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / ACTIVITY_MANAGER_MCONTEXT ACTIVITY_MANAGER_MCONTEXT \u00b6 [jvm]\\ ACTIVITY_MANAGER_MCONTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t/#activity_manager_mcontext","text":"[jvm]\\ ACTIVITY_MANAGER_MCONTEXT ()","title":"ACTIVITY_MANAGER_MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-c-t-i-v-i-t-y_-m-a-n-a-g-e-r_-m-c-o-n-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r__-h-a-s_-s-y-s-t-e-m_-f-e-a-t-u-r-e_-q-u-e-r-y/","text":"// shark-android / shark / AndroidReferenceMatchers / APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY \u00b6 [jvm]\\ APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r__-h-a-s_-s-y-s-t-e-m_-f-e-a-t-u-r-e_-q-u-e-r-y/#application_package_manager__has_system_feature_query","text":"[jvm]\\ APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY ()","title":"APPLICATION_PACKAGE_MANAGER__HAS_SYSTEM_FEATURE_QUERY"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p-l-i-c-a-t-i-o-n_-p-a-c-k-a-g-e_-m-a-n-a-g-e-r__-h-a-s_-s-y-s-t-e-m_-f-e-a-t-u-r-e_-q-u-e-r-y/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s/","text":"// shark-android / shark / AndroidReferenceMatchers / APP_WIDGET_HOST_CALLBACKS APP_WIDGET_HOST_CALLBACKS \u00b6 [jvm]\\ APP_WIDGET_HOST_CALLBACKS () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s/#app_widget_host_callbacks","text":"[jvm]\\ APP_WIDGET_HOST_CALLBACKS ()","title":"APP_WIDGET_HOST_CALLBACKS"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-p-p_-w-i-d-g-e-t_-h-o-s-t_-c-a-l-l-b-a-c-k-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-s-s-i-s-t_-s-t-r-u-c-t-u-r-e/","text":"// shark-android / shark / AndroidReferenceMatchers / ASSIST_STRUCTURE ASSIST_STRUCTURE \u00b6 [jvm]\\ ASSIST_STRUCTURE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-s-s-i-s-t_-s-t-r-u-c-t-u-r-e/#assist_structure","text":"[jvm]\\ ASSIST_STRUCTURE ()","title":"ASSIST_STRUCTURE"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-s-s-i-s-t_-s-t-r-u-c-t-u-r-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / AUDIO_MANAGER AUDIO_MANAGER \u00b6 [jvm]\\ AUDIO_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r/#audio_manager","text":"[jvm]\\ AUDIO_MANAGER ()","title":"AUDIO_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c/","text":"// shark-android / shark / AndroidReferenceMatchers / AUDIO_MANAGER__MCONTEXT_STATIC AUDIO_MANAGER__MCONTEXT_STATIC \u00b6 [jvm]\\ AUDIO_MANAGER__MCONTEXT_STATIC () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c/#audio_manager__mcontext_static","text":"[jvm]\\ AUDIO_MANAGER__MCONTEXT_STATIC ()","title":"AUDIO_MANAGER__MCONTEXT_STATIC"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-u-d-i-o_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t_-s-t-a-t-i-c/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s/","text":"// shark-android / shark / AndroidReferenceMatchers / AW_RESOURCE__SRESOURCES AW_RESOURCE__SRESOURCES \u00b6 [jvm]\\ AW_RESOURCE__SRESOURCES () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s/#aw_resource__sresources","text":"[jvm]\\ AW_RESOURCE__SRESOURCES ()","title":"AW_RESOURCE__SRESOURCES"},{"location":"api/shark-android/shark/-android-reference-matchers/-a-w_-r-e-s-o-u-r-c-e__-s-r-e-s-o-u-r-c-e-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w/","text":"// shark-android / shark / AndroidReferenceMatchers / BACKDROP_FRAME_RENDERER__MDECORVIEW BACKDROP_FRAME_RENDERER__MDECORVIEW \u00b6 [jvm]\\ BACKDROP_FRAME_RENDERER__MDECORVIEW () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w/#backdrop_frame_renderer__mdecorview","text":"[jvm]\\ BACKDROP_FRAME_RENDERER__MDECORVIEW ()","title":"BACKDROP_FRAME_RENDERER__MDECORVIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-a-c-k-d-r-o-p_-f-r-a-m-e_-r-e-n-d-e-r-e-r__-m-d-e-c-o-r-v-i-e-w/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t/","text":"// shark-android / shark / AndroidReferenceMatchers / BIOMETRIC_PROMPT BIOMETRIC_PROMPT \u00b6 [jvm]\\ BIOMETRIC_PROMPT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t/#biometric_prompt","text":"[jvm]\\ BIOMETRIC_PROMPT ()","title":"BIOMETRIC_PROMPT"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-i-o-m-e-t-r-i-c_-p-r-o-m-p-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e/","text":"// shark-android / shark / AndroidReferenceMatchers / BLOCKING_QUEUE BLOCKING_QUEUE \u00b6 [jvm]\\ BLOCKING_QUEUE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e/#blocking_queue","text":"[jvm]\\ BLOCKING_QUEUE ()","title":"BLOCKING_QUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-l-o-c-k-i-n-g_-q-u-e-u-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / BUBBLE_POPUP_HELPER__SHELPER BUBBLE_POPUP_HELPER__SHELPER \u00b6 [jvm]\\ BUBBLE_POPUP_HELPER__SHELPER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r/#bubble_popup_helper__shelper","text":"[jvm]\\ BUBBLE_POPUP_HELPER__SHELPER ()","title":"BUBBLE_POPUP_HELPER__SHELPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-b-u-b-b-l-e_-p-o-p-u-p_-h-e-l-p-e-r__-s-h-e-l-p-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / CLIPBOARD_EX_MANAGER CLIPBOARD_EX_MANAGER \u00b6 [jvm]\\ CLIPBOARD_EX_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r/#clipboard_ex_manager","text":"[jvm]\\ CLIPBOARD_EX_MANAGER ()","title":"CLIPBOARD_EX_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-e-x_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"// shark-android / shark / AndroidReferenceMatchers / CLIPBOARD_UI_MANAGER__SINSTANCE CLIPBOARD_UI_MANAGER__SINSTANCE \u00b6 [jvm]\\ CLIPBOARD_UI_MANAGER__SINSTANCE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#clipboard_ui_manager__sinstance","text":"[jvm]\\ CLIPBOARD_UI_MANAGER__SINSTANCE ()","title":"CLIPBOARD_UI_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-l-i-p-b-o-a-r-d_-u-i_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-m-p-a-n-i-o-n_-d-e-v-i-c-e_-s-e-r-v-i-c-e__-s-t-u-b/","text":"// shark-android / shark / AndroidReferenceMatchers / COMPANION_DEVICE_SERVICE__STUB COMPANION_DEVICE_SERVICE__STUB \u00b6 [jvm]\\ COMPANION_DEVICE_SERVICE__STUB () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-m-p-a-n-i-o-n_-d-e-v-i-c-e_-s-e-r-v-i-c-e__-s-t-u-b/#companion_device_service__stub","text":"[jvm]\\ COMPANION_DEVICE_SERVICE__STUB ()","title":"COMPANION_DEVICE_SERVICE__STUB"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-m-p-a-n-i-o-n_-d-e-v-i-c-e_-s-e-r-v-i-c-e__-s-t-u-b/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"// shark-android / shark / AndroidReferenceMatchers / CONNECTIVITY_MANAGER__SINSTANCE CONNECTIVITY_MANAGER__SINSTANCE \u00b6 [jvm]\\ CONNECTIVITY_MANAGER__SINSTANCE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#connectivity_manager__sinstance","text":"[jvm]\\ CONNECTIVITY_MANAGER__SINSTANCE ()","title":"CONNECTIVITY_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-n-e-c-t-i-v-i-t-y_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-t-r-o-l-l-e-d_-i-n-p-u-t_-c-o-n-n-e-c-t-i-o-n_-w-r-a-p-p-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / CONTROLLED_INPUT_CONNECTION_WRAPPER CONTROLLED_INPUT_CONNECTION_WRAPPER \u00b6 [jvm]\\ CONTROLLED_INPUT_CONNECTION_WRAPPER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-t-r-o-l-l-e-d_-i-n-p-u-t_-c-o-n-n-e-c-t-i-o-n_-w-r-a-p-p-e-r/#controlled_input_connection_wrapper","text":"[jvm]\\ CONTROLLED_INPUT_CONNECTION_WRAPPER ()","title":"CONTROLLED_INPUT_CONNECTION_WRAPPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-c-o-n-t-r-o-l-l-e-d_-i-n-p-u-t_-c-o-n-n-e-c-t-i-o-n_-w-r-a-p-p-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary buildKnownReferences [jvm] @ JvmStatic fun buildKnownReferences (referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers . ignoredInstanceField [jvm] @ JvmStatic fun ignoredInstanceField (className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern. ignoredJavaLocal [jvm] @ JvmStatic fun ignoredJavaLocal (threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern. instanceFieldLeak [jvm] @ JvmStatic fun instanceFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern. description should convey what we know about this library leak. nativeGlobalVariableLeak [jvm] @ JvmStatic fun nativeGlobalVariableLeak (className: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher staticFieldLeak [jvm] @ JvmStatic fun staticFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern. description should convey what we know about this library leak. Properties \u00b6 Name Summary appDefaults [jvm] @ JvmStatic val appDefaults : List <ReferenceMatcher> HUAWEI [jvm] const val HUAWEI : String ignoredReferencesOnly [jvm] @ JvmStatic val ignoredReferencesOnly : List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher. LENOVO [jvm] const val LENOVO : String LG [jvm] const val LG : String MEIZU [jvm] const val MEIZU : String MOTOROLA [jvm] const val MOTOROLA : String NVIDIA [jvm] const val NVIDIA : String ONE_PLUS [jvm] const val ONE_PLUS : String RAZER [jvm] const val RAZER : String SAMSUNG [jvm] const val SAMSUNG : String SHARP [jvm] const val SHARP : String VIVO [jvm] const val VIVO : String","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/#functions","text":"Name Summary buildKnownReferences [jvm] @ JvmStatic fun buildKnownReferences (referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers . ignoredInstanceField [jvm] @ JvmStatic fun ignoredInstanceField (className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern. ignoredJavaLocal [jvm] @ JvmStatic fun ignoredJavaLocal (threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern. instanceFieldLeak [jvm] @ JvmStatic fun instanceFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern. description should convey what we know about this library leak. nativeGlobalVariableLeak [jvm] @ JvmStatic fun nativeGlobalVariableLeak (className: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher staticFieldLeak [jvm] @ JvmStatic fun staticFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern. description should convey what we know about this library leak.","title":"Functions"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/#properties","text":"Name Summary appDefaults [jvm] @ JvmStatic val appDefaults : List <ReferenceMatcher> HUAWEI [jvm] const val HUAWEI : String ignoredReferencesOnly [jvm] @ JvmStatic val ignoredReferencesOnly : List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher. LENOVO [jvm] const val LENOVO : String LG [jvm] const val LG : String MEIZU [jvm] const val MEIZU : String MOTOROLA [jvm] const val MOTOROLA : String NVIDIA [jvm] const val NVIDIA : String ONE_PLUS [jvm] const val ONE_PLUS : String RAZER [jvm] const val RAZER : String SAMSUNG [jvm] const val SAMSUNG : String SHARP [jvm] const val SHARP : String VIVO [jvm] const val VIVO : String","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-h-u-a-w-e-i/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / HUAWEI HUAWEI \u00b6 [jvm]\\ const val HUAWEI : String","title":" h u a w e i"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-h-u-a-w-e-i/#huawei","text":"[jvm]\\ const val HUAWEI : String","title":"HUAWEI"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-l-e-n-o-v-o/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / LENOVO LENOVO \u00b6 [jvm]\\ const val LENOVO : String","title":" l e n o v o"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-l-e-n-o-v-o/#lenovo","text":"[jvm]\\ const val LENOVO : String","title":"LENOVO"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-l-g/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / LG LG \u00b6 [jvm]\\ const val LG : String","title":" l g"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-l-g/#lg","text":"[jvm]\\ const val LG : String","title":"LG"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-m-e-i-z-u/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / MEIZU MEIZU \u00b6 [jvm]\\ const val MEIZU : String","title":" m e i z u"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-m-e-i-z-u/#meizu","text":"[jvm]\\ const val MEIZU : String","title":"MEIZU"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-m-o-t-o-r-o-l-a/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / MOTOROLA MOTOROLA \u00b6 [jvm]\\ const val MOTOROLA : String","title":" m o t o r o l a"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-m-o-t-o-r-o-l-a/#motorola","text":"[jvm]\\ const val MOTOROLA : String","title":"MOTOROLA"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-n-v-i-d-i-a/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / NVIDIA NVIDIA \u00b6 [jvm]\\ const val NVIDIA : String","title":" n v i d i a"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-n-v-i-d-i-a/#nvidia","text":"[jvm]\\ const val NVIDIA : String","title":"NVIDIA"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-o-n-e_-p-l-u-s/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / ONE_PLUS ONE_PLUS \u00b6 [jvm]\\ const val ONE_PLUS : String","title":" o n e  p l u s"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-o-n-e_-p-l-u-s/#one_plus","text":"[jvm]\\ const val ONE_PLUS : String","title":"ONE_PLUS"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-r-a-z-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / RAZER RAZER \u00b6 [jvm]\\ const val RAZER : String","title":" r a z e r"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-r-a-z-e-r/#razer","text":"[jvm]\\ const val RAZER : String","title":"RAZER"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-s-a-m-s-u-n-g/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / SAMSUNG SAMSUNG \u00b6 [jvm]\\ const val SAMSUNG : String","title":" s a m s u n g"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-s-a-m-s-u-n-g/#samsung","text":"[jvm]\\ const val SAMSUNG : String","title":"SAMSUNG"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-s-h-a-r-p/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / SHARP SHARP \u00b6 [jvm]\\ const val SHARP : String","title":" s h a r p"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-s-h-a-r-p/#sharp","text":"[jvm]\\ const val SHARP : String","title":"SHARP"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-v-i-v-o/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / VIVO VIVO \u00b6 [jvm]\\ const val VIVO : String","title":" v i v o"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/-v-i-v-o/#vivo","text":"[jvm]\\ const val VIVO : String","title":"VIVO"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/app-defaults/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / appDefaults appDefaults \u00b6 [jvm]\\ @ JvmStatic val appDefaults : List <ReferenceMatcher> See also \u00b6 jvm shark.AndroidReferenceMatchers","title":"App defaults"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/app-defaults/#appdefaults","text":"[jvm]\\ @ JvmStatic val appDefaults : List <ReferenceMatcher>","title":"appDefaults"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/app-defaults/#see-also","text":"jvm shark.AndroidReferenceMatchers","title":"See also"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/build-known-references/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / buildKnownReferences buildKnownReferences \u00b6 [jvm]\\ @ JvmStatic fun buildKnownReferences (referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers .","title":"Build known references"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/build-known-references/#buildknownreferences","text":"[jvm]\\ @ JvmStatic fun buildKnownReferences (referenceMatchers: Set < AndroidReferenceMatchers >): List <ReferenceMatcher> Builds a list of ReferenceMatcher from the referenceMatchers set of AndroidReferenceMatchers .","title":"buildKnownReferences"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/ignored-instance-field/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / ignoredInstanceField ignoredInstanceField \u00b6 [jvm]\\ @ JvmStatic fun ignoredInstanceField (className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern.","title":"Ignored instance field"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/ignored-instance-field/#ignoredinstancefield","text":"[jvm]\\ @ JvmStatic fun ignoredInstanceField (className: String , fieldName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a InstanceFieldPattern.","title":"ignoredInstanceField"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/ignored-java-local/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / ignoredJavaLocal ignoredJavaLocal \u00b6 [jvm]\\ @ JvmStatic fun ignoredJavaLocal (threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern.","title":"Ignored java local"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/ignored-java-local/#ignoredjavalocal","text":"[jvm]\\ @ JvmStatic fun ignoredJavaLocal (threadName: String ): IgnoredReferenceMatcher Creates a IgnoredReferenceMatcher that matches a JavaLocalPattern.","title":"ignoredJavaLocal"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/ignored-references-only/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / ignoredReferencesOnly ignoredReferencesOnly \u00b6 [jvm]\\ @ JvmStatic val ignoredReferencesOnly : List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher.","title":"Ignored references only"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/ignored-references-only/#ignoredreferencesonly","text":"[jvm]\\ @ JvmStatic val ignoredReferencesOnly : List <ReferenceMatcher> Returns a list of ReferenceMatcher that only contains IgnoredReferenceMatcher and no LibraryLeakReferenceMatcher.","title":"ignoredReferencesOnly"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/instance-field-leak/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / instanceFieldLeak instanceFieldLeak \u00b6 [jvm]\\ @ JvmStatic fun instanceFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern. description should convey what we know about this library leak.","title":"Instance field leak"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/instance-field-leak/#instancefieldleak","text":"[jvm]\\ @ JvmStatic fun instanceFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a InstanceFieldPattern. description should convey what we know about this library leak.","title":"instanceFieldLeak"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/native-global-variable-leak/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / nativeGlobalVariableLeak nativeGlobalVariableLeak \u00b6 [jvm]\\ @ JvmStatic fun nativeGlobalVariableLeak (className: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher","title":"Native global variable leak"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/native-global-variable-leak/#nativeglobalvariableleak","text":"[jvm]\\ @ JvmStatic fun nativeGlobalVariableLeak (className: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher","title":"nativeGlobalVariableLeak"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/static-field-leak/","text":"// shark-android / shark / AndroidReferenceMatchers / Companion / staticFieldLeak staticFieldLeak \u00b6 [jvm]\\ @ JvmStatic fun staticFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern. description should convey what we know about this library leak.","title":"Static field leak"},{"location":"api/shark-android/shark/-android-reference-matchers/-companion/static-field-leak/#staticfieldleak","text":"[jvm]\\ @ JvmStatic fun staticFieldLeak (className: String , fieldName: String , description: String = \u201c\u201d, patternApplies: AndroidBuildMirror .() -> Boolean = ALWAYS): LibraryLeakReferenceMatcher Creates a LibraryLeakReferenceMatcher that matches a StaticFieldPattern. description should convey what we know about this library leak.","title":"staticFieldLeak"},{"location":"api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER \u00b6 [jvm]\\ DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r/#device_policy_manager__settings_observer","text":"[jvm]\\ DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER ()","title":"DEVICE_POLICY_MANAGER__SETTINGS_OBSERVER"},{"location":"api/shark-android/shark/-android-reference-matchers/-d-e-v-i-c-e_-p-o-l-i-c-y_-m-a-n-a-g-e-r__-s-e-t-t-i-n-g-s_-o-b-s-e-r-v-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e/","text":"// shark-android / shark / AndroidReferenceMatchers / EDITTEXT_BLINK_MESSAGEQUEUE EDITTEXT_BLINK_MESSAGEQUEUE \u00b6 [jvm]\\ EDITTEXT_BLINK_MESSAGEQUEUE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e/#edittext_blink_messagequeue","text":"[jvm]\\ EDITTEXT_BLINK_MESSAGEQUEUE ()","title":"EDITTEXT_BLINK_MESSAGEQUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-d-i-t-t-e-x-t_-b-l-i-n-k_-m-e-s-s-a-g-e-q-u-e-u-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e/","text":"// shark-android / shark / AndroidReferenceMatchers / EVENT_RECEIVER__MMESSAGE_QUEUE EVENT_RECEIVER__MMESSAGE_QUEUE \u00b6 [jvm]\\ EVENT_RECEIVER__MMESSAGE_QUEUE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e/#event_receiver__mmessage_queue","text":"[jvm]\\ EVENT_RECEIVER__MMESSAGE_QUEUE ()","title":"EVENT_RECEIVER__MMESSAGE_QUEUE"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-v-e-n-t_-r-e-c-e-i-v-e-r__-m-m-e-s-s-a-g-e_-q-u-e-u-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-x-t-e-n-d-e-d_-s-t-a-t-u-s_-b-a-r_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / EXTENDED_STATUS_BAR_MANAGER EXTENDED_STATUS_BAR_MANAGER \u00b6 [jvm]\\ EXTENDED_STATUS_BAR_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-x-t-e-n-d-e-d_-s-t-a-t-u-s_-b-a-r_-m-a-n-a-g-e-r/#extended_status_bar_manager","text":"[jvm]\\ EXTENDED_STATUS_BAR_MANAGER ()","title":"EXTENDED_STATUS_BAR_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-e-x-t-e-n-d-e-d_-s-t-a-t-u-s_-b-a-r_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n/","text":"// shark-android / shark / AndroidReferenceMatchers / FINALIZER_WATCHDOG_DAEMON FINALIZER_WATCHDOG_DAEMON \u00b6 [jvm]\\ FINALIZER_WATCHDOG_DAEMON () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n/#finalizer_watchdog_daemon","text":"[jvm]\\ FINALIZER_WATCHDOG_DAEMON ()","title":"FINALIZER_WATCHDOG_DAEMON"},{"location":"api/shark-android/shark/-android-reference-matchers/-f-i-n-a-l-i-z-e-r_-w-a-t-c-h-d-o-g_-d-a-e-m-o-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / GESTURE_BOOST_MANAGER GESTURE_BOOST_MANAGER \u00b6 [jvm]\\ GESTURE_BOOST_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r/#gesture_boost_manager","text":"[jvm]\\ GESTURE_BOOST_MANAGER ()","title":"GESTURE_BOOST_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-g-e-s-t-u-r-e_-b-o-o-s-t_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e/","text":"// shark-android / shark / AndroidReferenceMatchers / INPUT_METHOD_MANAGER_IS_TERRIBLE INPUT_METHOD_MANAGER_IS_TERRIBLE \u00b6 [jvm]\\ INPUT_METHOD_MANAGER_IS_TERRIBLE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e/#input_method_manager_is_terrible","text":"[jvm]\\ INPUT_METHOD_MANAGER_IS_TERRIBLE ()","title":"INPUT_METHOD_MANAGER_IS_TERRIBLE"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-p-u-t_-m-e-t-h-o-d_-m-a-n-a-g-e-r_-i-s_-t-e-r-r-i-b-l-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y/","text":"// shark-android / shark / AndroidReferenceMatchers / INSTRUMENTATION_RECOMMEND_ACTIVITY INSTRUMENTATION_RECOMMEND_ACTIVITY \u00b6 [jvm]\\ INSTRUMENTATION_RECOMMEND_ACTIVITY () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y/#instrumentation_recommend_activity","text":"[jvm]\\ INSTRUMENTATION_RECOMMEND_ACTIVITY ()","title":"INSTRUMENTATION_RECOMMEND_ACTIVITY"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-n-s-t-r-u-m-e-n-t-a-t-i-o-n_-r-e-c-o-m-m-e-n-d_-a-c-t-i-v-i-t-y/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-r-e-q-u-e-s-t_-f-i-n-i-s-h_-c-a-l-l-b-a-c-k/","text":"// shark-android / shark / AndroidReferenceMatchers / IREQUEST_FINISH_CALLBACK IREQUEST_FINISH_CALLBACK \u00b6 [jvm]\\ IREQUEST_FINISH_CALLBACK () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-r-e-q-u-e-s-t_-f-i-n-i-s-h_-c-a-l-l-b-a-c-k/#irequest_finish_callback","text":"[jvm]\\ IREQUEST_FINISH_CALLBACK ()","title":"IREQUEST_FINISH_CALLBACK"},{"location":"api/shark-android/shark/-android-reference-matchers/-i-r-e-q-u-e-s-t_-f-i-n-i-s-h_-c-a-l-l-b-a-c-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n/","text":"// shark-android / shark / AndroidReferenceMatchers / LAYOUT_TRANSITION LAYOUT_TRANSITION \u00b6 [jvm]\\ LAYOUT_TRANSITION () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n/#layout_transition","text":"[jvm]\\ LAYOUT_TRANSITION ()","title":"LAYOUT_TRANSITION"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-a-y-o-u-t_-t-r-a-n-s-i-t-i-o-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_HEAP_DUMPER LEAK_CANARY_HEAP_DUMPER \u00b6 [jvm]\\ LEAK_CANARY_HEAP_DUMPER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r/#leak_canary_heap_dumper","text":"[jvm]\\ LEAK_CANARY_HEAP_DUMPER ()","title":"LEAK_CANARY_HEAP_DUMPER"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-h-e-a-p_-d-u-m-p-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l/","text":"// shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_INTERNAL LEAK_CANARY_INTERNAL \u00b6 [jvm]\\ LEAK_CANARY_INTERNAL () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l/#leak_canary_internal","text":"[jvm]\\ LEAK_CANARY_INTERNAL ()","title":"LEAK_CANARY_INTERNAL"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-i-n-t-e-r-n-a-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d/","text":"// shark-android / shark / AndroidReferenceMatchers / LEAK_CANARY_THREAD LEAK_CANARY_THREAD \u00b6 [jvm]\\ LEAK_CANARY_THREAD () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d/#leak_canary_thread","text":"[jvm]\\ LEAK_CANARY_THREAD ()","title":"LEAK_CANARY_THREAD"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-e-a-k_-c-a-n-a-r-y_-t-h-r-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / LGCONTEXT__MCONTEXT LGCONTEXT__MCONTEXT \u00b6 [jvm]\\ LGCONTEXT__MCONTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t/#lgcontext__mcontext","text":"[jvm]\\ LGCONTEXT__MCONTEXT ()","title":"LGCONTEXT__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-l-g-c-o-n-t-e-x-t__-m-c-o-n-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / MAGNIFIER MAGNIFIER \u00b6 [jvm]\\ MAGNIFIER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r/#magnifier","text":"[jvm]\\ MAGNIFIER ()","title":"MAGNIFIER"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-g-n-i-f-i-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-i-n/","text":"// shark-android / shark / AndroidReferenceMatchers / MAIN MAIN \u00b6 [jvm]\\ MAIN () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-i-n/#main","text":"[jvm]\\ MAIN ()","title":"MAIN"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-i-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t/","text":"// shark-android / shark / AndroidReferenceMatchers / MAPPER_CLIENT MAPPER_CLIENT \u00b6 [jvm]\\ MAPPER_CLIENT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t/#mapper_client","text":"[jvm]\\ MAPPER_CLIENT ()","title":"MAPPER_CLIENT"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-a-p-p-e-r_-c-l-i-e-n-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k/","text":"// shark-android / shark / AndroidReferenceMatchers / MEDIA_PROJECTION_CALLBACK MEDIA_PROJECTION_CALLBACK \u00b6 [jvm]\\ MEDIA_PROJECTION_CALLBACK () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k/#media_projection_callback","text":"[jvm]\\ MEDIA_PROJECTION_CALLBACK ()","title":"MEDIA_PROJECTION_CALLBACK"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-p-r-o-j-e-c-t-i-o-n_-c-a-l-l-b-a-c-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n/","text":"// shark-android / shark / AndroidReferenceMatchers / MEDIA_SCANNER_CONNECTION MEDIA_SCANNER_CONNECTION \u00b6 [jvm]\\ MEDIA_SCANNER_CONNECTION () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n/#media_scanner_connection","text":"[jvm]\\ MEDIA_SCANNER_CONNECTION ()","title":"MEDIA_SCANNER_CONNECTION"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-c-a-n-n-e-r_-c-o-n-n-e-c-t-i-o-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e/","text":"// shark-android / shark / AndroidReferenceMatchers / MEDIA_SESSION_LEGACY_HELPER__SINSTANCE MEDIA_SESSION_LEGACY_HELPER__SINSTANCE \u00b6 [jvm]\\ MEDIA_SESSION_LEGACY_HELPER__SINSTANCE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e/#media_session_legacy_helper__sinstance","text":"[jvm]\\ MEDIA_SESSION_LEGACY_HELPER__SINSTANCE ()","title":"MEDIA_SESSION_LEGACY_HELPER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-e-d-i-a_-s-e-s-s-i-o-n_-l-e-g-a-c-y_-h-e-l-p-e-r__-s-i-n-s-t-a-n-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-u-l-t-i_-w-i-n-d-o-w_-d-e-c-o-r_-s-u-p-p-o-r-t__-m-w-i-n-d-o-w/","text":"// shark-android / shark / AndroidReferenceMatchers / MULTI_WINDOW_DECOR_SUPPORT__MWINDOW MULTI_WINDOW_DECOR_SUPPORT__MWINDOW \u00b6 [jvm]\\ MULTI_WINDOW_DECOR_SUPPORT__MWINDOW () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-u-l-t-i_-w-i-n-d-o-w_-d-e-c-o-r_-s-u-p-p-o-r-t__-m-w-i-n-d-o-w/#multi_window_decor_support__mwindow","text":"[jvm]\\ MULTI_WINDOW_DECOR_SUPPORT__MWINDOW ()","title":"MULTI_WINDOW_DECOR_SUPPORT__MWINDOW"},{"location":"api/shark-android/shark/-android-reference-matchers/-m-u-l-t-i_-w-i-n-d-o-w_-d-e-c-o-r_-s-u-p-p-o-r-t__-m-w-i-n-d-o-w/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-e-m_-s-c-e-n-e_-c-a-l-l_-b-l-o-c-k-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / OEM_SCENE_CALL_BLOCKER OEM_SCENE_CALL_BLOCKER \u00b6 [jvm]\\ OEM_SCENE_CALL_BLOCKER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-e-m_-s-c-e-n-e_-c-a-l-l_-b-l-o-c-k-e-r/#oem_scene_call_blocker","text":"[jvm]\\ OEM_SCENE_CALL_BLOCKER ()","title":"OEM_SCENE_CALL_BLOCKER"},{"location":"api/shark-android/shark/-android-reference-matchers/-o-e-m_-s-c-e-n-e_-c-a-l-l_-b-l-o-c-k-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / PERSONA_MANAGER PERSONA_MANAGER \u00b6 [jvm]\\ PERSONA_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#persona_manager","text":"[jvm]\\ PERSONA_MANAGER ()","title":"PERSONA_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-a-z-e-r_-t-e-x-t_-k-e-y_-l-i-s-t-e-n-e-r__-m-c-o-n-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / RAZER_TEXT_KEY_LISTENER__MCONTEXT RAZER_TEXT_KEY_LISTENER__MCONTEXT \u00b6 [jvm]\\ RAZER_TEXT_KEY_LISTENER__MCONTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-a-z-e-r_-t-e-x-t_-k-e-y_-l-i-s-t-e-n-e-r__-m-c-o-n-t-e-x-t/#razer_text_key_listener__mcontext","text":"[jvm]\\ RAZER_TEXT_KEY_LISTENER__MCONTEXT ()","title":"RAZER_TEXT_KEY_LISTENER__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-a-z-e-r_-t-e-x-t_-k-e-y_-l-i-s-t-e-n-e-r__-m-c-o-n-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s/","text":"// shark-android / shark / AndroidReferenceMatchers / REFERENCES REFERENCES \u00b6 [jvm]\\ REFERENCES () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s/#references","text":"[jvm]\\ REFERENCES ()","title":"REFERENCES"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-f-e-r-e-n-c-e-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / RESOURCES__MCONTEXT RESOURCES__MCONTEXT \u00b6 [jvm]\\ RESOURCES__MCONTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t/#resources__mcontext","text":"[jvm]\\ RESOURCES__MCONTEXT ()","title":"RESOURCES__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-r-e-s-o-u-r-c-e-s__-m-c-o-n-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n/","text":"// shark-android / shark / AndroidReferenceMatchers / SEM_APP_ICON_SOLUTION SEM_APP_ICON_SOLUTION \u00b6 [jvm]\\ SEM_APP_ICON_SOLUTION () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n/#sem_app_icon_solution","text":"[jvm]\\ SEM_APP_ICON_SOLUTION ()","title":"SEM_APP_ICON_SOLUTION"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-a-p-p_-i-c-o-n_-s-o-l-u-t-i-o-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / SEM_CLIPBOARD_MANAGER__MCONTEXT SEM_CLIPBOARD_MANAGER__MCONTEXT \u00b6 [jvm]\\ SEM_CLIPBOARD_MANAGER__MCONTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#sem_clipboard_manager__mcontext","text":"[jvm]\\ SEM_CLIPBOARD_MANAGER__MCONTEXT ()","title":"SEM_CLIPBOARD_MANAGER__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-c-l-i-p-b-o-a-r-d_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / SEM_EMERGENCY_MANAGER__MCONTEXT SEM_EMERGENCY_MANAGER__MCONTEXT \u00b6 [jvm]\\ SEM_EMERGENCY_MANAGER__MCONTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#sem_emergency_manager__mcontext","text":"[jvm]\\ SEM_EMERGENCY_MANAGER__MCONTEXT ()","title":"SEM_EMERGENCY_MANAGER__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-e-m-e-r-g-e-n-c-y_-m-a-n-a-g-e-r__-m-c-o-n-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / SEM_PERSONA_MANAGER SEM_PERSONA_MANAGER \u00b6 [jvm]\\ SEM_PERSONA_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#sem_persona_manager","text":"[jvm]\\ SEM_PERSONA_MANAGER ()","title":"SEM_PERSONA_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-e-m_-p-e-r-s-o-n-a_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / SMART_COVER_MANAGER SMART_COVER_MANAGER \u00b6 [jvm]\\ SMART_COVER_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r/#smart_cover_manager","text":"[jvm]\\ SMART_COVER_MANAGER ()","title":"SMART_COVER_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-m-a-r-t_-c-o-v-e-r_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / SPAN_CONTROLLER SPAN_CONTROLLER \u00b6 [jvm]\\ SPAN_CONTROLLER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r/#span_controller","text":"[jvm]\\ SPAN_CONTROLLER ()","title":"SPAN_CONTROLLER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-a-n_-c-o-n-t-r-o-l-l-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / SPEECH_RECOGNIZER SPEECH_RECOGNIZER \u00b6 [jvm]\\ SPEECH_RECOGNIZER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r/#speech_recognizer","text":"[jvm]\\ SPEECH_RECOGNIZER ()","title":"SPEECH_RECOGNIZER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-e-c-h_-r-e-c-o-g-n-i-z-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / SPELL_CHECKER SPELL_CHECKER \u00b6 [jvm]\\ SPELL_CHECKER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r/#spell_checker","text":"[jvm]\\ SPELL_CHECKER ()","title":"SPELL_CHECKER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n/","text":"// shark-android / shark / AndroidReferenceMatchers / SPELL_CHECKER_SESSION SPELL_CHECKER_SESSION \u00b6 [jvm]\\ SPELL_CHECKER_SESSION () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n/#spell_checker_session","text":"[jvm]\\ SPELL_CHECKER_SESSION ()","title":"SPELL_CHECKER_SESSION"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-l-l_-c-h-e-c-k-e-r_-s-e-s-s-i-o-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r/","text":"// shark-android / shark / AndroidReferenceMatchers / SPEN_GESTURE_MANAGER SPEN_GESTURE_MANAGER \u00b6 [jvm]\\ SPEN_GESTURE_MANAGER () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r/#spen_gesture_manager","text":"[jvm]\\ SPEN_GESTURE_MANAGER ()","title":"SPEN_GESTURE_MANAGER"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-p-e-n_-g-e-s-t-u-r-e_-m-a-n-a-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-t-a-t-i-c_-m-t-a-r-g-e-t_-v-i-e-w/","text":"// shark-android / shark / AndroidReferenceMatchers / STATIC_MTARGET_VIEW STATIC_MTARGET_VIEW \u00b6 [jvm]\\ STATIC_MTARGET_VIEW () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-t-a-t-i-c_-m-t-a-r-g-e-t_-v-i-e-w/#static_mtarget_view","text":"[jvm]\\ STATIC_MTARGET_VIEW ()","title":"STATIC_MTARGET_VIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-t-a-t-i-c_-m-t-a-r-g-e-t_-v-i-e-w/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l/","text":"// shark-android / shark / AndroidReferenceMatchers / SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL \u00b6 [jvm]\\ SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l/#system_sensor_manager__mappcontextimpl","text":"[jvm]\\ SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL ()","title":"SYSTEM_SENSOR_MANAGER__MAPPCONTEXTIMPL"},{"location":"api/shark-android/shark/-android-reference-matchers/-s-y-s-t-e-m_-s-e-n-s-o-r_-m-a-n-a-g-e-r__-m-a-p-p-c-o-n-t-e-x-t-i-m-p-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d/","text":"// shark-android / shark / AndroidReferenceMatchers / TEXT_LINE__SCACHED TEXT_LINE__SCACHED \u00b6 [jvm]\\ TEXT_LINE__SCACHED () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d/#text_line__scached","text":"[jvm]\\ TEXT_LINE__SCACHED ()","title":"TEXT_LINE__SCACHED"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-l-i-n-e__-s-c-a-c-h-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h/","text":"// shark-android / shark / AndroidReferenceMatchers / TEXT_TO_SPEECH TEXT_TO_SPEECH \u00b6 [jvm]\\ TEXT_TO_SPEECH () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h/#text_to_speech","text":"[jvm]\\ TEXT_TO_SPEECH ()","title":"TEXT_TO_SPEECH"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-t-o_-s-p-e-e-c-h/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/","text":"// shark-android / shark / AndroidReferenceMatchers / TEXT_VIEW__MLAST_HOVERED_VIEW TEXT_VIEW__MLAST_HOVERED_VIEW \u00b6 [jvm]\\ TEXT_VIEW__MLAST_HOVERED_VIEW () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/#text_view__mlast_hovered_view","text":"[jvm]\\ TEXT_VIEW__MLAST_HOVERED_VIEW ()","title":"TEXT_VIEW__MLAST_HOVERED_VIEW"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-e-x-t_-v-i-e-w__-m-l-a-s-t_-h-o-v-e-r-e-d_-v-i-e-w/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-o-a-s-t_-t-n/","text":"// shark-android / shark / AndroidReferenceMatchers / TOAST_TN TOAST_TN \u00b6 [jvm]\\ TOAST_TN () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-o-a-s-t_-t-n/#toast_tn","text":"[jvm]\\ TOAST_TN ()","title":"TOAST_TN"},{"location":"api/shark-android/shark/-android-reference-matchers/-t-o-a-s-t_-t-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/","text":"// shark-android / shark / AndroidReferenceMatchers / USER_MANAGER__SINSTANCE USER_MANAGER__SINSTANCE \u00b6 [jvm]\\ USER_MANAGER__SINSTANCE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#user_manager__sinstance","text":"[jvm]\\ USER_MANAGER__SINSTANCE ()","title":"USER_MANAGER__SINSTANCE"},{"location":"api/shark-android/shark/-android-reference-matchers/-u-s-e-r_-m-a-n-a-g-e-r__-s-i-n-s-t-a-n-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t/","text":"// shark-android / shark / AndroidReferenceMatchers / VIEWLOCATIONHOLDER_ROOT VIEWLOCATIONHOLDER_ROOT \u00b6 [jvm]\\ VIEWLOCATIONHOLDER_ROOT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t/#viewlocationholder_root","text":"[jvm]\\ VIEWLOCATIONHOLDER_ROOT ()","title":"VIEWLOCATIONHOLDER_ROOT"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w-l-o-c-a-t-i-o-n-h-o-l-d-e-r_-r-o-o-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t/","text":"// shark-android / shark / AndroidReferenceMatchers / VIEW_CONFIGURATION__MCONTEXT VIEW_CONFIGURATION__MCONTEXT \u00b6 [jvm]\\ VIEW_CONFIGURATION__MCONTEXT () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t/#view_configuration__mcontext","text":"[jvm]\\ VIEW_CONFIGURATION__MCONTEXT ()","title":"VIEW_CONFIGURATION__MCONTEXT"},{"location":"api/shark-android/shark/-android-reference-matchers/-v-i-e-w_-c-o-n-f-i-g-u-r-a-t-i-o-n__-m-c-o-n-t-e-x-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-android/shark/-android-resource-id-names/","text":"// shark-android / shark / AndroidResourceIdNames AndroidResourceIdNames \u00b6 [jvm]\\ class AndroidResourceIdNames Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary get [jvm] operator fun get (id: Int ): String ?","title":"Index"},{"location":"api/shark-android/shark/-android-resource-id-names/#androidresourceidnames","text":"[jvm]\\ class AndroidResourceIdNames","title":"AndroidResourceIdNames"},{"location":"api/shark-android/shark/-android-resource-id-names/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-android/shark/-android-resource-id-names/#functions","text":"Name Summary get [jvm] operator fun get (id: Int ): String ?","title":"Functions"},{"location":"api/shark-android/shark/-android-resource-id-names/get/","text":"// shark-android / shark / AndroidResourceIdNames / get get \u00b6 [jvm]\\ operator fun get (id: Int ): String ?","title":"Get"},{"location":"api/shark-android/shark/-android-resource-id-names/get/#get","text":"[jvm]\\ operator fun get (id: Int ): String ?","title":"get"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/","text":"// shark-android / shark / AndroidResourceIdNames / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary readFromHeap [jvm] fun readFromHeap (graph: HeapGraph): AndroidResourceIdNames ? saveToMemory [jvm] @ Synchronized fun saveToMemory (getResourceTypeName: ( Int ) -> String ?, getResourceEntryName: ( Int ) -> String ?)","title":"Index"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/#functions","text":"Name Summary readFromHeap [jvm] fun readFromHeap (graph: HeapGraph): AndroidResourceIdNames ? saveToMemory [jvm] @ Synchronized fun saveToMemory (getResourceTypeName: ( Int ) -> String ?, getResourceEntryName: ( Int ) -> String ?)","title":"Functions"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/read-from-heap/","text":"// shark-android / shark / AndroidResourceIdNames / Companion / readFromHeap readFromHeap \u00b6 [jvm]\\ fun readFromHeap (graph: HeapGraph): AndroidResourceIdNames ?","title":"Read from heap"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/read-from-heap/#readfromheap","text":"[jvm]\\ fun readFromHeap (graph: HeapGraph): AndroidResourceIdNames ?","title":"readFromHeap"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/save-to-memory/","text":"// shark-android / shark / AndroidResourceIdNames / Companion / saveToMemory saveToMemory \u00b6 [jvm]\\ @ Synchronized fun saveToMemory (getResourceTypeName: ( Int ) -> String ?, getResourceEntryName: ( Int ) -> String ?) Parameters \u00b6 jvm getResourceTypeName a function that delegates to Android Resources.getResourceTypeName but returns null when the name isn\u2019t found instead of throwing an exception. getResourceEntryName a function that delegates to Android Resources.getResourceEntryName but returns null when the name isn\u2019t found instead of throwing an exception.","title":"Save to memory"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/save-to-memory/#savetomemory","text":"[jvm]\\ @ Synchronized fun saveToMemory (getResourceTypeName: ( Int ) -> String ?, getResourceEntryName: ( Int ) -> String ?)","title":"saveToMemory"},{"location":"api/shark-android/shark/-android-resource-id-names/-companion/save-to-memory/#parameters","text":"jvm getResourceTypeName a function that delegates to Android Resources.getResourceTypeName but returns null when the name isn\u2019t found instead of throwing an exception. getResourceEntryName a function that delegates to Android Resources.getResourceEntryName but returns null when the name isn\u2019t found instead of throwing an exception.","title":"Parameters"},{"location":"api/shark-android/shark/-android-services/","text":"// shark-android / shark / AndroidServices AndroidServices \u00b6 [jvm]\\ object AndroidServices Properties \u00b6 Name Summary aliveAndroidServiceObjectIds [jvm] val HeapGraph. aliveAndroidServiceObjectIds : List < Long >","title":"Index"},{"location":"api/shark-android/shark/-android-services/#androidservices","text":"[jvm]\\ object AndroidServices","title":"AndroidServices"},{"location":"api/shark-android/shark/-android-services/#properties","text":"Name Summary aliveAndroidServiceObjectIds [jvm] val HeapGraph. aliveAndroidServiceObjectIds : List < Long >","title":"Properties"},{"location":"api/shark-android/shark/-android-services/alive-android-service-object-ids/","text":"// shark-android / shark / AndroidServices / aliveAndroidServiceObjectIds aliveAndroidServiceObjectIds \u00b6 [jvm]\\ val HeapGraph. aliveAndroidServiceObjectIds : List < Long >","title":"Alive android service object ids"},{"location":"api/shark-android/shark/-android-services/alive-android-service-object-ids/#aliveandroidserviceobjectids","text":"[jvm]\\ val HeapGraph. aliveAndroidServiceObjectIds : List < Long >","title":"aliveAndroidServiceObjectIds"},{"location":"api/shark-graph/shark/","text":"// shark-graph / shark Package shark \u00b6 Types \u00b6 Name Summary CloseableHeapGraph [jvm] interface CloseableHeapGraph : HeapGraph , Closeable A HeapGraph that should be closed after being used. GraphContext [jvm] class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. HeapField [jvm] class HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field. HeapGraph [jvm] interface HeapGraph Enables navigation through the heap graph of objects. HeapObject [jvm] sealed class HeapObject An object in the heap dump. HeapValue [jvm] class HeapValue (graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type. HprofHeapGraph [jvm] class HprofHeapGraph : CloseableHeapGraph A HeapGraph that reads from an Hprof file indexed by HprofIndex . HprofIndex [jvm] class HprofIndex An index on a Hprof file. See openHeapGraph .","title":"Core: Graph"},{"location":"api/shark-graph/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-graph/shark/#types","text":"Name Summary CloseableHeapGraph [jvm] interface CloseableHeapGraph : HeapGraph , Closeable A HeapGraph that should be closed after being used. GraphContext [jvm] class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. HeapField [jvm] class HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field. HeapGraph [jvm] interface HeapGraph Enables navigation through the heap graph of objects. HeapObject [jvm] sealed class HeapObject An object in the heap dump. HeapValue [jvm] class HeapValue (graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type. HprofHeapGraph [jvm] class HprofHeapGraph : CloseableHeapGraph A HeapGraph that reads from an Hprof file indexed by HprofIndex . HprofIndex [jvm] class HprofIndex An index on a Hprof file. See openHeapGraph .","title":"Types"},{"location":"api/shark-graph/shark/-closeable-heap-graph/","text":"// shark-graph / shark / CloseableHeapGraph CloseableHeapGraph \u00b6 [jvm]\\ interface CloseableHeapGraph : HeapGraph , Closeable A HeapGraph that should be closed after being used. Functions \u00b6 Name Summary close [jvm] abstract override fun close () findClassByName [jvm] abstract fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById [jvm] abstract fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull [jvm] abstract fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. findObjectByIndex [jvm] abstract fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1. objectExists [jvm] abstract fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump. Properties \u00b6 Name Summary classCount [jvm] abstract val classCount : Int classes [jvm] abstract val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context [jvm] abstract val context : GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots [jvm] abstract val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize [jvm] abstract val identifierByteSize : Int instanceCount [jvm] abstract val instanceCount : Int instances [jvm] abstract val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objectArrayCount [jvm] abstract val objectArrayCount : Int objectArrays [jvm] abstract val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. objectCount [jvm] abstract val objectCount : Int objects [jvm] abstract val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. primitiveArrayCount [jvm] abstract val primitiveArrayCount : Int primitiveArrays [jvm] abstract val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump. Inheritors \u00b6 Name HprofHeapGraph","title":"Index"},{"location":"api/shark-graph/shark/-closeable-heap-graph/#closeableheapgraph","text":"[jvm]\\ interface CloseableHeapGraph : HeapGraph , Closeable A HeapGraph that should be closed after being used.","title":"CloseableHeapGraph"},{"location":"api/shark-graph/shark/-closeable-heap-graph/#functions","text":"Name Summary close [jvm] abstract override fun close () findClassByName [jvm] abstract fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById [jvm] abstract fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull [jvm] abstract fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. findObjectByIndex [jvm] abstract fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1. objectExists [jvm] abstract fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Functions"},{"location":"api/shark-graph/shark/-closeable-heap-graph/#properties","text":"Name Summary classCount [jvm] abstract val classCount : Int classes [jvm] abstract val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context [jvm] abstract val context : GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots [jvm] abstract val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize [jvm] abstract val identifierByteSize : Int instanceCount [jvm] abstract val instanceCount : Int instances [jvm] abstract val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objectArrayCount [jvm] abstract val objectArrayCount : Int objectArrays [jvm] abstract val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. objectCount [jvm] abstract val objectCount : Int objects [jvm] abstract val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. primitiveArrayCount [jvm] abstract val primitiveArrayCount : Int primitiveArrays [jvm] abstract val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-closeable-heap-graph/#inheritors","text":"Name HprofHeapGraph","title":"Inheritors"},{"location":"api/shark-graph/shark/-graph-context/","text":"// shark-graph / shark / GraphContext GraphContext \u00b6 [jvm]\\ class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access. Constructors \u00b6 GraphContext [jvm] fun GraphContext () Functions \u00b6 Name Summary contains [jvm] operator fun contains (key: String ): Boolean get [jvm] operator fun < T > get (key: String ): T ? getOrPut [jvm] fun < T > getOrPut (key: String , defaultValue: () -> T ): T minusAssign [jvm] operator fun minusAssign (key: String ) set [jvm] operator fun < T > set (key: String , value: T )","title":"Index"},{"location":"api/shark-graph/shark/-graph-context/#graphcontext","text":"[jvm]\\ class GraphContext In memory store that can be used to store objects in a given HeapGraph instance. This is a simple MutableMap of String to Any , but with unsafe generics access.","title":"GraphContext"},{"location":"api/shark-graph/shark/-graph-context/#constructors","text":"GraphContext [jvm] fun GraphContext ()","title":"Constructors"},{"location":"api/shark-graph/shark/-graph-context/#functions","text":"Name Summary contains [jvm] operator fun contains (key: String ): Boolean get [jvm] operator fun < T > get (key: String ): T ? getOrPut [jvm] fun < T > getOrPut (key: String , defaultValue: () -> T ): T minusAssign [jvm] operator fun minusAssign (key: String ) set [jvm] operator fun < T > set (key: String , value: T )","title":"Functions"},{"location":"api/shark-graph/shark/-graph-context/-graph-context/","text":"// shark-graph / shark / GraphContext / GraphContext GraphContext \u00b6 [jvm]\\ fun GraphContext ()","title":" graph context"},{"location":"api/shark-graph/shark/-graph-context/-graph-context/#graphcontext","text":"[jvm]\\ fun GraphContext ()","title":"GraphContext"},{"location":"api/shark-graph/shark/-graph-context/contains/","text":"// shark-graph / shark / GraphContext / contains contains \u00b6 [jvm]\\ operator fun contains (key: String ): Boolean See also \u00b6 jvm kotlin.collections.MutableMap","title":"Contains"},{"location":"api/shark-graph/shark/-graph-context/contains/#contains","text":"[jvm]\\ operator fun contains (key: String ): Boolean","title":"contains"},{"location":"api/shark-graph/shark/-graph-context/contains/#see-also","text":"jvm kotlin.collections.MutableMap","title":"See also"},{"location":"api/shark-graph/shark/-graph-context/get-or-put/","text":"// shark-graph / shark / GraphContext / getOrPut getOrPut \u00b6 [jvm]\\ fun < T > getOrPut (key: String , defaultValue: () -> T ): T See also \u00b6 jvm MutableMap.getOrPut","title":"Get or put"},{"location":"api/shark-graph/shark/-graph-context/get-or-put/#getorput","text":"[jvm]\\ fun < T > getOrPut (key: String , defaultValue: () -> T ): T","title":"getOrPut"},{"location":"api/shark-graph/shark/-graph-context/get-or-put/#see-also","text":"jvm MutableMap.getOrPut","title":"See also"},{"location":"api/shark-graph/shark/-graph-context/get/","text":"// shark-graph / shark / GraphContext / get get \u00b6 [jvm]\\ operator fun < T > get (key: String ): T ?","title":"Get"},{"location":"api/shark-graph/shark/-graph-context/get/#get","text":"[jvm]\\ operator fun < T > get (key: String ): T ?","title":"get"},{"location":"api/shark-graph/shark/-graph-context/minus-assign/","text":"// shark-graph / shark / GraphContext / minusAssign minusAssign \u00b6 [jvm]\\ operator fun minusAssign (key: String ) See also \u00b6 jvm kotlin.collections.MutableMap","title":"Minus assign"},{"location":"api/shark-graph/shark/-graph-context/minus-assign/#minusassign","text":"[jvm]\\ operator fun minusAssign (key: String )","title":"minusAssign"},{"location":"api/shark-graph/shark/-graph-context/minus-assign/#see-also","text":"jvm kotlin.collections.MutableMap","title":"See also"},{"location":"api/shark-graph/shark/-graph-context/set/","text":"// shark-graph / shark / GraphContext / set set \u00b6 [jvm]\\ operator fun < T > set (key: String , value: T ) See also \u00b6 jvm MutableMap.set","title":"Set"},{"location":"api/shark-graph/shark/-graph-context/set/#set","text":"[jvm]\\ operator fun < T > set (key: String , value: T )","title":"set"},{"location":"api/shark-graph/shark/-graph-context/set/#see-also","text":"jvm MutableMap.set","title":"See also"},{"location":"api/shark-graph/shark/-heap-field/","text":"// shark-graph / shark / HeapField HeapField \u00b6 [jvm]\\ class HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field. Constructors \u00b6 HeapField [jvm] fun HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Properties \u00b6 Name Summary declaringClass [jvm] val declaringClass : HeapObject.HeapClass The class this field was declared in. name [jvm] val name : String Name of the field value [jvm] val value : HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray . valueAsClass [jvm] val valueAsClass : HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise. valueAsInstance [jvm] val valueAsInstance : HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise. valueAsObjectArray [jvm] val valueAsObjectArray : HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise. valueAsPrimitiveArray [jvm] val valueAsPrimitiveArray : HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Index"},{"location":"api/shark-graph/shark/-heap-field/#heapfield","text":"[jvm]\\ class HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue ) Represents a static field or an instance field.","title":"HeapField"},{"location":"api/shark-graph/shark/-heap-field/#constructors","text":"HeapField [jvm] fun HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue )","title":"Constructors"},{"location":"api/shark-graph/shark/-heap-field/#properties","text":"Name Summary declaringClass [jvm] val declaringClass : HeapObject.HeapClass The class this field was declared in. name [jvm] val name : String Name of the field value [jvm] val value : HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray . valueAsClass [jvm] val valueAsClass : HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise. valueAsInstance [jvm] val valueAsInstance : HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise. valueAsObjectArray [jvm] val valueAsObjectArray : HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise. valueAsPrimitiveArray [jvm] val valueAsPrimitiveArray : HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-field/-heap-field/","text":"// shark-graph / shark / HeapField / HeapField HeapField \u00b6 [jvm]\\ fun HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue )","title":" heap field"},{"location":"api/shark-graph/shark/-heap-field/-heap-field/#heapfield","text":"[jvm]\\ fun HeapField (declaringClass: HeapObject.HeapClass , name: String , value: HeapValue )","title":"HeapField"},{"location":"api/shark-graph/shark/-heap-field/declaring-class/","text":"// shark-graph / shark / HeapField / declaringClass declaringClass \u00b6 [jvm]\\ val declaringClass : HeapObject.HeapClass The class this field was declared in.","title":"Declaring class"},{"location":"api/shark-graph/shark/-heap-field/declaring-class/#declaringclass","text":"[jvm]\\ val declaringClass : HeapObject.HeapClass The class this field was declared in.","title":"declaringClass"},{"location":"api/shark-graph/shark/-heap-field/name/","text":"// shark-graph / shark / HeapField / name name \u00b6 [jvm]\\ val name : String Name of the field","title":"Name"},{"location":"api/shark-graph/shark/-heap-field/name/#name","text":"[jvm]\\ val name : String Name of the field","title":"name"},{"location":"api/shark-graph/shark/-heap-field/value-as-class/","text":"// shark-graph / shark / HeapField / valueAsClass valueAsClass \u00b6 [jvm]\\ val valueAsClass : HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise.","title":"Value as class"},{"location":"api/shark-graph/shark/-heap-field/value-as-class/#valueasclass","text":"[jvm]\\ val valueAsClass : HeapObject.HeapClass ? Return a HeapClass is value references a class, and null otherwise.","title":"valueAsClass"},{"location":"api/shark-graph/shark/-heap-field/value-as-instance/","text":"// shark-graph / shark / HeapField / valueAsInstance valueAsInstance \u00b6 [jvm]\\ val valueAsInstance : HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise.","title":"Value as instance"},{"location":"api/shark-graph/shark/-heap-field/value-as-instance/#valueasinstance","text":"[jvm]\\ val valueAsInstance : HeapObject.HeapInstance ? Return a HeapInstance is value references an instance, and null otherwise.","title":"valueAsInstance"},{"location":"api/shark-graph/shark/-heap-field/value-as-object-array/","text":"// shark-graph / shark / HeapField / valueAsObjectArray valueAsObjectArray \u00b6 [jvm]\\ val valueAsObjectArray : HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise.","title":"Value as object array"},{"location":"api/shark-graph/shark/-heap-field/value-as-object-array/#valueasobjectarray","text":"[jvm]\\ val valueAsObjectArray : HeapObject.HeapObjectArray ? Return a HeapObjectArray is value references an object array, and null otherwise.","title":"valueAsObjectArray"},{"location":"api/shark-graph/shark/-heap-field/value-as-primitive-array/","text":"// shark-graph / shark / HeapField / valueAsPrimitiveArray valueAsPrimitiveArray \u00b6 [jvm]\\ val valueAsPrimitiveArray : HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"Value as primitive array"},{"location":"api/shark-graph/shark/-heap-field/value-as-primitive-array/#valueasprimitivearray","text":"[jvm]\\ val valueAsPrimitiveArray : HeapObject.HeapPrimitiveArray ? Return a HeapPrimitiveArray is value references a primitive array, and null otherwise.","title":"valueAsPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-field/value/","text":"// shark-graph / shark / HeapField / value value \u00b6 [jvm]\\ val value : HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray .","title":"Value"},{"location":"api/shark-graph/shark/-heap-field/value/#value","text":"[jvm]\\ val value : HeapValue Value of the field. Also see shorthands valueAsClass , valueAsInstance , valueAsObjectArray , valueAsPrimitiveArray .","title":"value"},{"location":"api/shark-graph/shark/-heap-graph/","text":"// shark-graph / shark / HeapGraph HeapGraph \u00b6 [jvm]\\ interface HeapGraph Enables navigation through the heap graph of objects. Functions \u00b6 Name Summary findClassByName [jvm] abstract fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById [jvm] abstract fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull [jvm] abstract fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. findObjectByIndex [jvm] abstract fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1. objectExists [jvm] abstract fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump. Properties \u00b6 Name Summary classCount [jvm] abstract val classCount : Int classes [jvm] abstract val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context [jvm] abstract val context : GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots [jvm] abstract val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize [jvm] abstract val identifierByteSize : Int instanceCount [jvm] abstract val instanceCount : Int instances [jvm] abstract val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objectArrayCount [jvm] abstract val objectArrayCount : Int objectArrays [jvm] abstract val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. objectCount [jvm] abstract val objectCount : Int objects [jvm] abstract val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. primitiveArrayCount [jvm] abstract val primitiveArrayCount : Int primitiveArrays [jvm] abstract val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump. Inheritors \u00b6 Name CloseableHeapGraph","title":"Index"},{"location":"api/shark-graph/shark/-heap-graph/#heapgraph","text":"[jvm]\\ interface HeapGraph Enables navigation through the heap graph of objects.","title":"HeapGraph"},{"location":"api/shark-graph/shark/-heap-graph/#functions","text":"Name Summary findClassByName [jvm] abstract fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById [jvm] abstract fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull [jvm] abstract fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. findObjectByIndex [jvm] abstract fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1. objectExists [jvm] abstract fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Functions"},{"location":"api/shark-graph/shark/-heap-graph/#properties","text":"Name Summary classCount [jvm] abstract val classCount : Int classes [jvm] abstract val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context [jvm] abstract val context : GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots [jvm] abstract val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize [jvm] abstract val identifierByteSize : Int instanceCount [jvm] abstract val instanceCount : Int instances [jvm] abstract val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objectArrayCount [jvm] abstract val objectArrayCount : Int objectArrays [jvm] abstract val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. objectCount [jvm] abstract val objectCount : Int objects [jvm] abstract val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. primitiveArrayCount [jvm] abstract val primitiveArrayCount : Int primitiveArrays [jvm] abstract val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-graph/#inheritors","text":"Name CloseableHeapGraph","title":"Inheritors"},{"location":"api/shark-graph/shark/-heap-graph/class-count/","text":"// shark-graph / shark / HeapGraph / classCount classCount \u00b6 [jvm]\\ abstract val classCount : Int","title":"Class count"},{"location":"api/shark-graph/shark/-heap-graph/class-count/#classcount","text":"[jvm]\\ abstract val classCount : Int","title":"classCount"},{"location":"api/shark-graph/shark/-heap-graph/classes/","text":"// shark-graph / shark / HeapGraph / classes classes \u00b6 [jvm]\\ abstract val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"Classes"},{"location":"api/shark-graph/shark/-heap-graph/classes/#classes","text":"[jvm]\\ abstract val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"classes"},{"location":"api/shark-graph/shark/-heap-graph/context/","text":"// shark-graph / shark / HeapGraph / context context \u00b6 [jvm]\\ abstract val context : GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"Context"},{"location":"api/shark-graph/shark/-heap-graph/context/#context","text":"[jvm]\\ abstract val context : GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"context"},{"location":"api/shark-graph/shark/-heap-graph/find-class-by-name/","text":"// shark-graph / shark / HeapGraph / findClassByName findClassByName \u00b6 [jvm]\\ abstract fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"Find class by name"},{"location":"api/shark-graph/shark/-heap-graph/find-class-by-name/#findclassbyname","text":"[jvm]\\ abstract fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"findClassByName"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id-or-null/","text":"// shark-graph / shark / HeapGraph / findObjectByIdOrNull findObjectByIdOrNull \u00b6 [jvm]\\ abstract fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"Find object by id or null"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id-or-null/#findobjectbyidornull","text":"[jvm]\\ abstract fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"findObjectByIdOrNull"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id/","text":"// shark-graph / shark / HeapGraph / findObjectById findObjectById \u00b6 [jvm]\\ abstract fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"Find object by id"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-id/#findobjectbyid","text":"[jvm]\\ abstract fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"findObjectById"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-index/","text":"// shark-graph / shark / HeapGraph / findObjectByIndex findObjectByIndex \u00b6 [jvm]\\ abstract fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1.","title":"Find object by index"},{"location":"api/shark-graph/shark/-heap-graph/find-object-by-index/#findobjectbyindex","text":"[jvm]\\ abstract fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1.","title":"findObjectByIndex"},{"location":"api/shark-graph/shark/-heap-graph/gc-roots/","text":"// shark-graph / shark / HeapGraph / gcRoots gcRoots \u00b6 [jvm]\\ abstract val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"Gc roots"},{"location":"api/shark-graph/shark/-heap-graph/gc-roots/#gcroots","text":"[jvm]\\ abstract val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"gcRoots"},{"location":"api/shark-graph/shark/-heap-graph/identifier-byte-size/","text":"// shark-graph / shark / HeapGraph / identifierByteSize identifierByteSize \u00b6 [jvm]\\ abstract val identifierByteSize : Int","title":"Identifier byte size"},{"location":"api/shark-graph/shark/-heap-graph/identifier-byte-size/#identifierbytesize","text":"[jvm]\\ abstract val identifierByteSize : Int","title":"identifierByteSize"},{"location":"api/shark-graph/shark/-heap-graph/instance-count/","text":"// shark-graph / shark / HeapGraph / instanceCount instanceCount \u00b6 [jvm]\\ abstract val instanceCount : Int","title":"Instance count"},{"location":"api/shark-graph/shark/-heap-graph/instance-count/#instancecount","text":"[jvm]\\ abstract val instanceCount : Int","title":"instanceCount"},{"location":"api/shark-graph/shark/-heap-graph/instances/","text":"// shark-graph / shark / HeapGraph / instances instances \u00b6 [jvm]\\ abstract val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"Instances"},{"location":"api/shark-graph/shark/-heap-graph/instances/#instances","text":"[jvm]\\ abstract val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"instances"},{"location":"api/shark-graph/shark/-heap-graph/object-array-count/","text":"// shark-graph / shark / HeapGraph / objectArrayCount objectArrayCount \u00b6 [jvm]\\ abstract val objectArrayCount : Int","title":"Object array count"},{"location":"api/shark-graph/shark/-heap-graph/object-array-count/#objectarraycount","text":"[jvm]\\ abstract val objectArrayCount : Int","title":"objectArrayCount"},{"location":"api/shark-graph/shark/-heap-graph/object-arrays/","text":"// shark-graph / shark / HeapGraph / objectArrays objectArrays \u00b6 [jvm]\\ abstract val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Object arrays"},{"location":"api/shark-graph/shark/-heap-graph/object-arrays/#objectarrays","text":"[jvm]\\ abstract val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"objectArrays"},{"location":"api/shark-graph/shark/-heap-graph/object-count/","text":"// shark-graph / shark / HeapGraph / objectCount objectCount \u00b6 [jvm]\\ abstract val objectCount : Int","title":"Object count"},{"location":"api/shark-graph/shark/-heap-graph/object-count/#objectcount","text":"[jvm]\\ abstract val objectCount : Int","title":"objectCount"},{"location":"api/shark-graph/shark/-heap-graph/object-exists/","text":"// shark-graph / shark / HeapGraph / objectExists objectExists \u00b6 [jvm]\\ abstract fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Object exists"},{"location":"api/shark-graph/shark/-heap-graph/object-exists/#objectexists","text":"[jvm]\\ abstract fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"objectExists"},{"location":"api/shark-graph/shark/-heap-graph/objects/","text":"// shark-graph / shark / HeapGraph / objects objects \u00b6 [jvm]\\ abstract val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"Objects"},{"location":"api/shark-graph/shark/-heap-graph/objects/#objects","text":"[jvm]\\ abstract val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"objects"},{"location":"api/shark-graph/shark/-heap-graph/primitive-array-count/","text":"// shark-graph / shark / HeapGraph / primitiveArrayCount primitiveArrayCount \u00b6 [jvm]\\ abstract val primitiveArrayCount : Int","title":"Primitive array count"},{"location":"api/shark-graph/shark/-heap-graph/primitive-array-count/#primitivearraycount","text":"[jvm]\\ abstract val primitiveArrayCount : Int","title":"primitiveArrayCount"},{"location":"api/shark-graph/shark/-heap-graph/primitive-arrays/","text":"// shark-graph / shark / HeapGraph / primitiveArrays primitiveArrays \u00b6 [jvm]\\ abstract val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Primitive arrays"},{"location":"api/shark-graph/shark/-heap-graph/primitive-arrays/#primitivearrays","text":"[jvm]\\ abstract val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"primitiveArrays"},{"location":"api/shark-graph/shark/-heap-object/","text":"// shark-graph / shark / HeapObject HeapObject \u00b6 [jvm]\\ sealed class HeapObject An object in the heap dump. Types \u00b6 Name Summary Companion [jvm] object Companion HeapClass [jvm] class HeapClass : HeapObject A class in the heap dump. HeapInstance [jvm] class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray [jvm] class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray [jvm] class HeapPrimitiveArray : HeapObject A primitive array in the heap dump. Functions \u00b6 Name Summary readRecord [jvm] abstract fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord Reads and returns the underlying ObjectRecord. Properties \u00b6 Name Summary asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph [jvm] abstract val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId [jvm] abstract val objectId : Long The heap identifier of this object. objectIndex [jvm] abstract val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. recordSize [jvm] abstract val recordSize : Int The total byte size for the record of this object in the heap dump. Inheritors \u00b6 Name HeapClass HeapInstance HeapObjectArray HeapPrimitiveArray","title":"Index"},{"location":"api/shark-graph/shark/-heap-object/#heapobject","text":"[jvm]\\ sealed class HeapObject An object in the heap dump.","title":"HeapObject"},{"location":"api/shark-graph/shark/-heap-object/#types","text":"Name Summary Companion [jvm] object Companion HeapClass [jvm] class HeapClass : HeapObject A class in the heap dump. HeapInstance [jvm] class HeapInstance : HeapObject An instance in the heap dump. HeapObjectArray [jvm] class HeapObjectArray : HeapObject An object array in the heap dump. HeapPrimitiveArray [jvm] class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"Types"},{"location":"api/shark-graph/shark/-heap-object/#functions","text":"Name Summary readRecord [jvm] abstract fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord Reads and returns the underlying ObjectRecord.","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/#properties","text":"Name Summary asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph [jvm] abstract val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId [jvm] abstract val objectId : Long The heap identifier of this object. objectIndex [jvm] abstract val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. recordSize [jvm] abstract val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/#inheritors","text":"Name HeapClass HeapInstance HeapObjectArray HeapPrimitiveArray","title":"Inheritors"},{"location":"api/shark-graph/shark/-heap-object/as-class/","text":"// shark-graph / shark / HeapObject / asClass asClass \u00b6 [jvm]\\ val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise","title":"As class"},{"location":"api/shark-graph/shark/-heap-object/as-class/#asclass","text":"[jvm]\\ val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise","title":"asClass"},{"location":"api/shark-graph/shark/-heap-object/as-instance/","text":"// shark-graph / shark / HeapObject / asInstance asInstance \u00b6 [jvm]\\ val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise","title":"As instance"},{"location":"api/shark-graph/shark/-heap-object/as-instance/#asinstance","text":"[jvm]\\ val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise","title":"asInstance"},{"location":"api/shark-graph/shark/-heap-object/as-object-array/","text":"// shark-graph / shark / HeapObject / asObjectArray asObjectArray \u00b6 [jvm]\\ val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise","title":"As object array"},{"location":"api/shark-graph/shark/-heap-object/as-object-array/#asobjectarray","text":"[jvm]\\ val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise","title":"asObjectArray"},{"location":"api/shark-graph/shark/-heap-object/as-primitive-array/","text":"// shark-graph / shark / HeapObject / asPrimitiveArray asPrimitiveArray \u00b6 [jvm]\\ val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"As primitive array"},{"location":"api/shark-graph/shark/-heap-object/as-primitive-array/#asprimitivearray","text":"[jvm]\\ val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise","title":"asPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-object/graph/","text":"// shark-graph / shark / HeapObject / graph graph \u00b6 [jvm]\\ abstract val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/graph/#graph","text":"[jvm]\\ abstract val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/object-id/","text":"// shark-graph / shark / HeapObject / objectId objectId \u00b6 [jvm]\\ abstract val objectId : Long The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/object-id/#objectid","text":"[jvm]\\ abstract val objectId : Long The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/object-index/","text":"// shark-graph / shark / HeapObject / objectIndex objectIndex \u00b6 [jvm]\\ abstract val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"Object index"},{"location":"api/shark-graph/shark/-heap-object/object-index/#objectindex","text":"[jvm]\\ abstract val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"objectIndex"},{"location":"api/shark-graph/shark/-heap-object/read-record/","text":"// shark-graph / shark / HeapObject / readRecord readRecord \u00b6 [jvm]\\ abstract fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord Reads and returns the underlying ObjectRecord. This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/read-record/#readrecord","text":"[jvm]\\ abstract fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord Reads and returns the underlying ObjectRecord. This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/record-size/","text":"// shark-graph / shark / HeapObject / recordSize recordSize \u00b6 [jvm]\\ abstract val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Record size"},{"location":"api/shark-graph/shark/-heap-object/record-size/#recordsize","text":"[jvm]\\ abstract val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"recordSize"},{"location":"api/shark-graph/shark/-heap-object/-companion/","text":"// shark-graph / shark / HeapObject / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark-graph/shark/-heap-object/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/","text":"// shark-graph / shark / HeapObject / HeapClass HeapClass \u00b6 [jvm]\\ class HeapClass : HeapObject A class in the heap dump. Functions \u00b6 Name Summary get [jvm] operator fun get (fieldName: String ): HeapField ? instanceFieldName [jvm] fun instanceFieldName (fieldRecord: HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord): String Returns the name of the field declared in this class for the specified fieldRecord . readFieldsByteSize [jvm] fun readFieldsByteSize (): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads and returns the underlying ClassDumpRecord. readRecordFields [jvm] fun readRecordFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord> readRecordStaticFields [jvm] fun readRecordStaticFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord> readStaticField [jvm] fun readStaticField (fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. readStaticFields [jvm] fun readStaticFields (): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . subclassOf [jvm] infix fun subclassOf (superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass . superclassOf [jvm] infix fun superclassOf (subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass . toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise classHierarchy [jvm] val classHierarchy : Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included). directInstances [jvm] val directInstances : Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class. graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. hasReferenceInstanceFields [jvm] val hasReferenceInstanceFields : Boolean instanceByteSize [jvm] val instanceByteSize : Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. instances [jvm] val instances : Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class. isArrayClass [jvm] val isArrayClass : Boolean Returns true if this class is an array class, and false otherwise. isObjectArrayClass [jvm] val isObjectArrayClass : Boolean isPrimitiveArrayClass [jvm] val isPrimitiveArrayClass : Boolean isPrimitiveWrapperClass [jvm] val isPrimitiveWrapperClass : Boolean Whether this is class is a primitive wrapper type name [jvm] val name : String The name of this class, identical to Class.getName . If this class is an array class, the name has a suffix of brackets for each dimension of the array, e.g. com.Foo[][] is a class for 2 dimensional arrays of com.Foo. objectArrayInstances [jvm] val objectArrayInstances : Sequence < HeapObject.HeapObjectArray > objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. primitiveArrayInstances [jvm] val primitiveArrayInstances : Sequence < HeapObject.HeapPrimitiveArray > Primitive arrays are one dimensional arrays of a primitive type. N-dimension arrays of primitive types (e.g. int[][]) are object arrays pointing to primitive arrays. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump. simpleName [jvm] val simpleName : String Returns name stripped of any string content before the last period (included). subclasses [jvm] val subclasses : Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump. superclass [jvm] val superclass : HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"Index"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#heapclass","text":"[jvm]\\ class HeapClass : HeapObject A class in the heap dump.","title":"HeapClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#functions","text":"Name Summary get [jvm] operator fun get (fieldName: String ): HeapField ? instanceFieldName [jvm] fun instanceFieldName (fieldRecord: HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord): String Returns the name of the field declared in this class for the specified fieldRecord . readFieldsByteSize [jvm] fun readFieldsByteSize (): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads and returns the underlying ClassDumpRecord. readRecordFields [jvm] fun readRecordFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord> readRecordStaticFields [jvm] fun readRecordStaticFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord> readStaticField [jvm] fun readStaticField (fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. readStaticFields [jvm] fun readStaticFields (): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . subclassOf [jvm] infix fun subclassOf (superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass . superclassOf [jvm] infix fun superclassOf (subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass . toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/#properties","text":"Name Summary asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise classHierarchy [jvm] val classHierarchy : Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included). directInstances [jvm] val directInstances : Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class. graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. hasReferenceInstanceFields [jvm] val hasReferenceInstanceFields : Boolean instanceByteSize [jvm] val instanceByteSize : Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. instances [jvm] val instances : Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class. isArrayClass [jvm] val isArrayClass : Boolean Returns true if this class is an array class, and false otherwise. isObjectArrayClass [jvm] val isObjectArrayClass : Boolean isPrimitiveArrayClass [jvm] val isPrimitiveArrayClass : Boolean isPrimitiveWrapperClass [jvm] val isPrimitiveWrapperClass : Boolean Whether this is class is a primitive wrapper type name [jvm] val name : String The name of this class, identical to Class.getName . If this class is an array class, the name has a suffix of brackets for each dimension of the array, e.g. com.Foo[][] is a class for 2 dimensional arrays of com.Foo. objectArrayInstances [jvm] val objectArrayInstances : Sequence < HeapObject.HeapObjectArray > objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. primitiveArrayInstances [jvm] val primitiveArrayInstances : Sequence < HeapObject.HeapPrimitiveArray > Primitive arrays are one dimensional arrays of a primitive type. N-dimension arrays of primitive types (e.g. int[][]) are object arrays pointing to primitive arrays. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump. simpleName [jvm] val simpleName : String Returns name stripped of any string content before the last period (included). subclasses [jvm] val subclasses : Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump. superclass [jvm] val superclass : HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy/","text":"// shark-graph / shark / HeapObject / HeapClass / classHierarchy classHierarchy \u00b6 [jvm]\\ val classHierarchy : Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included).","title":"Class hierarchy"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/class-hierarchy/#classhierarchy","text":"[jvm]\\ val classHierarchy : Sequence < HeapObject.HeapClass > The class hierarchy starting at this class (included) and ending at the Object class (included).","title":"classHierarchy"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/direct-instances/","text":"// shark-graph / shark / HeapObject / HeapClass / directInstances directInstances \u00b6 [jvm]\\ val directInstances : Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class.","title":"Direct instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/direct-instances/#directinstances","text":"[jvm]\\ val directInstances : Sequence < HeapObject.HeapInstance > All direct instances of this class, ie excluding any instance of subclasses of this class.","title":"directInstances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/get/","text":"// shark-graph / shark / HeapObject / HeapClass / get get \u00b6 [jvm]\\ operator fun get (fieldName: String ): HeapField ? See also \u00b6 jvm shark.HeapObject.HeapClass","title":"Get"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/get/#get","text":"[jvm]\\ operator fun get (fieldName: String ): HeapField ?","title":"get"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/get/#see-also","text":"jvm shark.HeapObject.HeapClass","title":"See also"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/graph/","text":"// shark-graph / shark / HeapObject / HeapClass / graph graph \u00b6 [jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/graph/#graph","text":"[jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/has-reference-instance-fields/","text":"// shark-graph / shark / HeapObject / HeapClass / hasReferenceInstanceFields hasReferenceInstanceFields \u00b6 [jvm]\\ val hasReferenceInstanceFields : Boolean","title":"Has reference instance fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/has-reference-instance-fields/#hasreferenceinstancefields","text":"[jvm]\\ val hasReferenceInstanceFields : Boolean","title":"hasReferenceInstanceFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size/","text":"// shark-graph / shark / HeapObject / HeapClass / instanceByteSize instanceByteSize \u00b6 [jvm]\\ val instanceByteSize : Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses. See also \u00b6 jvm shark.HeapObject.HeapClass","title":"Instance byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size/#instancebytesize","text":"[jvm]\\ val instanceByteSize : Int The total byte size of fields for instances of this class, as registered in the class dump. This includes the size of fields from superclasses.","title":"instanceByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-byte-size/#see-also","text":"jvm shark.HeapObject.HeapClass","title":"See also"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-field-name/","text":"// shark-graph / shark / HeapObject / HeapClass / instanceFieldName instanceFieldName \u00b6 [jvm]\\ fun instanceFieldName (fieldRecord: HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord): String Returns the name of the field declared in this class for the specified fieldRecord .","title":"Instance field name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instance-field-name/#instancefieldname","text":"[jvm]\\ fun instanceFieldName (fieldRecord: HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord): String Returns the name of the field declared in this class for the specified fieldRecord .","title":"instanceFieldName"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instances/","text":"// shark-graph / shark / HeapObject / HeapClass / instances instances \u00b6 [jvm]\\ val instances : Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class.","title":"Instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/instances/#instances","text":"[jvm]\\ val instances : Sequence < HeapObject.HeapInstance > All instances of this class, including instances of subclasses of this class.","title":"instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-array-class/","text":"// shark-graph / shark / HeapObject / HeapClass / isArrayClass isArrayClass \u00b6 [jvm]\\ val isArrayClass : Boolean Returns true if this class is an array class, and false otherwise.","title":"Is array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-array-class/#isarrayclass","text":"[jvm]\\ val isArrayClass : Boolean Returns true if this class is an array class, and false otherwise.","title":"isArrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-object-array-class/","text":"// shark-graph / shark / HeapObject / HeapClass / isObjectArrayClass isObjectArrayClass \u00b6 [jvm]\\ val isObjectArrayClass : Boolean","title":"Is object array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-object-array-class/#isobjectarrayclass","text":"[jvm]\\ val isObjectArrayClass : Boolean","title":"isObjectArrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-primitive-array-class/","text":"// shark-graph / shark / HeapObject / HeapClass / isPrimitiveArrayClass isPrimitiveArrayClass \u00b6 [jvm]\\ val isPrimitiveArrayClass : Boolean","title":"Is primitive array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-primitive-array-class/#isprimitivearrayclass","text":"[jvm]\\ val isPrimitiveArrayClass : Boolean","title":"isPrimitiveArrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-primitive-wrapper-class/","text":"// shark-graph / shark / HeapObject / HeapClass / isPrimitiveWrapperClass isPrimitiveWrapperClass \u00b6 [jvm]\\ val isPrimitiveWrapperClass : Boolean Whether this is class is a primitive wrapper type","title":"Is primitive wrapper class"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/is-primitive-wrapper-class/#isprimitivewrapperclass","text":"[jvm]\\ val isPrimitiveWrapperClass : Boolean Whether this is class is a primitive wrapper type","title":"isPrimitiveWrapperClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/name/","text":"// shark-graph / shark / HeapObject / HeapClass / name name \u00b6 [jvm]\\ val name : String The name of this class, identical to Class.getName . If this class is an array class, the name has a suffix of brackets for each dimension of the array, e.g. com.Foo[][] is a class for 2 dimensional arrays of com.Foo. The behavior for primitive types changes depending on the VM that dumped the heap. JVM heap dumps don\u2019t have any HeapClass object for primitive types, instead the java.land.Class class has 9 instances (the 8 primitive types and void). Android heap dumps have an HeapClass object for primitive type and the java.land.Class class has no instance. If this is an array class, you can find the component type by removing the brackets at the end, e.g. name.substringBefore(\u2018[\u2018). Be careful when doing this for JVM heap dumps though, as if the component type is a primitive type there will not be a HeapClass object for it. This is especially tricky with N dimension primitive type arrays, which are instances of HeapObjectArray (vs single dimension primitive type arrays which are instances of HeapPrimitiveArray ).","title":"Name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/name/#name","text":"[jvm]\\ val name : String The name of this class, identical to Class.getName . If this class is an array class, the name has a suffix of brackets for each dimension of the array, e.g. com.Foo[][] is a class for 2 dimensional arrays of com.Foo. The behavior for primitive types changes depending on the VM that dumped the heap. JVM heap dumps don\u2019t have any HeapClass object for primitive types, instead the java.land.Class class has 9 instances (the 8 primitive types and void). Android heap dumps have an HeapClass object for primitive type and the java.land.Class class has no instance. If this is an array class, you can find the component type by removing the brackets at the end, e.g. name.substringBefore(\u2018[\u2018). Be careful when doing this for JVM heap dumps though, as if the component type is a primitive type there will not be a HeapClass object for it. This is especially tricky with N dimension primitive type arrays, which are instances of HeapObjectArray (vs single dimension primitive type arrays which are instances of HeapPrimitiveArray ).","title":"name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-array-instances/","text":"// shark-graph / shark / HeapObject / HeapClass / objectArrayInstances objectArrayInstances \u00b6 [jvm]\\ val objectArrayInstances : Sequence < HeapObject.HeapObjectArray >","title":"Object array instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-array-instances/#objectarrayinstances","text":"[jvm]\\ val objectArrayInstances : Sequence < HeapObject.HeapObjectArray >","title":"objectArrayInstances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-id/","text":"// shark-graph / shark / HeapObject / HeapClass / objectId objectId \u00b6 [jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-id/#objectid","text":"[jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-index/","text":"// shark-graph / shark / HeapObject / HeapClass / objectIndex objectIndex \u00b6 [jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"Object index"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/object-index/#objectindex","text":"[jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"objectIndex"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/primitive-array-instances/","text":"// shark-graph / shark / HeapObject / HeapClass / primitiveArrayInstances primitiveArrayInstances \u00b6 [jvm]\\ val primitiveArrayInstances : Sequence < HeapObject.HeapPrimitiveArray > Primitive arrays are one dimensional arrays of a primitive type. N-dimension arrays of primitive types (e.g. int[][]) are object arrays pointing to primitive arrays.","title":"Primitive array instances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/primitive-array-instances/#primitivearrayinstances","text":"[jvm]\\ val primitiveArrayInstances : Sequence < HeapObject.HeapPrimitiveArray > Primitive arrays are one dimensional arrays of a primitive type. N-dimension arrays of primitive types (e.g. int[][]) are object arrays pointing to primitive arrays.","title":"primitiveArrayInstances"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size/","text":"// shark-graph / shark / HeapObject / HeapClass / readFieldsByteSize readFieldsByteSize \u00b6 [jvm]\\ fun readFieldsByteSize (): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. This may trigger IO reads. See also \u00b6 jvm shark.HeapObject.HeapClass","title":"Read fields byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size/#readfieldsbytesize","text":"[jvm]\\ fun readFieldsByteSize (): Int The total byte size of fields for instances of this class, computed as the sum of the individual size of each field of this class. This does not include the size of fields from superclasses. This may trigger IO reads.","title":"readFieldsByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-fields-byte-size/#see-also","text":"jvm shark.HeapObject.HeapClass","title":"See also"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record-fields/","text":"// shark-graph / shark / HeapObject / HeapClass / readRecordFields readRecordFields \u00b6 [jvm]\\ fun readRecordFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord>","title":"Read record fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record-fields/#readrecordfields","text":"[jvm]\\ fun readRecordFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord>","title":"readRecordFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record-static-fields/","text":"// shark-graph / shark / HeapObject / HeapClass / readRecordStaticFields readRecordStaticFields \u00b6 [jvm]\\ fun readRecordStaticFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord>","title":"Read record static fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record-static-fields/#readrecordstaticfields","text":"[jvm]\\ fun readRecordStaticFields (): List <HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord>","title":"readRecordStaticFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record/","text":"// shark-graph / shark / HeapObject / HeapClass / readRecord readRecord \u00b6 [jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads and returns the underlying ClassDumpRecord. This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-record/#readrecord","text":"[jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads and returns the underlying ClassDumpRecord. This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-field/","text":"// shark-graph / shark / HeapObject / HeapClass / readStaticField readStaticField \u00b6 [jvm]\\ fun readStaticField (fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"Read static field"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-field/#readstaticfield","text":"[jvm]\\ fun readStaticField (fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the class represented by this HeapClass object, or null if this field does not exist. The name parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"readStaticField"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-fields/","text":"// shark-graph / shark / HeapObject / HeapClass / readStaticFields readStaticFields \u00b6 [jvm]\\ fun readStaticFields (): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . This may trigger IO reads.","title":"Read static fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/read-static-fields/#readstaticfields","text":"[jvm]\\ fun readStaticFields (): Sequence < HeapField > The static fields of this class, as a sequence of HeapField . This may trigger IO reads.","title":"readStaticFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/record-size/","text":"// shark-graph / shark / HeapObject / HeapClass / recordSize recordSize \u00b6 [jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Record size"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/record-size/#recordsize","text":"[jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"recordSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/simple-name/","text":"// shark-graph / shark / HeapObject / HeapClass / simpleName simpleName \u00b6 [jvm]\\ val simpleName : String Returns name stripped of any string content before the last period (included).","title":"Simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/simple-name/#simplename","text":"[jvm]\\ val simpleName : String Returns name stripped of any string content before the last period (included).","title":"simpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclass-of/","text":"// shark-graph / shark / HeapObject / HeapClass / subclassOf subclassOf \u00b6 [jvm]\\ infix fun subclassOf (superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass .","title":"Subclass of"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclass-of/#subclassof","text":"[jvm]\\ infix fun subclassOf (superclass: HeapObject.HeapClass ): Boolean Returns true if superclass is a superclass of this HeapClass .","title":"subclassOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclasses/","text":"// shark-graph / shark / HeapObject / HeapClass / subclasses subclasses \u00b6 [jvm]\\ val subclasses : Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump.","title":"Subclasses"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/subclasses/#subclasses","text":"[jvm]\\ val subclasses : Sequence < HeapObject.HeapClass > All the subclasses (direct and indirect) of this class, in the order they were recorded in the heap dump.","title":"subclasses"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass-of/","text":"// shark-graph / shark / HeapObject / HeapClass / superclassOf superclassOf \u00b6 [jvm]\\ infix fun superclassOf (subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass .","title":"Superclass of"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass-of/#superclassof","text":"[jvm]\\ infix fun superclassOf (subclass: HeapObject.HeapClass ): Boolean Returns true if subclass is a sub class of this HeapClass .","title":"superclassOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass/","text":"// shark-graph / shark / HeapObject / HeapClass / superclass superclass \u00b6 [jvm]\\ val superclass : HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"Superclass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/superclass/#superclass","text":"[jvm]\\ val superclass : HeapObject.HeapClass ? The HeapClass representing the superclass of this HeapClass . If this HeapClass represents either the Object class or a primitive type, then null is returned. If this HeapClass represents an array class then the HeapClass object representing the Object class is returned.","title":"superclass"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/to-string/","text":"// shark-graph / shark / HeapObject / HeapClass / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-class/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/","text":"// shark-graph / shark / HeapObject / HeapInstance HeapInstance \u00b6 [jvm]\\ class HeapInstance : HeapObject An instance in the heap dump. Functions \u00b6 Name Summary get [jvm] operator fun get (declaringClassName: String , fieldName: String ): HeapField ? operator fun get (declaringClass: KClass <out Any >, fieldName: String ): HeapField ? instanceOf [jvm] infix fun instanceOf (className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. [jvm] infix fun instanceOf (expectedClass: KClass <*>): Boolean infix fun instanceOf (expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class. readAsJavaString [jvm] fun readAsJavaString (): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. readField [jvm] fun readField (declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. [jvm] fun readField (declaringClass: KClass <out Any >, fieldName: String ): HeapField ? readFields [jvm] fun readFields (): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord. toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise byteSize [jvm] val byteSize : Int graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceClass [jvm] val instanceClass : HeapObject.HeapClass The class of this instance. instanceClassId [jvm] val instanceClassId : Long The heap identifier of the class of this instance. instanceClassName [jvm] val instanceClassName : String The name of the class of this instance, identical to Class.getName . instanceClassSimpleName [jvm] val instanceClassSimpleName : String Returns instanceClassName stripped of any string content before the last period (included). isPrimitiveWrapper [jvm] val isPrimitiveWrapper : Boolean Whether this is an instance of a primitive wrapper type. objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Index"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#heapinstance","text":"[jvm]\\ class HeapInstance : HeapObject An instance in the heap dump.","title":"HeapInstance"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#functions","text":"Name Summary get [jvm] operator fun get (declaringClassName: String , fieldName: String ): HeapField ? operator fun get (declaringClass: KClass <out Any >, fieldName: String ): HeapField ? instanceOf [jvm] infix fun instanceOf (className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. [jvm] infix fun instanceOf (expectedClass: KClass <*>): Boolean infix fun instanceOf (expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class. readAsJavaString [jvm] fun readAsJavaString (): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. readField [jvm] fun readField (declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. [jvm] fun readField (declaringClass: KClass <out Any >, fieldName: String ): HeapField ? readFields [jvm] fun readFields (): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord. toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/#properties","text":"Name Summary asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise byteSize [jvm] val byteSize : Int graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. instanceClass [jvm] val instanceClass : HeapObject.HeapClass The class of this instance. instanceClassId [jvm] val instanceClassId : Long The heap identifier of the class of this instance. instanceClassName [jvm] val instanceClassName : String The name of the class of this instance, identical to Class.getName . instanceClassSimpleName [jvm] val instanceClassSimpleName : String Returns instanceClassName stripped of any string content before the last period (included). isPrimitiveWrapper [jvm] val isPrimitiveWrapper : Boolean Whether this is an instance of a primitive wrapper type. objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/byte-size/","text":"// shark-graph / shark / HeapObject / HeapInstance / byteSize byteSize \u00b6 [jvm]\\ val byteSize : Int See also \u00b6 jvm shark.HeapObject.HeapClass","title":"Byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/byte-size/#bytesize","text":"[jvm]\\ val byteSize : Int","title":"byteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/byte-size/#see-also","text":"jvm shark.HeapObject.HeapClass","title":"See also"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/get/","text":"// shark-graph / shark / HeapObject / HeapInstance / get get \u00b6 [jvm]\\ operator fun get (declaringClass: KClass <out Any >, fieldName: String ): HeapField ? operator fun get (declaringClassName: String , fieldName: String ): HeapField ? See also \u00b6 jvm shark.HeapObject.HeapInstance","title":"Get"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/get/#get","text":"[jvm]\\ operator fun get (declaringClass: KClass <out Any >, fieldName: String ): HeapField ? operator fun get (declaringClassName: String , fieldName: String ): HeapField ?","title":"get"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/get/#see-also","text":"jvm shark.HeapObject.HeapInstance","title":"See also"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/graph/","text":"// shark-graph / shark / HeapObject / HeapInstance / graph graph \u00b6 [jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/graph/#graph","text":"[jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-id/","text":"// shark-graph / shark / HeapObject / HeapInstance / instanceClassId instanceClassId \u00b6 [jvm]\\ val instanceClassId : Long The heap identifier of the class of this instance.","title":"Instance class id"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-id/#instanceclassid","text":"[jvm]\\ val instanceClassId : Long The heap identifier of the class of this instance.","title":"instanceClassId"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name/","text":"// shark-graph / shark / HeapObject / HeapInstance / instanceClassName instanceClassName \u00b6 [jvm]\\ val instanceClassName : String The name of the class of this instance, identical to Class.getName .","title":"Instance class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-name/#instanceclassname","text":"[jvm]\\ val instanceClassName : String The name of the class of this instance, identical to Class.getName .","title":"instanceClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name/","text":"// shark-graph / shark / HeapObject / HeapInstance / instanceClassSimpleName instanceClassSimpleName \u00b6 [jvm]\\ val instanceClassSimpleName : String Returns instanceClassName stripped of any string content before the last period (included).","title":"Instance class simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class-simple-name/#instanceclasssimplename","text":"[jvm]\\ val instanceClassSimpleName : String Returns instanceClassName stripped of any string content before the last period (included).","title":"instanceClassSimpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class/","text":"// shark-graph / shark / HeapObject / HeapInstance / instanceClass instanceClass \u00b6 [jvm]\\ val instanceClass : HeapObject.HeapClass The class of this instance.","title":"Instance class"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-class/#instanceclass","text":"[jvm]\\ val instanceClass : HeapObject.HeapClass The class of this instance.","title":"instanceClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-of/","text":"// shark-graph / shark / HeapObject / HeapInstance / instanceOf instanceOf \u00b6 [jvm]\\ infix fun instanceOf (className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. [jvm]\\ infix fun instanceOf (expectedClass: KClass <*>): Boolean infix fun instanceOf (expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class.","title":"Instance of"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/instance-of/#instanceof","text":"[jvm]\\ infix fun instanceOf (className: String ): Boolean Returns true if this is an instance of the class named className or an instance of a subclass of that class. [jvm]\\ infix fun instanceOf (expectedClass: KClass <*>): Boolean infix fun instanceOf (expectedClass: HeapObject.HeapClass ): Boolean Returns true if this is an instance of expectedClass or an instance of a subclass of that class.","title":"instanceOf"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper/","text":"// shark-graph / shark / HeapObject / HeapInstance / isPrimitiveWrapper isPrimitiveWrapper \u00b6 [jvm]\\ val isPrimitiveWrapper : Boolean Whether this is an instance of a primitive wrapper type.","title":"Is primitive wrapper"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/is-primitive-wrapper/#isprimitivewrapper","text":"[jvm]\\ val isPrimitiveWrapper : Boolean Whether this is an instance of a primitive wrapper type.","title":"isPrimitiveWrapper"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-id/","text":"// shark-graph / shark / HeapObject / HeapInstance / objectId objectId \u00b6 [jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-id/#objectid","text":"[jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-index/","text":"// shark-graph / shark / HeapObject / HeapInstance / objectIndex objectIndex \u00b6 [jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"Object index"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/object-index/#objectindex","text":"[jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"objectIndex"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string/","text":"// shark-graph / shark / HeapObject / HeapInstance / readAsJavaString readAsJavaString \u00b6 [jvm]\\ fun readAsJavaString (): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"Read as java string"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-as-java-string/#readasjavastring","text":"[jvm]\\ fun readAsJavaString (): String ? If this HeapInstance is an instance of the String class, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"readAsJavaString"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-field/","text":"// shark-graph / shark / HeapObject / HeapInstance / readField readField \u00b6 [jvm]\\ fun readField (declaringClass: KClass <out Any >, fieldName: String ): HeapField ? See also \u00b6 jvm shark.HeapObject.HeapInstance [jvm]\\ fun readField (declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"Read field"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-field/#readfield","text":"[jvm]\\ fun readField (declaringClass: KClass <out Any >, fieldName: String ): HeapField ?","title":"readField"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-field/#see-also","text":"jvm shark.HeapObject.HeapInstance [jvm]\\ fun readField (declaringClassName: String , fieldName: String ): HeapField ? Returns a HeapField object that reflects the specified declared field of the instance represented by this HeapInstance object, or null if this field does not exist. The declaringClassName specifies the class in which the desired field is declared, and the fieldName parameter specifies the simple name of the desired field. Also available as a convenience operator: get This may trigger IO reads.","title":"See also"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-fields/","text":"// shark-graph / shark / HeapObject / HeapInstance / readFields readFields \u00b6 [jvm]\\ fun readFields (): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . This may trigger IO reads.","title":"Read fields"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-fields/#readfields","text":"[jvm]\\ fun readFields (): Sequence < HeapField > The fields of this instance, as a sequence of HeapField . This may trigger IO reads.","title":"readFields"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-record/","text":"// shark-graph / shark / HeapObject / HeapInstance / readRecord readRecord \u00b6 [jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord. This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/read-record/#readrecord","text":"[jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads and returns the underlying InstanceDumpRecord. This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/record-size/","text":"// shark-graph / shark / HeapObject / HeapInstance / recordSize recordSize \u00b6 [jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Record size"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/record-size/#recordsize","text":"[jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"recordSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/to-string/","text":"// shark-graph / shark / HeapObject / HeapInstance / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-instance/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/","text":"// shark-graph / shark / HeapObject / HeapObjectArray HeapObjectArray \u00b6 [jvm]\\ class HeapObjectArray : HeapObject An object array in the heap dump. Functions \u00b6 Name Summary readByteSize [jvm] fun readByteSize (): Int The total byte shallow size of elements in this array. readElements [jvm] fun readElements (): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord. toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary arrayClass [jvm] val arrayClass : HeapObject.HeapClass The class of this array. arrayClassId [jvm] val arrayClassId : Long The heap identifier of the class of this array. arrayClassName [jvm] val arrayClassName : String The name of the class of this array, identical to Class.getName . arrayClassSimpleName [jvm] val arrayClassSimpleName : String Returns arrayClassName stripped of any string content before the last period (included). asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Index"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#heapobjectarray","text":"[jvm]\\ class HeapObjectArray : HeapObject An object array in the heap dump.","title":"HeapObjectArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#functions","text":"Name Summary readByteSize [jvm] fun readByteSize (): Int The total byte shallow size of elements in this array. readElements [jvm] fun readElements (): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord. toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/#properties","text":"Name Summary arrayClass [jvm] val arrayClass : HeapObject.HeapClass The class of this array. arrayClassId [jvm] val arrayClassId : Long The heap identifier of the class of this array. arrayClassName [jvm] val arrayClassName : String The name of the class of this array, identical to Class.getName . arrayClassSimpleName [jvm] val arrayClassSimpleName : String Returns arrayClassName stripped of any string content before the last period (included). asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-id/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / arrayClassId arrayClassId \u00b6 [jvm]\\ val arrayClassId : Long The heap identifier of the class of this array.","title":"Array class id"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-id/#arrayclassid","text":"[jvm]\\ val arrayClassId : Long The heap identifier of the class of this array.","title":"arrayClassId"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / arrayClassName arrayClassName \u00b6 [jvm]\\ val arrayClassName : String The name of the class of this array, identical to Class.getName .","title":"Array class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-name/#arrayclassname","text":"[jvm]\\ val arrayClassName : String The name of the class of this array, identical to Class.getName .","title":"arrayClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / arrayClassSimpleName arrayClassSimpleName \u00b6 [jvm]\\ val arrayClassSimpleName : String Returns arrayClassName stripped of any string content before the last period (included).","title":"Array class simple name"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class-simple-name/#arrayclasssimplename","text":"[jvm]\\ val arrayClassSimpleName : String Returns arrayClassName stripped of any string content before the last period (included).","title":"arrayClassSimpleName"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / arrayClass arrayClass \u00b6 [jvm]\\ val arrayClass : HeapObject.HeapClass The class of this array.","title":"Array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/array-class/#arrayclass","text":"[jvm]\\ val arrayClass : HeapObject.HeapClass The class of this array.","title":"arrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/graph/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / graph graph \u00b6 [jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/graph/#graph","text":"[jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-id/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / objectId objectId \u00b6 [jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-id/#objectid","text":"[jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-index/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / objectIndex objectIndex \u00b6 [jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"Object index"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/object-index/#objectindex","text":"[jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"objectIndex"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / readByteSize readByteSize \u00b6 [jvm]\\ fun readByteSize (): Int The total byte shallow size of elements in this array.","title":"Read byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-byte-size/#readbytesize","text":"[jvm]\\ fun readByteSize (): Int The total byte shallow size of elements in this array.","title":"readByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-elements/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / readElements readElements \u00b6 [jvm]\\ fun readElements (): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . This may trigger IO reads.","title":"Read elements"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-elements/#readelements","text":"[jvm]\\ fun readElements (): Sequence < HeapValue > The elements in this array, as a sequence of HeapValue . This may trigger IO reads.","title":"readElements"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-record/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / readRecord readRecord \u00b6 [jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord. This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/read-record/#readrecord","text":"[jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads and returns the underlying ObjectArrayDumpRecord. This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/record-size/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / recordSize recordSize \u00b6 [jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Record size"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/record-size/#recordsize","text":"[jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"recordSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/to-string/","text":"// shark-graph / shark / HeapObject / HeapObjectArray / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-object-array/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray HeapPrimitiveArray \u00b6 [jvm]\\ class HeapPrimitiveArray : HeapObject A primitive array in the heap dump. Functions \u00b6 Name Summary readByteSize [jvm] fun readByteSize (): Int The total byte shallow size of elements in this array. readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord. toString [jvm] open override fun toString (): String Properties \u00b6 Name Summary arrayClass [jvm] val arrayClass : HeapObject.HeapClass The class of this array. arrayClassName [jvm] val arrayClassName : String The name of the class of this array, identical to Class.getName . asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. primitiveType [jvm] val primitiveType : PrimitiveType The PrimitiveType of elements in this array. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Index"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#heapprimitivearray","text":"[jvm]\\ class HeapPrimitiveArray : HeapObject A primitive array in the heap dump.","title":"HeapPrimitiveArray"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#functions","text":"Name Summary readByteSize [jvm] fun readByteSize (): Int The total byte shallow size of elements in this array. readRecord [jvm] open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord. toString [jvm] open override fun toString (): String","title":"Functions"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/#properties","text":"Name Summary arrayClass [jvm] val arrayClass : HeapObject.HeapClass The class of this array. arrayClassName [jvm] val arrayClassName : String The name of the class of this array, identical to Class.getName . asClass [jvm] val asClass : HeapObject.HeapClass ? This HeapObject as a HeapClass if it is one, or null otherwise asInstance [jvm] val asInstance : HeapObject.HeapInstance ? This HeapObject as a HeapInstance if it is one, or null otherwise asObjectArray [jvm] val asObjectArray : HeapObject.HeapObjectArray ? This HeapObject as a HeapObjectArray if it is one, or null otherwise asPrimitiveArray [jvm] val asPrimitiveArray : HeapObject.HeapPrimitiveArray ? This HeapObject as a HeapPrimitiveArray if it is one, or null otherwise graph [jvm] open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. objectId [jvm] open override val objectId : Long The heap identifier of this object. objectIndex [jvm] open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays. primitiveType [jvm] val primitiveType : PrimitiveType The PrimitiveType of elements in this array. recordSize [jvm] open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / arrayClassName arrayClassName \u00b6 [jvm]\\ val arrayClassName : String The name of the class of this array, identical to Class.getName .","title":"Array class name"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class-name/#arrayclassname","text":"[jvm]\\ val arrayClassName : String The name of the class of this array, identical to Class.getName .","title":"arrayClassName"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / arrayClass arrayClass \u00b6 [jvm]\\ val arrayClass : HeapObject.HeapClass The class of this array.","title":"Array class"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/array-class/#arrayclass","text":"[jvm]\\ val arrayClass : HeapObject.HeapClass The class of this array.","title":"arrayClass"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/graph/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / graph graph \u00b6 [jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/graph/#graph","text":"[jvm]\\ open override val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / objectId objectId \u00b6 [jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"Object id"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-id/#objectid","text":"[jvm]\\ open override val objectId : Long The heap identifier of this object.","title":"objectId"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-index/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / objectIndex objectIndex \u00b6 [jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"Object index"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/object-index/#objectindex","text":"[jvm]\\ open override val objectIndex : Int An positive object index that\u2019s specific to how Shark stores objects in memory. The index starts at 0 and ends at HeapGraph.objectCount - 1. There are no gaps, every index value corresponds to an object. Classes are first, then instances, then object arrays then primitive arrays.","title":"objectIndex"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / primitiveType primitiveType \u00b6 [jvm]\\ val primitiveType : PrimitiveType The PrimitiveType of elements in this array.","title":"Primitive type"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/primitive-type/#primitivetype","text":"[jvm]\\ val primitiveType : PrimitiveType The PrimitiveType of elements in this array.","title":"primitiveType"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / readByteSize readByteSize \u00b6 [jvm]\\ fun readByteSize (): Int The total byte shallow size of elements in this array.","title":"Read byte size"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-byte-size/#readbytesize","text":"[jvm]\\ fun readByteSize (): Int The total byte shallow size of elements in this array.","title":"readByteSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / readRecord readRecord \u00b6 [jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord. This may trigger IO reads.","title":"Read record"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/read-record/#readrecord","text":"[jvm]\\ open override fun readRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads and returns the underlying PrimitiveArrayDumpRecord. This may trigger IO reads.","title":"readRecord"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/record-size/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / recordSize recordSize \u00b6 [jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"Record size"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/record-size/#recordsize","text":"[jvm]\\ open override val recordSize : Int The total byte size for the record of this object in the heap dump.","title":"recordSize"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string/","text":"// shark-graph / shark / HeapObject / HeapPrimitiveArray / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"api/shark-graph/shark/-heap-object/-heap-primitive-array/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"api/shark-graph/shark/-heap-value/","text":"// shark-graph / shark / HeapValue HeapValue \u00b6 [jvm]\\ class HeapValue (graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type. Constructors \u00b6 HeapValue [jvm] fun HeapValue (graph: HeapGraph , holder: ValueHolder) Functions \u00b6 Name Summary readAsJavaString [jvm] fun readAsJavaString (): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. Properties \u00b6 Name Summary asBoolean [jvm] val asBoolean : Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise. asByte [jvm] val asByte : Byte ? This HeapValue as a Byte if it represents one, or null otherwise. asChar [jvm] val asChar : Char ? This HeapValue as a Char if it represents one, or null otherwise. asDouble [jvm] val asDouble : Double ? This HeapValue as a Double if it represents one, or null otherwise. asFloat [jvm] val asFloat : Float ? This HeapValue as a Float if it represents one, or null otherwise. asInt [jvm] val asInt : Int ? This HeapValue as an Int if it represents one, or null otherwise. asLong [jvm] val asLong : Long ? This HeapValue as a Long if it represents one, or null otherwise. asNonNullObjectId [jvm] val asNonNullObjectId : Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise. asObject [jvm] val asObject : HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise. asObjectId [jvm] val asObjectId : Long ? This HeapValue as a Long if it represents an object reference, or null otherwise. asShort [jvm] val asShort : Short ? This HeapValue as a Short if it represents one, or null otherwise. graph [jvm] val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. holder [jvm] val holder : ValueHolder Holds the actual value that this HeapValue represents. isNonNullReference [jvm] val isNonNullReference : Boolean True is this HeapValue represents a non null object reference, false otherwise. isNullReference [jvm] val isNullReference : Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"Index"},{"location":"api/shark-graph/shark/-heap-value/#heapvalue","text":"[jvm]\\ class HeapValue (graph: HeapGraph , holder: ValueHolder) Represents a value in the heap dump, which can be an object reference or a primitive type.","title":"HeapValue"},{"location":"api/shark-graph/shark/-heap-value/#constructors","text":"HeapValue [jvm] fun HeapValue (graph: HeapGraph , holder: ValueHolder)","title":"Constructors"},{"location":"api/shark-graph/shark/-heap-value/#functions","text":"Name Summary readAsJavaString [jvm] fun readAsJavaString (): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null.","title":"Functions"},{"location":"api/shark-graph/shark/-heap-value/#properties","text":"Name Summary asBoolean [jvm] val asBoolean : Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise. asByte [jvm] val asByte : Byte ? This HeapValue as a Byte if it represents one, or null otherwise. asChar [jvm] val asChar : Char ? This HeapValue as a Char if it represents one, or null otherwise. asDouble [jvm] val asDouble : Double ? This HeapValue as a Double if it represents one, or null otherwise. asFloat [jvm] val asFloat : Float ? This HeapValue as a Float if it represents one, or null otherwise. asInt [jvm] val asInt : Int ? This HeapValue as an Int if it represents one, or null otherwise. asLong [jvm] val asLong : Long ? This HeapValue as a Long if it represents one, or null otherwise. asNonNullObjectId [jvm] val asNonNullObjectId : Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise. asObject [jvm] val asObject : HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise. asObjectId [jvm] val asObjectId : Long ? This HeapValue as a Long if it represents an object reference, or null otherwise. asShort [jvm] val asShort : Short ? This HeapValue as a Short if it represents one, or null otherwise. graph [jvm] val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap. holder [jvm] val holder : ValueHolder Holds the actual value that this HeapValue represents. isNonNullReference [jvm] val isNonNullReference : Boolean True is this HeapValue represents a non null object reference, false otherwise. isNullReference [jvm] val isNullReference : Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"Properties"},{"location":"api/shark-graph/shark/-heap-value/-heap-value/","text":"// shark-graph / shark / HeapValue / HeapValue HeapValue \u00b6 [jvm]\\ fun HeapValue (graph: HeapGraph , holder: ValueHolder)","title":" heap value"},{"location":"api/shark-graph/shark/-heap-value/-heap-value/#heapvalue","text":"[jvm]\\ fun HeapValue (graph: HeapGraph , holder: ValueHolder)","title":"HeapValue"},{"location":"api/shark-graph/shark/-heap-value/as-boolean/","text":"// shark-graph / shark / HeapValue / asBoolean asBoolean \u00b6 [jvm]\\ val asBoolean : Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise.","title":"As boolean"},{"location":"api/shark-graph/shark/-heap-value/as-boolean/#asboolean","text":"[jvm]\\ val asBoolean : Boolean ? This HeapValue as a Boolean if it represents one, or null otherwise.","title":"asBoolean"},{"location":"api/shark-graph/shark/-heap-value/as-byte/","text":"// shark-graph / shark / HeapValue / asByte asByte \u00b6 [jvm]\\ val asByte : Byte ? This HeapValue as a Byte if it represents one, or null otherwise.","title":"As byte"},{"location":"api/shark-graph/shark/-heap-value/as-byte/#asbyte","text":"[jvm]\\ val asByte : Byte ? This HeapValue as a Byte if it represents one, or null otherwise.","title":"asByte"},{"location":"api/shark-graph/shark/-heap-value/as-char/","text":"// shark-graph / shark / HeapValue / asChar asChar \u00b6 [jvm]\\ val asChar : Char ? This HeapValue as a Char if it represents one, or null otherwise.","title":"As char"},{"location":"api/shark-graph/shark/-heap-value/as-char/#aschar","text":"[jvm]\\ val asChar : Char ? This HeapValue as a Char if it represents one, or null otherwise.","title":"asChar"},{"location":"api/shark-graph/shark/-heap-value/as-double/","text":"// shark-graph / shark / HeapValue / asDouble asDouble \u00b6 [jvm]\\ val asDouble : Double ? This HeapValue as a Double if it represents one, or null otherwise.","title":"As double"},{"location":"api/shark-graph/shark/-heap-value/as-double/#asdouble","text":"[jvm]\\ val asDouble : Double ? This HeapValue as a Double if it represents one, or null otherwise.","title":"asDouble"},{"location":"api/shark-graph/shark/-heap-value/as-float/","text":"// shark-graph / shark / HeapValue / asFloat asFloat \u00b6 [jvm]\\ val asFloat : Float ? This HeapValue as a Float if it represents one, or null otherwise.","title":"As float"},{"location":"api/shark-graph/shark/-heap-value/as-float/#asfloat","text":"[jvm]\\ val asFloat : Float ? This HeapValue as a Float if it represents one, or null otherwise.","title":"asFloat"},{"location":"api/shark-graph/shark/-heap-value/as-int/","text":"// shark-graph / shark / HeapValue / asInt asInt \u00b6 [jvm]\\ val asInt : Int ? This HeapValue as an Int if it represents one, or null otherwise.","title":"As int"},{"location":"api/shark-graph/shark/-heap-value/as-int/#asint","text":"[jvm]\\ val asInt : Int ? This HeapValue as an Int if it represents one, or null otherwise.","title":"asInt"},{"location":"api/shark-graph/shark/-heap-value/as-long/","text":"// shark-graph / shark / HeapValue / asLong asLong \u00b6 [jvm]\\ val asLong : Long ? This HeapValue as a Long if it represents one, or null otherwise.","title":"As long"},{"location":"api/shark-graph/shark/-heap-value/as-long/#aslong","text":"[jvm]\\ val asLong : Long ? This HeapValue as a Long if it represents one, or null otherwise.","title":"asLong"},{"location":"api/shark-graph/shark/-heap-value/as-non-null-object-id/","text":"// shark-graph / shark / HeapValue / asNonNullObjectId asNonNullObjectId \u00b6 [jvm]\\ val asNonNullObjectId : Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise.","title":"As non null object id"},{"location":"api/shark-graph/shark/-heap-value/as-non-null-object-id/#asnonnullobjectid","text":"[jvm]\\ val asNonNullObjectId : Long ? This HeapValue as a Long if it represents a non null object reference, or null otherwise.","title":"asNonNullObjectId"},{"location":"api/shark-graph/shark/-heap-value/as-object-id/","text":"// shark-graph / shark / HeapValue / asObjectId asObjectId \u00b6 [jvm]\\ val asObjectId : Long ? This HeapValue as a Long if it represents an object reference, or null otherwise.","title":"As object id"},{"location":"api/shark-graph/shark/-heap-value/as-object-id/#asobjectid","text":"[jvm]\\ val asObjectId : Long ? This HeapValue as a Long if it represents an object reference, or null otherwise.","title":"asObjectId"},{"location":"api/shark-graph/shark/-heap-value/as-object/","text":"// shark-graph / shark / HeapValue / asObject asObject \u00b6 [jvm]\\ val asObject : HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise.","title":"As object"},{"location":"api/shark-graph/shark/-heap-value/as-object/#asobject","text":"[jvm]\\ val asObject : HeapObject ? The HeapObject referenced by this HeapValue if it represents a non null object reference, or null otherwise.","title":"asObject"},{"location":"api/shark-graph/shark/-heap-value/as-short/","text":"// shark-graph / shark / HeapValue / asShort asShort \u00b6 [jvm]\\ val asShort : Short ? This HeapValue as a Short if it represents one, or null otherwise.","title":"As short"},{"location":"api/shark-graph/shark/-heap-value/as-short/#asshort","text":"[jvm]\\ val asShort : Short ? This HeapValue as a Short if it represents one, or null otherwise.","title":"asShort"},{"location":"api/shark-graph/shark/-heap-value/graph/","text":"// shark-graph / shark / HeapValue / graph graph \u00b6 [jvm]\\ val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"Graph"},{"location":"api/shark-graph/shark/-heap-value/graph/#graph","text":"[jvm]\\ val graph : HeapGraph The graph of objects in the heap, which you can use to navigate the heap.","title":"graph"},{"location":"api/shark-graph/shark/-heap-value/holder/","text":"// shark-graph / shark / HeapValue / holder holder \u00b6 [jvm]\\ val holder : ValueHolder Holds the actual value that this HeapValue represents.","title":"Holder"},{"location":"api/shark-graph/shark/-heap-value/holder/#holder","text":"[jvm]\\ val holder : ValueHolder Holds the actual value that this HeapValue represents.","title":"holder"},{"location":"api/shark-graph/shark/-heap-value/is-non-null-reference/","text":"// shark-graph / shark / HeapValue / isNonNullReference isNonNullReference \u00b6 [jvm]\\ val isNonNullReference : Boolean True is this HeapValue represents a non null object reference, false otherwise.","title":"Is non null reference"},{"location":"api/shark-graph/shark/-heap-value/is-non-null-reference/#isnonnullreference","text":"[jvm]\\ val isNonNullReference : Boolean True is this HeapValue represents a non null object reference, false otherwise.","title":"isNonNullReference"},{"location":"api/shark-graph/shark/-heap-value/is-null-reference/","text":"// shark-graph / shark / HeapValue / isNullReference isNullReference \u00b6 [jvm]\\ val isNullReference : Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"Is null reference"},{"location":"api/shark-graph/shark/-heap-value/is-null-reference/#isnullreference","text":"[jvm]\\ val isNullReference : Boolean True is this HeapValue represents a null object reference, false otherwise.","title":"isNullReference"},{"location":"api/shark-graph/shark/-heap-value/read-as-java-string/","text":"// shark-graph / shark / HeapValue / readAsJavaString readAsJavaString \u00b6 [jvm]\\ fun readAsJavaString (): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"Read as java string"},{"location":"api/shark-graph/shark/-heap-value/read-as-java-string/#readasjavastring","text":"[jvm]\\ fun readAsJavaString (): String ? If this HeapValue if it represents a non null object reference to an instance of the String class that exists in the heap dump, returns a String instance with content that matches the string in the heap dump. Otherwise returns null. This may trigger IO reads.","title":"readAsJavaString"},{"location":"api/shark-graph/shark/-hprof-heap-graph/","text":"// shark-graph / shark / HprofHeapGraph HprofHeapGraph \u00b6 [jvm]\\ class HprofHeapGraph : CloseableHeapGraph A HeapGraph that reads from an Hprof file indexed by HprofIndex . Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary close [jvm] open override fun close () findClassByName [jvm] open override fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById [jvm] open override fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull [jvm] open override fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. findObjectByIndex [jvm] open override fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1. lruCacheStats [jvm] fun lruCacheStats (): String This is only public so that we can publish stats. Accessing this requires casting HeapGraph to HprofHeapGraph so it\u2019s really not a public API. May change at any time! objectExists [jvm] open override fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump. Properties \u00b6 Name Summary classCount [jvm] open override val classCount : Int classes [jvm] open override val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context [jvm] open override val context : GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots [jvm] open override val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize [jvm] open override val identifierByteSize : Int instanceCount [jvm] open override val instanceCount : Int instances [jvm] open override val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objectArrayCount [jvm] open override val objectArrayCount : Int objectArrays [jvm] open override val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. objectCount [jvm] open override val objectCount : Int objects [jvm] open override val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. primitiveArrayCount [jvm] open override val primitiveArrayCount : Int primitiveArrays [jvm] open override val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump.","title":"Index"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#hprofheapgraph","text":"[jvm]\\ class HprofHeapGraph : CloseableHeapGraph A HeapGraph that reads from an Hprof file indexed by HprofIndex .","title":"HprofHeapGraph"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#functions","text":"Name Summary close [jvm] open override fun close () findClassByName [jvm] open override fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found. findObjectById [jvm] open override fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise. findObjectByIdOrNull [jvm] open override fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found. findObjectByIndex [jvm] open override fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1. lruCacheStats [jvm] fun lruCacheStats (): String This is only public so that we can publish stats. Accessing this requires casting HeapGraph to HprofHeapGraph so it\u2019s really not a public API. May change at any time! objectExists [jvm] open override fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Functions"},{"location":"api/shark-graph/shark/-hprof-heap-graph/#properties","text":"Name Summary classCount [jvm] open override val classCount : Int classes [jvm] open override val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. context [jvm] open override val context : GraphContext In memory store that can be used to store objects this HeapGraph instance. gcRoots [jvm] open override val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump. identifierByteSize [jvm] open override val identifierByteSize : Int instanceCount [jvm] open override val instanceCount : Int instances [jvm] open override val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. objectArrayCount [jvm] open override val objectArrayCount : Int objectArrays [jvm] open override val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. objectCount [jvm] open override val objectCount : Int objects [jvm] open override val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. primitiveArrayCount [jvm] open override val primitiveArrayCount : Int primitiveArrays [jvm] open override val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump.","title":"Properties"},{"location":"api/shark-graph/shark/-hprof-heap-graph/class-count/","text":"// shark-graph / shark / HprofHeapGraph / classCount classCount \u00b6 [jvm]\\ open override val classCount : Int","title":"Class count"},{"location":"api/shark-graph/shark/-hprof-heap-graph/class-count/#classcount","text":"[jvm]\\ open override val classCount : Int","title":"classCount"},{"location":"api/shark-graph/shark/-hprof-heap-graph/classes/","text":"// shark-graph / shark / HprofHeapGraph / classes classes \u00b6 [jvm]\\ open override val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"Classes"},{"location":"api/shark-graph/shark/-hprof-heap-graph/classes/#classes","text":"[jvm]\\ open override val classes : Sequence < HeapObject.HeapClass > Sequence of all classes in the heap dump. This sequence does not trigger any IO reads.","title":"classes"},{"location":"api/shark-graph/shark/-hprof-heap-graph/close/","text":"// shark-graph / shark / HprofHeapGraph / close close \u00b6 [jvm]\\ open override fun close ()","title":"Close"},{"location":"api/shark-graph/shark/-hprof-heap-graph/close/#close","text":"[jvm]\\ open override fun close ()","title":"close"},{"location":"api/shark-graph/shark/-hprof-heap-graph/context/","text":"// shark-graph / shark / HprofHeapGraph / context context \u00b6 [jvm]\\ open override val context : GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"Context"},{"location":"api/shark-graph/shark/-hprof-heap-graph/context/#context","text":"[jvm]\\ open override val context : GraphContext In memory store that can be used to store objects this HeapGraph instance.","title":"context"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-class-by-name/","text":"// shark-graph / shark / HprofHeapGraph / findClassByName findClassByName \u00b6 [jvm]\\ open override fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"Find class by name"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-class-by-name/#findclassbyname","text":"[jvm]\\ open override fun findClassByName (className: String ): HeapObject.HeapClass ? Returns the HeapClass corresponding to the provided className , or null if the class cannot be found.","title":"findClassByName"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id-or-null/","text":"// shark-graph / shark / HprofHeapGraph / findObjectByIdOrNull findObjectByIdOrNull \u00b6 [jvm]\\ open override fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"Find object by id or null"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id-or-null/#findobjectbyidornull","text":"[jvm]\\ open override fun findObjectByIdOrNull (objectId: Long ): HeapObject ? Returns the HeapObject corresponding to the provided objectId or null if it cannot be found.","title":"findObjectByIdOrNull"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id/","text":"// shark-graph / shark / HprofHeapGraph / findObjectById findObjectById \u00b6 [jvm]\\ open override fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"Find object by id"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-id/#findobjectbyid","text":"[jvm]\\ open override fun findObjectById (objectId: Long ): HeapObject Returns the HeapObject corresponding to the provided objectId , and throws IllegalArgumentException otherwise.","title":"findObjectById"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-index/","text":"// shark-graph / shark / HprofHeapGraph / findObjectByIndex findObjectByIndex \u00b6 [jvm]\\ open override fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1.","title":"Find object by index"},{"location":"api/shark-graph/shark/-hprof-heap-graph/find-object-by-index/#findobjectbyindex","text":"[jvm]\\ open override fun findObjectByIndex (objectIndex: Int ): HeapObject Returns the HeapObject corresponding to the provided objectIndex , and throws IllegalArgumentException if objectIndex is less than 0 or more than objectCount - 1.","title":"findObjectByIndex"},{"location":"api/shark-graph/shark/-hprof-heap-graph/gc-roots/","text":"// shark-graph / shark / HprofHeapGraph / gcRoots gcRoots \u00b6 [jvm]\\ open override val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"Gc roots"},{"location":"api/shark-graph/shark/-hprof-heap-graph/gc-roots/#gcroots","text":"[jvm]\\ open override val gcRoots : List <GcRoot> All GC roots which type matches types known to this heap graph and which point to non null references. You can retrieve the object that a GC Root points to by calling findObjectById with GcRoot.id, however you need to first check that objectExists returns true because GC roots can point to objects that don\u2019t exist in the heap dump.","title":"gcRoots"},{"location":"api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size/","text":"// shark-graph / shark / HprofHeapGraph / identifierByteSize identifierByteSize \u00b6 [jvm]\\ open override val identifierByteSize : Int","title":"Identifier byte size"},{"location":"api/shark-graph/shark/-hprof-heap-graph/identifier-byte-size/#identifierbytesize","text":"[jvm]\\ open override val identifierByteSize : Int","title":"identifierByteSize"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instance-count/","text":"// shark-graph / shark / HprofHeapGraph / instanceCount instanceCount \u00b6 [jvm]\\ open override val instanceCount : Int","title":"Instance count"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instance-count/#instancecount","text":"[jvm]\\ open override val instanceCount : Int","title":"instanceCount"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instances/","text":"// shark-graph / shark / HprofHeapGraph / instances instances \u00b6 [jvm]\\ open override val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"Instances"},{"location":"api/shark-graph/shark/-hprof-heap-graph/instances/#instances","text":"[jvm]\\ open override val instances : Sequence < HeapObject.HeapInstance > Sequence of all instances in the heap dump. This sequence does not trigger any IO reads.","title":"instances"},{"location":"api/shark-graph/shark/-hprof-heap-graph/lru-cache-stats/","text":"// shark-graph / shark / HprofHeapGraph / lruCacheStats lruCacheStats \u00b6 [jvm]\\ fun lruCacheStats (): String This is only public so that we can publish stats. Accessing this requires casting HeapGraph to HprofHeapGraph so it\u2019s really not a public API. May change at any time!","title":"Lru cache stats"},{"location":"api/shark-graph/shark/-hprof-heap-graph/lru-cache-stats/#lrucachestats","text":"[jvm]\\ fun lruCacheStats (): String This is only public so that we can publish stats. Accessing this requires casting HeapGraph to HprofHeapGraph so it\u2019s really not a public API. May change at any time!","title":"lruCacheStats"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-array-count/","text":"// shark-graph / shark / HprofHeapGraph / objectArrayCount objectArrayCount \u00b6 [jvm]\\ open override val objectArrayCount : Int","title":"Object array count"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-array-count/#objectarraycount","text":"[jvm]\\ open override val objectArrayCount : Int","title":"objectArrayCount"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-arrays/","text":"// shark-graph / shark / HprofHeapGraph / objectArrays objectArrays \u00b6 [jvm]\\ open override val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Object arrays"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-arrays/#objectarrays","text":"[jvm]\\ open override val objectArrays : Sequence < HeapObject.HeapObjectArray > Sequence of all object arrays in the heap dump. This sequence does not trigger any IO reads.","title":"objectArrays"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-count/","text":"// shark-graph / shark / HprofHeapGraph / objectCount objectCount \u00b6 [jvm]\\ open override val objectCount : Int","title":"Object count"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-count/#objectcount","text":"[jvm]\\ open override val objectCount : Int","title":"objectCount"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-exists/","text":"// shark-graph / shark / HprofHeapGraph / objectExists objectExists \u00b6 [jvm]\\ open override fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"Object exists"},{"location":"api/shark-graph/shark/-hprof-heap-graph/object-exists/#objectexists","text":"[jvm]\\ open override fun objectExists (objectId: Long ): Boolean Returns true if the provided objectId exists in the heap dump.","title":"objectExists"},{"location":"api/shark-graph/shark/-hprof-heap-graph/objects/","text":"// shark-graph / shark / HprofHeapGraph / objects objects \u00b6 [jvm]\\ open override val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"Objects"},{"location":"api/shark-graph/shark/-hprof-heap-graph/objects/#objects","text":"[jvm]\\ open override val objects : Sequence < HeapObject > Sequence of all objects in the heap dump. This sequence does not trigger any IO reads.","title":"objects"},{"location":"api/shark-graph/shark/-hprof-heap-graph/primitive-array-count/","text":"// shark-graph / shark / HprofHeapGraph / primitiveArrayCount primitiveArrayCount \u00b6 [jvm]\\ open override val primitiveArrayCount : Int","title":"Primitive array count"},{"location":"api/shark-graph/shark/-hprof-heap-graph/primitive-array-count/#primitivearraycount","text":"[jvm]\\ open override val primitiveArrayCount : Int","title":"primitiveArrayCount"},{"location":"api/shark-graph/shark/-hprof-heap-graph/primitive-arrays/","text":"// shark-graph / shark / HprofHeapGraph / primitiveArrays primitiveArrays \u00b6 [jvm]\\ open override val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"Primitive arrays"},{"location":"api/shark-graph/shark/-hprof-heap-graph/primitive-arrays/#primitivearrays","text":"[jvm]\\ open override val primitiveArrays : Sequence < HeapObject.HeapPrimitiveArray > Sequence of all primitive arrays in the heap dump. This sequence does not trigger any IO reads.","title":"primitiveArrays"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/","text":"// shark-graph / shark / HprofHeapGraph / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary openHeapGraph [jvm] fun File . openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph A facility for opening a CloseableHeapGraph from a File . This first parses the file headers with HprofHeader.parseHeaderOf, then indexes the file content with HprofIndex.indexRecordsOf and then opens a CloseableHeapGraph from the index, which you are responsible for closing after using. [jvm] fun DualSourceProvider. openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph Properties \u00b6 Name Summary INTERNAL_LRU_CACHE_SIZE [jvm] var INTERNAL_LRU_CACHE_SIZE : Int = 3000 This is not a public API, it\u2019s only public so that we can evaluate the effectiveness of different cache size in tests in a different module.","title":"Index"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/#functions","text":"Name Summary openHeapGraph [jvm] fun File . openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph A facility for opening a CloseableHeapGraph from a File . This first parses the file headers with HprofHeader.parseHeaderOf, then indexes the file content with HprofIndex.indexRecordsOf and then opens a CloseableHeapGraph from the index, which you are responsible for closing after using. [jvm] fun DualSourceProvider. openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph","title":"Functions"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/#properties","text":"Name Summary INTERNAL_LRU_CACHE_SIZE [jvm] var INTERNAL_LRU_CACHE_SIZE : Int = 3000 This is not a public API, it\u2019s only public so that we can evaluate the effectiveness of different cache size in tests in a different module.","title":"Properties"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/-i-n-t-e-r-n-a-l_-l-r-u_-c-a-c-h-e_-s-i-z-e/","text":"// shark-graph / shark / HprofHeapGraph / Companion / INTERNAL_LRU_CACHE_SIZE INTERNAL_LRU_CACHE_SIZE \u00b6 [jvm]\\ var INTERNAL_LRU_CACHE_SIZE : Int = 3000 This is not a public API, it\u2019s only public so that we can evaluate the effectiveness of different cache size in tests in a different module. LRU cache size of 3000 is a sweet spot to balance hits vs memory usage. This is based on running InstrumentationLeakDetectorTest a bunch of time on a Pixel 2 XL API 28. Hit count was ~120K, miss count ~290K","title":" i n t e r n a l  l r u  c a c h e  s i z e"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/-i-n-t-e-r-n-a-l_-l-r-u_-c-a-c-h-e_-s-i-z-e/#internal_lru_cache_size","text":"[jvm]\\ var INTERNAL_LRU_CACHE_SIZE : Int = 3000 This is not a public API, it\u2019s only public so that we can evaluate the effectiveness of different cache size in tests in a different module. LRU cache size of 3000 is a sweet spot to balance hits vs memory usage. This is based on running InstrumentationLeakDetectorTest a bunch of time on a Pixel 2 XL API 28. Hit count was ~120K, miss count ~290K","title":"INTERNAL_LRU_CACHE_SIZE"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/open-heap-graph/","text":"// shark-graph / shark / HprofHeapGraph / Companion / openHeapGraph openHeapGraph \u00b6 [jvm]\\ fun File . openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph A facility for opening a CloseableHeapGraph from a File . This first parses the file headers with HprofHeader.parseHeaderOf, then indexes the file content with HprofIndex.indexRecordsOf and then opens a CloseableHeapGraph from the index, which you are responsible for closing after using. [jvm]\\ fun DualSourceProvider. openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph","title":"Open heap graph"},{"location":"api/shark-graph/shark/-hprof-heap-graph/-companion/open-heap-graph/#openheapgraph","text":"[jvm]\\ fun File . openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph A facility for opening a CloseableHeapGraph from a File . This first parses the file headers with HprofHeader.parseHeaderOf, then indexes the file content with HprofIndex.indexRecordsOf and then opens a CloseableHeapGraph from the index, which you are responsible for closing after using. [jvm]\\ fun DualSourceProvider. openHeapGraph (proguardMapping: ProguardMapping? = null, indexedGcRootTypes: Set <HprofRecordTag> = HprofIndex.defaultIndexedGcRootTags()): CloseableHeapGraph","title":"openHeapGraph"},{"location":"api/shark-graph/shark/-hprof-index/","text":"// shark-graph / shark / HprofIndex HprofIndex \u00b6 [jvm]\\ class HprofIndex An index on a Hprof file. See openHeapGraph . Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary openHeapGraph [jvm] fun openHeapGraph (): CloseableHeapGraph Opens a CloseableHeapGraph which you can use to navigate the indexed hprof and then close.","title":"Index"},{"location":"api/shark-graph/shark/-hprof-index/#hprofindex","text":"[jvm]\\ class HprofIndex An index on a Hprof file. See openHeapGraph .","title":"HprofIndex"},{"location":"api/shark-graph/shark/-hprof-index/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-graph/shark/-hprof-index/#functions","text":"Name Summary openHeapGraph [jvm] fun openHeapGraph (): CloseableHeapGraph Opens a CloseableHeapGraph which you can use to navigate the indexed hprof and then close.","title":"Functions"},{"location":"api/shark-graph/shark/-hprof-index/open-heap-graph/","text":"// shark-graph / shark / HprofIndex / openHeapGraph openHeapGraph \u00b6 [jvm]\\ fun openHeapGraph (): CloseableHeapGraph Opens a CloseableHeapGraph which you can use to navigate the indexed hprof and then close.","title":"Open heap graph"},{"location":"api/shark-graph/shark/-hprof-index/open-heap-graph/#openheapgraph","text":"[jvm]\\ fun openHeapGraph (): CloseableHeapGraph Opens a CloseableHeapGraph which you can use to navigate the indexed hprof and then close.","title":"openHeapGraph"},{"location":"api/shark-graph/shark/-hprof-index/-companion/","text":"// shark-graph / shark / HprofIndex / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary defaultIndexedGcRootTags [jvm] fun defaultIndexedGcRootTags (): EnumSet <HprofRecordTag> indexRecordsOf [jvm] fun indexRecordsOf (hprofSourceProvider: DualSourceProvider, hprofHeader: HprofHeader, proguardMapping: ProguardMapping? = null, indexedGcRootTags: Set <HprofRecordTag> = defaultIndexedGcRootTags()): HprofIndex Creates an in memory index of an hprof source provided by hprofSourceProvider .","title":"Index"},{"location":"api/shark-graph/shark/-hprof-index/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-graph/shark/-hprof-index/-companion/#functions","text":"Name Summary defaultIndexedGcRootTags [jvm] fun defaultIndexedGcRootTags (): EnumSet <HprofRecordTag> indexRecordsOf [jvm] fun indexRecordsOf (hprofSourceProvider: DualSourceProvider, hprofHeader: HprofHeader, proguardMapping: ProguardMapping? = null, indexedGcRootTags: Set <HprofRecordTag> = defaultIndexedGcRootTags()): HprofIndex Creates an in memory index of an hprof source provided by hprofSourceProvider .","title":"Functions"},{"location":"api/shark-graph/shark/-hprof-index/-companion/default-indexed-gc-root-tags/","text":"// shark-graph / shark / HprofIndex / Companion / defaultIndexedGcRootTags defaultIndexedGcRootTags \u00b6 [jvm]\\ fun defaultIndexedGcRootTags (): EnumSet <HprofRecordTag>","title":"Default indexed gc root tags"},{"location":"api/shark-graph/shark/-hprof-index/-companion/default-indexed-gc-root-tags/#defaultindexedgcroottags","text":"[jvm]\\ fun defaultIndexedGcRootTags (): EnumSet <HprofRecordTag>","title":"defaultIndexedGcRootTags"},{"location":"api/shark-graph/shark/-hprof-index/-companion/index-records-of/","text":"// shark-graph / shark / HprofIndex / Companion / indexRecordsOf indexRecordsOf \u00b6 [jvm]\\ fun indexRecordsOf (hprofSourceProvider: DualSourceProvider, hprofHeader: HprofHeader, proguardMapping: ProguardMapping? = null, indexedGcRootTags: Set <HprofRecordTag> = defaultIndexedGcRootTags()): HprofIndex Creates an in memory index of an hprof source provided by hprofSourceProvider .","title":"Index records of"},{"location":"api/shark-graph/shark/-hprof-index/-companion/index-records-of/#indexrecordsof","text":"[jvm]\\ fun indexRecordsOf (hprofSourceProvider: DualSourceProvider, hprofHeader: HprofHeader, proguardMapping: ProguardMapping? = null, indexedGcRootTags: Set <HprofRecordTag> = defaultIndexedGcRootTags()): HprofIndex Creates an in memory index of an hprof source provided by hprofSourceProvider .","title":"indexRecordsOf"},{"location":"api/shark-hprof/shark/","text":"// shark-hprof / shark Package shark \u00b6 Types \u00b6 Name Summary ByteArraySourceProvider [jvm] class ByteArraySourceProvider (byteArray: ByteArray ) : DualSourceProvider ConstantMemoryMetricsDualSourceProvider [jvm] class ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider ) : DualSourceProvider Captures IO read metrics without using much memory. DualSourceProvider [jvm] interface DualSourceProvider : StreamingSourceProvider , RandomAccessSourceProvider Both a StreamingSourceProvider and a RandomAccessSourceProvider FileSourceProvider [jvm] class FileSourceProvider (file: File ) : DualSourceProvider GcRoot [jvm] sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. HprofDeobfuscator [jvm] class HprofDeobfuscator Converts a Hprof file to another file with deobfuscated class and field names. HprofHeader [jvm] data class HprofHeader (heapDumpTimestamp: Long , version: HprofVersion , identifierByteSize: Int ) Represents the header metadata of a Hprof file. HprofPrimitiveArrayStripper [jvm] class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. HprofRecord [jvm] sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. HprofRecordReader [jvm] class HprofRecordReader Reads hprof content from an Okio BufferedSource . HprofRecordTag [jvm] enum HprofRecordTag : Enum < HprofRecordTag > HprofVersion [jvm] enum HprofVersion : Enum < HprofVersion > Supported hprof versions HprofWriter [jvm] class HprofWriter : Closeable Generates Hprof files. OnHprofRecordListener [jvm] fun interface OnHprofRecordListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to StreamingHprofReader.readRecords . OnHprofRecordTagListener [jvm] fun interface OnHprofRecordTagListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecordTag found in the heap dump. PrimitiveType [jvm] enum PrimitiveType : Enum < PrimitiveType > A primitive type in the prof. ProguardMapping [jvm] class ProguardMapping ProguardMappingReader [jvm] class ProguardMappingReader (proguardMappingInputStream: InputStream ) RandomAccessHprofReader [jvm] class RandomAccessHprofReader : Closeable Reads records in a Hprof source, one at a time with a specific position and size. Call openReaderFor to obtain a new instance. RandomAccessSource [jvm] interface RandomAccessSource : Closeable RandomAccessSourceProvider [jvm] fun interface RandomAccessSourceProvider Can open RandomAccessSource instances. StreamingHprofReader [jvm] class StreamingHprofReader Reads the entire content of a Hprof source in one fell swoop. Call readerFor to obtain a new instance. StreamingRecordReaderAdapter [jvm] class StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader ) Wraps a StreamingHprofReader to provide a higher level API that streams HprofRecord instances. StreamingSourceProvider [jvm] fun interface StreamingSourceProvider Can open Source instances. ThrowingCancelableFileSourceProvider [jvm] class ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable ) : DualSourceProvider A DualSourceProvider that invokes throwIfCanceled before every read, allowing cancellation of IO based work built on top by throwing an exception. ValueHolder [jvm] sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Core: Hprof"},{"location":"api/shark-hprof/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-hprof/shark/#types","text":"Name Summary ByteArraySourceProvider [jvm] class ByteArraySourceProvider (byteArray: ByteArray ) : DualSourceProvider ConstantMemoryMetricsDualSourceProvider [jvm] class ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider ) : DualSourceProvider Captures IO read metrics without using much memory. DualSourceProvider [jvm] interface DualSourceProvider : StreamingSourceProvider , RandomAccessSourceProvider Both a StreamingSourceProvider and a RandomAccessSourceProvider FileSourceProvider [jvm] class FileSourceProvider (file: File ) : DualSourceProvider GcRoot [jvm] sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. HprofDeobfuscator [jvm] class HprofDeobfuscator Converts a Hprof file to another file with deobfuscated class and field names. HprofHeader [jvm] data class HprofHeader (heapDumpTimestamp: Long , version: HprofVersion , identifierByteSize: Int ) Represents the header metadata of a Hprof file. HprofPrimitiveArrayStripper [jvm] class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. HprofRecord [jvm] sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. HprofRecordReader [jvm] class HprofRecordReader Reads hprof content from an Okio BufferedSource . HprofRecordTag [jvm] enum HprofRecordTag : Enum < HprofRecordTag > HprofVersion [jvm] enum HprofVersion : Enum < HprofVersion > Supported hprof versions HprofWriter [jvm] class HprofWriter : Closeable Generates Hprof files. OnHprofRecordListener [jvm] fun interface OnHprofRecordListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to StreamingHprofReader.readRecords . OnHprofRecordTagListener [jvm] fun interface OnHprofRecordTagListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecordTag found in the heap dump. PrimitiveType [jvm] enum PrimitiveType : Enum < PrimitiveType > A primitive type in the prof. ProguardMapping [jvm] class ProguardMapping ProguardMappingReader [jvm] class ProguardMappingReader (proguardMappingInputStream: InputStream ) RandomAccessHprofReader [jvm] class RandomAccessHprofReader : Closeable Reads records in a Hprof source, one at a time with a specific position and size. Call openReaderFor to obtain a new instance. RandomAccessSource [jvm] interface RandomAccessSource : Closeable RandomAccessSourceProvider [jvm] fun interface RandomAccessSourceProvider Can open RandomAccessSource instances. StreamingHprofReader [jvm] class StreamingHprofReader Reads the entire content of a Hprof source in one fell swoop. Call readerFor to obtain a new instance. StreamingRecordReaderAdapter [jvm] class StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader ) Wraps a StreamingHprofReader to provide a higher level API that streams HprofRecord instances. StreamingSourceProvider [jvm] fun interface StreamingSourceProvider Can open Source instances. ThrowingCancelableFileSourceProvider [jvm] class ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable ) : DualSourceProvider A DualSourceProvider that invokes throwIfCanceled before every read, allowing cancellation of IO based work built on top by throwing an exception. ValueHolder [jvm] sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"Types"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/","text":"// shark-hprof / shark / ByteArraySourceProvider ByteArraySourceProvider \u00b6 [jvm]\\ class ByteArraySourceProvider (byteArray: ByteArray ) : DualSourceProvider Functions \u00b6 Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource","title":"Index"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/#bytearraysourceprovider","text":"[jvm]\\ class ByteArraySourceProvider (byteArray: ByteArray ) : DualSourceProvider","title":"ByteArraySourceProvider"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/#functions","text":"Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource","title":"Functions"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/-byte-array-source-provider/","text":"// shark-hprof / shark / ByteArraySourceProvider / ByteArraySourceProvider ByteArraySourceProvider \u00b6 [jvm]\\ fun ByteArraySourceProvider (byteArray: ByteArray )","title":" byte array source provider"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/-byte-array-source-provider/#bytearraysourceprovider","text":"[jvm]\\ fun ByteArraySourceProvider (byteArray: ByteArray )","title":"ByteArraySourceProvider"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/open-random-access-source/","text":"// shark-hprof / shark / ByteArraySourceProvider / openRandomAccessSource openRandomAccessSource \u00b6 [jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"Open random access source"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/open-random-access-source/#openrandomaccesssource","text":"[jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"openRandomAccessSource"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/open-streaming-source/","text":"// shark-hprof / shark / ByteArraySourceProvider / openStreamingSource openStreamingSource \u00b6 [jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"Open streaming source"},{"location":"api/shark-hprof/shark/-byte-array-source-provider/open-streaming-source/#openstreamingsource","text":"[jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"openStreamingSource"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider ConstantMemoryMetricsDualSourceProvider \u00b6 [jvm]\\ class ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider ) : DualSourceProvider Captures IO read metrics without using much memory. Constructors \u00b6 ConstantMemoryMetricsDualSourceProvider [jvm] fun ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider ) Functions \u00b6 Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource Properties \u00b6 Name Summary byteTravelRange [jvm] val byteTravelRange : Long randomAccessByteReads [jvm] var randomAccessByteReads : Long = 0 randomAccessByteTravel [jvm] var randomAccessByteTravel : Long = 0 randomAccessReadCount [jvm] var randomAccessReadCount : Long = 0","title":"Index"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/#constantmemorymetricsdualsourceprovider","text":"[jvm]\\ class ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider ) : DualSourceProvider Captures IO read metrics without using much memory.","title":"ConstantMemoryMetricsDualSourceProvider"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/#constructors","text":"ConstantMemoryMetricsDualSourceProvider [jvm] fun ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider )","title":"Constructors"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/#functions","text":"Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource","title":"Functions"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/#properties","text":"Name Summary byteTravelRange [jvm] val byteTravelRange : Long randomAccessByteReads [jvm] var randomAccessByteReads : Long = 0 randomAccessByteTravel [jvm] var randomAccessByteTravel : Long = 0 randomAccessReadCount [jvm] var randomAccessReadCount : Long = 0","title":"Properties"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/-constant-memory-metrics-dual-source-provider/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider / ConstantMemoryMetricsDualSourceProvider ConstantMemoryMetricsDualSourceProvider \u00b6 [jvm]\\ fun ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider )","title":" constant memory metrics dual source provider"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/-constant-memory-metrics-dual-source-provider/#constantmemorymetricsdualsourceprovider","text":"[jvm]\\ fun ConstantMemoryMetricsDualSourceProvider (realSourceProvider: DualSourceProvider )","title":"ConstantMemoryMetricsDualSourceProvider"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/byte-travel-range/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider / byteTravelRange byteTravelRange \u00b6 [jvm]\\ val byteTravelRange : Long","title":"Byte travel range"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/byte-travel-range/#bytetravelrange","text":"[jvm]\\ val byteTravelRange : Long","title":"byteTravelRange"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/open-random-access-source/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider / openRandomAccessSource openRandomAccessSource \u00b6 [jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"Open random access source"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/open-random-access-source/#openrandomaccesssource","text":"[jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"openRandomAccessSource"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/open-streaming-source/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider / openStreamingSource openStreamingSource \u00b6 [jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"Open streaming source"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/open-streaming-source/#openstreamingsource","text":"[jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"openStreamingSource"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/random-access-byte-reads/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider / randomAccessByteReads randomAccessByteReads \u00b6 [jvm]\\ var randomAccessByteReads : Long = 0","title":"Random access byte reads"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/random-access-byte-reads/#randomaccessbytereads","text":"[jvm]\\ var randomAccessByteReads : Long = 0","title":"randomAccessByteReads"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/random-access-byte-travel/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider / randomAccessByteTravel randomAccessByteTravel \u00b6 [jvm]\\ var randomAccessByteTravel : Long = 0","title":"Random access byte travel"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/random-access-byte-travel/#randomaccessbytetravel","text":"[jvm]\\ var randomAccessByteTravel : Long = 0","title":"randomAccessByteTravel"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/random-access-read-count/","text":"// shark-hprof / shark / ConstantMemoryMetricsDualSourceProvider / randomAccessReadCount randomAccessReadCount \u00b6 [jvm]\\ var randomAccessReadCount : Long = 0","title":"Random access read count"},{"location":"api/shark-hprof/shark/-constant-memory-metrics-dual-source-provider/random-access-read-count/#randomaccessreadcount","text":"[jvm]\\ var randomAccessReadCount : Long = 0","title":"randomAccessReadCount"},{"location":"api/shark-hprof/shark/-dual-source-provider/","text":"// shark-hprof / shark / DualSourceProvider DualSourceProvider \u00b6 [jvm]\\ interface DualSourceProvider : StreamingSourceProvider , RandomAccessSourceProvider Both a StreamingSourceProvider and a RandomAccessSourceProvider Functions \u00b6 Name Summary openRandomAccessSource [jvm] abstract fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] abstract fun openStreamingSource (): BufferedSource Inheritors \u00b6 Name ByteArraySourceProvider ConstantMemoryMetricsDualSourceProvider FileSourceProvider ThrowingCancelableFileSourceProvider","title":"Index"},{"location":"api/shark-hprof/shark/-dual-source-provider/#dualsourceprovider","text":"[jvm]\\ interface DualSourceProvider : StreamingSourceProvider , RandomAccessSourceProvider Both a StreamingSourceProvider and a RandomAccessSourceProvider","title":"DualSourceProvider"},{"location":"api/shark-hprof/shark/-dual-source-provider/#functions","text":"Name Summary openRandomAccessSource [jvm] abstract fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] abstract fun openStreamingSource (): BufferedSource","title":"Functions"},{"location":"api/shark-hprof/shark/-dual-source-provider/#inheritors","text":"Name ByteArraySourceProvider ConstantMemoryMetricsDualSourceProvider FileSourceProvider ThrowingCancelableFileSourceProvider","title":"Inheritors"},{"location":"api/shark-hprof/shark/-file-source-provider/","text":"// shark-hprof / shark / FileSourceProvider FileSourceProvider \u00b6 [jvm]\\ class FileSourceProvider (file: File ) : DualSourceProvider Functions \u00b6 Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource","title":"Index"},{"location":"api/shark-hprof/shark/-file-source-provider/#filesourceprovider","text":"[jvm]\\ class FileSourceProvider (file: File ) : DualSourceProvider","title":"FileSourceProvider"},{"location":"api/shark-hprof/shark/-file-source-provider/#functions","text":"Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource","title":"Functions"},{"location":"api/shark-hprof/shark/-file-source-provider/-file-source-provider/","text":"// shark-hprof / shark / FileSourceProvider / FileSourceProvider FileSourceProvider \u00b6 [jvm]\\ fun FileSourceProvider (file: File )","title":" file source provider"},{"location":"api/shark-hprof/shark/-file-source-provider/-file-source-provider/#filesourceprovider","text":"[jvm]\\ fun FileSourceProvider (file: File )","title":"FileSourceProvider"},{"location":"api/shark-hprof/shark/-file-source-provider/open-random-access-source/","text":"// shark-hprof / shark / FileSourceProvider / openRandomAccessSource openRandomAccessSource \u00b6 [jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"Open random access source"},{"location":"api/shark-hprof/shark/-file-source-provider/open-random-access-source/#openrandomaccesssource","text":"[jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"openRandomAccessSource"},{"location":"api/shark-hprof/shark/-file-source-provider/open-streaming-source/","text":"// shark-hprof / shark / FileSourceProvider / openStreamingSource openStreamingSource \u00b6 [jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"Open streaming source"},{"location":"api/shark-hprof/shark/-file-source-provider/open-streaming-source/#openstreamingsource","text":"[jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"openStreamingSource"},{"location":"api/shark-hprof/shark/-gc-root/","text":"// shark-hprof / shark / GcRoot GcRoot \u00b6 [jvm]\\ sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump. Types \u00b6 Name Summary Debugger [jvm] class Debugger (id: Long ) : GcRoot An object held by a connected debugger Finalizing [jvm] class Finalizing (id: Long ) : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString [jvm] class InternedString (id: Long ) : GcRoot An interned string, see java.lang.String.intern . JavaFrame [jvm] class JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A java local variable JniGlobal [jvm] class JniGlobal (id: Long , jniGlobalRefId: Long ) : GcRoot A global variable in native code. JniLocal [jvm] class JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A local variable in native code. JniMonitor [jvm] class JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) : GcRoot It\u2019s unclear what this is, documentation welcome. MonitorUsed [jvm] class MonitorUsed (id: Long ) : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack [jvm] class NativeStack (id: Long , threadSerialNumber: Int ) : GcRoot Input or output parameters in native code ReferenceCleanup [jvm] class ReferenceCleanup (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome. StickyClass [jvm] class StickyClass (id: Long ) : GcRoot A system class ThreadBlock [jvm] class ThreadBlock (id: Long , threadSerialNumber: Int ) : GcRoot ThreadObject [jvm] class ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) : GcRoot A thread. Unknown [jvm] class Unknown (id: Long ) : GcRoot An unknown gc root. Unreachable [jvm] class Unreachable (id: Long ) : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal [jvm] class VmInternal (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome. Properties \u00b6 Name Summary id [jvm] abstract val id : Long The object id of the object that this gc root references. Inheritors \u00b6 Name Unknown JniGlobal JniLocal JavaFrame NativeStack StickyClass ThreadBlock MonitorUsed ThreadObject ReferenceCleanup VmInternal JniMonitor InternedString Finalizing Debugger Unreachable","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/#gcroot","text":"[jvm]\\ sealed class GcRoot A GcRoot as identified by HprofRecord.HeapDumpRecord.GcRootRecord in the heap dump.","title":"GcRoot"},{"location":"api/shark-hprof/shark/-gc-root/#types","text":"Name Summary Debugger [jvm] class Debugger (id: Long ) : GcRoot An object held by a connected debugger Finalizing [jvm] class Finalizing (id: Long ) : GcRoot An object that is in a queue, waiting for a finalizer to run. InternedString [jvm] class InternedString (id: Long ) : GcRoot An interned string, see java.lang.String.intern . JavaFrame [jvm] class JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A java local variable JniGlobal [jvm] class JniGlobal (id: Long , jniGlobalRefId: Long ) : GcRoot A global variable in native code. JniLocal [jvm] class JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A local variable in native code. JniMonitor [jvm] class JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) : GcRoot It\u2019s unclear what this is, documentation welcome. MonitorUsed [jvm] class MonitorUsed (id: Long ) : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. NativeStack [jvm] class NativeStack (id: Long , threadSerialNumber: Int ) : GcRoot Input or output parameters in native code ReferenceCleanup [jvm] class ReferenceCleanup (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome. StickyClass [jvm] class StickyClass (id: Long ) : GcRoot A system class ThreadBlock [jvm] class ThreadBlock (id: Long , threadSerialNumber: Int ) : GcRoot ThreadObject [jvm] class ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) : GcRoot A thread. Unknown [jvm] class Unknown (id: Long ) : GcRoot An unknown gc root. Unreachable [jvm] class Unreachable (id: Long ) : GcRoot An object that is unreachable from any other root, but not a root itself. VmInternal [jvm] class VmInternal (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"Types"},{"location":"api/shark-hprof/shark/-gc-root/#properties","text":"Name Summary id [jvm] abstract val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/#inheritors","text":"Name Unknown JniGlobal JniLocal JavaFrame NativeStack StickyClass ThreadBlock MonitorUsed ThreadObject ReferenceCleanup VmInternal JniMonitor InternedString Finalizing Debugger Unreachable","title":"Inheritors"},{"location":"api/shark-hprof/shark/-gc-root/id/","text":"// shark-hprof / shark / GcRoot / id id \u00b6 [jvm]\\ abstract val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/id/#id","text":"[jvm]\\ abstract val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/","text":"// shark-hprof / shark / GcRoot / Debugger Debugger \u00b6 [jvm]\\ class Debugger (id: Long ) : GcRoot An object held by a connected debugger Constructors \u00b6 Debugger [jvm] fun Debugger (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#debugger","text":"[jvm]\\ class Debugger (id: Long ) : GcRoot An object held by a connected debugger","title":"Debugger"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#constructors","text":"Debugger [jvm] fun Debugger (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/-debugger/","text":"// shark-hprof / shark / GcRoot / Debugger / Debugger Debugger \u00b6 [jvm]\\ fun Debugger (id: Long )","title":" debugger"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/-debugger/#debugger","text":"[jvm]\\ fun Debugger (id: Long )","title":"Debugger"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/id/","text":"// shark-hprof / shark / GcRoot / Debugger / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-debugger/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/","text":"// shark-hprof / shark / GcRoot / Finalizing Finalizing \u00b6 [jvm]\\ class Finalizing (id: Long ) : GcRoot An object that is in a queue, waiting for a finalizer to run. Constructors \u00b6 Finalizing [jvm] fun Finalizing (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#finalizing","text":"[jvm]\\ class Finalizing (id: Long ) : GcRoot An object that is in a queue, waiting for a finalizer to run.","title":"Finalizing"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#constructors","text":"Finalizing [jvm] fun Finalizing (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/-finalizing/","text":"// shark-hprof / shark / GcRoot / Finalizing / Finalizing Finalizing \u00b6 [jvm]\\ fun Finalizing (id: Long )","title":" finalizing"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/-finalizing/#finalizing","text":"[jvm]\\ fun Finalizing (id: Long )","title":"Finalizing"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/id/","text":"// shark-hprof / shark / GcRoot / Finalizing / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-finalizing/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/","text":"// shark-hprof / shark / GcRoot / InternedString InternedString \u00b6 [jvm]\\ class InternedString (id: Long ) : GcRoot An interned string, see java.lang.String.intern . Constructors \u00b6 InternedString [jvm] fun InternedString (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#internedstring","text":"[jvm]\\ class InternedString (id: Long ) : GcRoot An interned string, see java.lang.String.intern .","title":"InternedString"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#constructors","text":"InternedString [jvm] fun InternedString (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/-interned-string/","text":"// shark-hprof / shark / GcRoot / InternedString / InternedString InternedString \u00b6 [jvm]\\ fun InternedString (id: Long )","title":" interned string"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/-interned-string/#internedstring","text":"[jvm]\\ fun InternedString (id: Long )","title":"InternedString"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/id/","text":"// shark-hprof / shark / GcRoot / InternedString / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-interned-string/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/","text":"// shark-hprof / shark / GcRoot / JavaFrame JavaFrame \u00b6 [jvm]\\ class JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A java local variable Constructors \u00b6 JavaFrame [jvm] fun JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int ) Properties \u00b6 Name Summary frameNumber [jvm] val frameNumber : Int frame number in stack trace (-1 for empty) id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#javaframe","text":"[jvm]\\ class JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A java local variable","title":"JavaFrame"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#constructors","text":"JavaFrame [jvm] fun JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/#properties","text":"Name Summary frameNumber [jvm] val frameNumber : Int frame number in stack trace (-1 for empty) id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/-java-frame/","text":"// shark-hprof / shark / GcRoot / JavaFrame / JavaFrame JavaFrame \u00b6 [jvm]\\ fun JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int )","title":" java frame"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/-java-frame/#javaframe","text":"[jvm]\\ fun JavaFrame (id: Long , threadSerialNumber: Int , frameNumber: Int )","title":"JavaFrame"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/frame-number/","text":"// shark-hprof / shark / GcRoot / JavaFrame / frameNumber frameNumber \u00b6 [jvm]\\ val frameNumber : Int frame number in stack trace (-1 for empty)","title":"Frame number"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/frame-number/#framenumber","text":"[jvm]\\ val frameNumber : Int frame number in stack trace (-1 for empty)","title":"frameNumber"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/id/","text":"// shark-hprof / shark / GcRoot / JavaFrame / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number/","text":"// shark-hprof / shark / GcRoot / JavaFrame / threadSerialNumber threadSerialNumber \u00b6 [jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-java-frame/thread-serial-number/#threadserialnumber","text":"[jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/","text":"// shark-hprof / shark / GcRoot / JniGlobal JniGlobal \u00b6 [jvm]\\ class JniGlobal (id: Long , jniGlobalRefId: Long ) : GcRoot A global variable in native code. Constructors \u00b6 JniGlobal [jvm] fun JniGlobal (id: Long , jniGlobalRefId: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. jniGlobalRefId [jvm] val jniGlobalRefId : Long","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#jniglobal","text":"[jvm]\\ class JniGlobal (id: Long , jniGlobalRefId: Long ) : GcRoot A global variable in native code.","title":"JniGlobal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#constructors","text":"JniGlobal [jvm] fun JniGlobal (id: Long , jniGlobalRefId: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. jniGlobalRefId [jvm] val jniGlobalRefId : Long","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/-jni-global/","text":"// shark-hprof / shark / GcRoot / JniGlobal / JniGlobal JniGlobal \u00b6 [jvm]\\ fun JniGlobal (id: Long , jniGlobalRefId: Long )","title":" jni global"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/-jni-global/#jniglobal","text":"[jvm]\\ fun JniGlobal (id: Long , jniGlobalRefId: Long )","title":"JniGlobal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/id/","text":"// shark-hprof / shark / GcRoot / JniGlobal / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id/","text":"// shark-hprof / shark / GcRoot / JniGlobal / jniGlobalRefId jniGlobalRefId \u00b6 [jvm]\\ val jniGlobalRefId : Long","title":"Jni global ref id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-global/jni-global-ref-id/#jniglobalrefid","text":"[jvm]\\ val jniGlobalRefId : Long","title":"jniGlobalRefId"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/","text":"// shark-hprof / shark / GcRoot / JniLocal JniLocal \u00b6 [jvm]\\ class JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A local variable in native code. Constructors \u00b6 JniLocal [jvm] fun JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int ) Properties \u00b6 Name Summary frameNumber [jvm] val frameNumber : Int frame number in stack trace (-1 for empty) id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#jnilocal","text":"[jvm]\\ class JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int ) : GcRoot A local variable in native code.","title":"JniLocal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#constructors","text":"JniLocal [jvm] fun JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/#properties","text":"Name Summary frameNumber [jvm] val frameNumber : Int frame number in stack trace (-1 for empty) id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/-jni-local/","text":"// shark-hprof / shark / GcRoot / JniLocal / JniLocal JniLocal \u00b6 [jvm]\\ fun JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int )","title":" jni local"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/-jni-local/#jnilocal","text":"[jvm]\\ fun JniLocal (id: Long , threadSerialNumber: Int , frameNumber: Int )","title":"JniLocal"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/frame-number/","text":"// shark-hprof / shark / GcRoot / JniLocal / frameNumber frameNumber \u00b6 [jvm]\\ val frameNumber : Int frame number in stack trace (-1 for empty)","title":"Frame number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/frame-number/#framenumber","text":"[jvm]\\ val frameNumber : Int frame number in stack trace (-1 for empty)","title":"frameNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/id/","text":"// shark-hprof / shark / GcRoot / JniLocal / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number/","text":"// shark-hprof / shark / GcRoot / JniLocal / threadSerialNumber threadSerialNumber \u00b6 [jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-local/thread-serial-number/#threadserialnumber","text":"[jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/","text":"// shark-hprof / shark / GcRoot / JniMonitor JniMonitor \u00b6 [jvm]\\ class JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) : GcRoot It\u2019s unclear what this is, documentation welcome. Constructors \u00b6 JniMonitor [jvm] fun JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. stackDepth [jvm] val stackDepth : Int stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#jnimonitor","text":"[jvm]\\ class JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int ) : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"JniMonitor"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#constructors","text":"JniMonitor [jvm] fun JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. stackDepth [jvm] val stackDepth : Int stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/-jni-monitor/","text":"// shark-hprof / shark / GcRoot / JniMonitor / JniMonitor JniMonitor \u00b6 [jvm]\\ fun JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int )","title":" jni monitor"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/-jni-monitor/#jnimonitor","text":"[jvm]\\ fun JniMonitor (id: Long , stackTraceSerialNumber: Int , stackDepth: Int )","title":"JniMonitor"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/id/","text":"// shark-hprof / shark / GcRoot / JniMonitor / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth/","text":"// shark-hprof / shark / GcRoot / JniMonitor / stackDepth stackDepth \u00b6 [jvm]\\ val stackDepth : Int","title":"Stack depth"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-depth/#stackdepth","text":"[jvm]\\ val stackDepth : Int","title":"stackDepth"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number/","text":"// shark-hprof / shark / GcRoot / JniMonitor / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-gc-root/-jni-monitor/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/","text":"// shark-hprof / shark / GcRoot / MonitorUsed MonitorUsed \u00b6 [jvm]\\ class MonitorUsed (id: Long ) : GcRoot Everything that called the wait() or notify() methods, or that is synchronized. Constructors \u00b6 MonitorUsed [jvm] fun MonitorUsed (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#monitorused","text":"[jvm]\\ class MonitorUsed (id: Long ) : GcRoot Everything that called the wait() or notify() methods, or that is synchronized.","title":"MonitorUsed"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#constructors","text":"MonitorUsed [jvm] fun MonitorUsed (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/-monitor-used/","text":"// shark-hprof / shark / GcRoot / MonitorUsed / MonitorUsed MonitorUsed \u00b6 [jvm]\\ fun MonitorUsed (id: Long )","title":" monitor used"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/-monitor-used/#monitorused","text":"[jvm]\\ fun MonitorUsed (id: Long )","title":"MonitorUsed"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/id/","text":"// shark-hprof / shark / GcRoot / MonitorUsed / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-monitor-used/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/","text":"// shark-hprof / shark / GcRoot / NativeStack NativeStack \u00b6 [jvm]\\ class NativeStack (id: Long , threadSerialNumber: Int ) : GcRoot Input or output parameters in native code Constructors \u00b6 NativeStack [jvm] fun NativeStack (id: Long , threadSerialNumber: Int ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#nativestack","text":"[jvm]\\ class NativeStack (id: Long , threadSerialNumber: Int ) : GcRoot Input or output parameters in native code","title":"NativeStack"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#constructors","text":"NativeStack [jvm] fun NativeStack (id: Long , threadSerialNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/-native-stack/","text":"// shark-hprof / shark / GcRoot / NativeStack / NativeStack NativeStack \u00b6 [jvm]\\ fun NativeStack (id: Long , threadSerialNumber: Int )","title":" native stack"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/-native-stack/#nativestack","text":"[jvm]\\ fun NativeStack (id: Long , threadSerialNumber: Int )","title":"NativeStack"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/id/","text":"// shark-hprof / shark / GcRoot / NativeStack / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number/","text":"// shark-hprof / shark / GcRoot / NativeStack / threadSerialNumber threadSerialNumber \u00b6 [jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-native-stack/thread-serial-number/#threadserialnumber","text":"[jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber Note: the corresponding thread is sometimes not found, see: https://issuetracker.google.com/issues/122713143","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/","text":"// shark-hprof / shark / GcRoot / ReferenceCleanup ReferenceCleanup \u00b6 [jvm]\\ class ReferenceCleanup (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome. Constructors \u00b6 ReferenceCleanup [jvm] fun ReferenceCleanup (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#referencecleanup","text":"[jvm]\\ class ReferenceCleanup (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"ReferenceCleanup"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#constructors","text":"ReferenceCleanup [jvm] fun ReferenceCleanup (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/-reference-cleanup/","text":"// shark-hprof / shark / GcRoot / ReferenceCleanup / ReferenceCleanup ReferenceCleanup \u00b6 [jvm]\\ fun ReferenceCleanup (id: Long )","title":" reference cleanup"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/-reference-cleanup/#referencecleanup","text":"[jvm]\\ fun ReferenceCleanup (id: Long )","title":"ReferenceCleanup"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/id/","text":"// shark-hprof / shark / GcRoot / ReferenceCleanup / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-reference-cleanup/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/","text":"// shark-hprof / shark / GcRoot / StickyClass StickyClass \u00b6 [jvm]\\ class StickyClass (id: Long ) : GcRoot A system class Constructors \u00b6 StickyClass [jvm] fun StickyClass (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#stickyclass","text":"[jvm]\\ class StickyClass (id: Long ) : GcRoot A system class","title":"StickyClass"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#constructors","text":"StickyClass [jvm] fun StickyClass (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/-sticky-class/","text":"// shark-hprof / shark / GcRoot / StickyClass / StickyClass StickyClass \u00b6 [jvm]\\ fun StickyClass (id: Long )","title":" sticky class"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/-sticky-class/#stickyclass","text":"[jvm]\\ fun StickyClass (id: Long )","title":"StickyClass"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/id/","text":"// shark-hprof / shark / GcRoot / StickyClass / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-sticky-class/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/","text":"// shark-hprof / shark / GcRoot / ThreadBlock ThreadBlock \u00b6 [jvm]\\ class ThreadBlock (id: Long , threadSerialNumber: Int ) : GcRoot Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#threadblock","text":"[jvm]\\ class ThreadBlock (id: Long , threadSerialNumber: Int ) : GcRoot","title":"ThreadBlock"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. threadSerialNumber [jvm] val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/-thread-block/","text":"// shark-hprof / shark / GcRoot / ThreadBlock / ThreadBlock ThreadBlock \u00b6 [jvm]\\ fun ThreadBlock (id: Long , threadSerialNumber: Int )","title":" thread block"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/-thread-block/#threadblock","text":"[jvm]\\ fun ThreadBlock (id: Long , threadSerialNumber: Int )","title":"ThreadBlock"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/id/","text":"// shark-hprof / shark / GcRoot / ThreadBlock / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number/","text":"// shark-hprof / shark / GcRoot / ThreadBlock / threadSerialNumber threadSerialNumber \u00b6 [jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-block/thread-serial-number/#threadserialnumber","text":"[jvm]\\ val threadSerialNumber : Int Corresponds to ThreadObject.threadSerialNumber","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/","text":"// shark-hprof / shark / GcRoot / ThreadObject ThreadObject \u00b6 [jvm]\\ class ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) : GcRoot A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c Constructors \u00b6 ThreadObject [jvm] fun ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int threadSerialNumber [jvm] val threadSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#threadobject","text":"[jvm]\\ class ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int ) : GcRoot A thread. Added at https://android.googlesource.com/platform/tools/base/+/c0f0d528c155cab32e372dac77370569a386245c","title":"ThreadObject"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#constructors","text":"ThreadObject [jvm] fun ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references. stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int threadSerialNumber [jvm] val threadSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/-thread-object/","text":"// shark-hprof / shark / GcRoot / ThreadObject / ThreadObject ThreadObject \u00b6 [jvm]\\ fun ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int )","title":" thread object"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/-thread-object/#threadobject","text":"[jvm]\\ fun ThreadObject (id: Long , threadSerialNumber: Int , stackTraceSerialNumber: Int )","title":"ThreadObject"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/id/","text":"// shark-hprof / shark / GcRoot / ThreadObject / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number/","text":"// shark-hprof / shark / GcRoot / ThreadObject / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number/","text":"// shark-hprof / shark / GcRoot / ThreadObject / threadSerialNumber threadSerialNumber \u00b6 [jvm]\\ val threadSerialNumber : Int","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-gc-root/-thread-object/thread-serial-number/#threadserialnumber","text":"[jvm]\\ val threadSerialNumber : Int","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/","text":"// shark-hprof / shark / GcRoot / Unknown Unknown \u00b6 [jvm]\\ class Unknown (id: Long ) : GcRoot An unknown gc root. Constructors \u00b6 Unknown [jvm] fun Unknown (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#unknown","text":"[jvm]\\ class Unknown (id: Long ) : GcRoot An unknown gc root.","title":"Unknown"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#constructors","text":"Unknown [jvm] fun Unknown (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/-unknown/","text":"// shark-hprof / shark / GcRoot / Unknown / Unknown Unknown \u00b6 [jvm]\\ fun Unknown (id: Long )","title":" unknown"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/-unknown/#unknown","text":"[jvm]\\ fun Unknown (id: Long )","title":"Unknown"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/id/","text":"// shark-hprof / shark / GcRoot / Unknown / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-unknown/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/","text":"// shark-hprof / shark / GcRoot / Unreachable Unreachable \u00b6 [jvm]\\ class Unreachable (id: Long ) : GcRoot An object that is unreachable from any other root, but not a root itself. Constructors \u00b6 Unreachable [jvm] fun Unreachable (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#unreachable","text":"[jvm]\\ class Unreachable (id: Long ) : GcRoot An object that is unreachable from any other root, but not a root itself.","title":"Unreachable"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#constructors","text":"Unreachable [jvm] fun Unreachable (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/-unreachable/","text":"// shark-hprof / shark / GcRoot / Unreachable / Unreachable Unreachable \u00b6 [jvm]\\ fun Unreachable (id: Long )","title":" unreachable"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/-unreachable/#unreachable","text":"[jvm]\\ fun Unreachable (id: Long )","title":"Unreachable"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/id/","text":"// shark-hprof / shark / GcRoot / Unreachable / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-unreachable/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/","text":"// shark-hprof / shark / GcRoot / VmInternal VmInternal \u00b6 [jvm]\\ class VmInternal (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome. Constructors \u00b6 VmInternal [jvm] fun VmInternal (id: Long ) Properties \u00b6 Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Index"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#vminternal","text":"[jvm]\\ class VmInternal (id: Long ) : GcRoot It\u2019s unclear what this is, documentation welcome.","title":"VmInternal"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#constructors","text":"VmInternal [jvm] fun VmInternal (id: Long )","title":"Constructors"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/#properties","text":"Name Summary id [jvm] open override val id : Long The object id of the object that this gc root references.","title":"Properties"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/-vm-internal/","text":"// shark-hprof / shark / GcRoot / VmInternal / VmInternal VmInternal \u00b6 [jvm]\\ fun VmInternal (id: Long )","title":" vm internal"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/-vm-internal/#vminternal","text":"[jvm]\\ fun VmInternal (id: Long )","title":"VmInternal"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/id/","text":"// shark-hprof / shark / GcRoot / VmInternal / id id \u00b6 [jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"Id"},{"location":"api/shark-hprof/shark/-gc-root/-vm-internal/id/#id","text":"[jvm]\\ open override val id : Long The object id of the object that this gc root references.","title":"id"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/","text":"// shark-hprof / shark / HprofDeobfuscator HprofDeobfuscator \u00b6 [jvm]\\ class HprofDeobfuscator Converts a Hprof file to another file with deobfuscated class and field names. Constructors \u00b6 HprofDeobfuscator [jvm] fun HprofDeobfuscator () Functions \u00b6 Name Summary deobfuscate [jvm] fun deobfuscate (proguardMapping: ProguardMapping , inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-deobfuscated.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-deobfuscated\u201d })): File","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/#hprofdeobfuscator","text":"[jvm]\\ class HprofDeobfuscator Converts a Hprof file to another file with deobfuscated class and field names.","title":"HprofDeobfuscator"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/#constructors","text":"HprofDeobfuscator [jvm] fun HprofDeobfuscator ()","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/#functions","text":"Name Summary deobfuscate [jvm] fun deobfuscate (proguardMapping: ProguardMapping , inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-deobfuscated.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-deobfuscated\u201d })): File","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/-hprof-deobfuscator/","text":"// shark-hprof / shark / HprofDeobfuscator / HprofDeobfuscator HprofDeobfuscator \u00b6 [jvm]\\ fun HprofDeobfuscator ()","title":" hprof deobfuscator"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/-hprof-deobfuscator/#hprofdeobfuscator","text":"[jvm]\\ fun HprofDeobfuscator ()","title":"HprofDeobfuscator"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/deobfuscate/","text":"// shark-hprof / shark / HprofDeobfuscator / deobfuscate deobfuscate \u00b6 [jvm]\\ fun deobfuscate (proguardMapping: ProguardMapping , inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-deobfuscated.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-deobfuscated\u201d })): File See also \u00b6 jvm shark.HprofDeobfuscator","title":"Deobfuscate"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/deobfuscate/#deobfuscate","text":"[jvm]\\ fun deobfuscate (proguardMapping: ProguardMapping , inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-deobfuscated.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-deobfuscated\u201d })): File","title":"deobfuscate"},{"location":"api/shark-hprof/shark/-hprof-deobfuscator/deobfuscate/#see-also","text":"jvm shark.HprofDeobfuscator","title":"See also"},{"location":"api/shark-hprof/shark/-hprof-header/","text":"// shark-hprof / shark / HprofHeader HprofHeader \u00b6 [jvm]\\ data class HprofHeader (heapDumpTimestamp: Long , version: HprofVersion , identifierByteSize: Int ) Represents the header metadata of a Hprof file. Constructors \u00b6 HprofHeader [jvm] fun HprofHeader (heapDumpTimestamp: Long = System.currentTimeMillis(), version: HprofVersion = HprofVersion.ANDROID, identifierByteSize: Int = 4) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary heapDumpTimestamp [jvm] val heapDumpTimestamp : Long Unix timestamp at which the heap was dumped. identifierByteSize [jvm] val identifierByteSize : Int = 4 Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be. recordsPosition [jvm] val recordsPosition : Int How many bytes from the beginning of the file can we find the hprof records at. Version string, 0 delimiter (1 byte), identifier byte size int (4 bytes) ,timestamp long (8 bytes) version [jvm] val version : HprofVersion Hprof version, which is tied to the runtime where the heap was dumped.","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-header/#hprofheader","text":"[jvm]\\ data class HprofHeader (heapDumpTimestamp: Long , version: HprofVersion , identifierByteSize: Int ) Represents the header metadata of a Hprof file.","title":"HprofHeader"},{"location":"api/shark-hprof/shark/-hprof-header/#constructors","text":"HprofHeader [jvm] fun HprofHeader (heapDumpTimestamp: Long = System.currentTimeMillis(), version: HprofVersion = HprofVersion.ANDROID, identifierByteSize: Int = 4)","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-header/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-header/#properties","text":"Name Summary heapDumpTimestamp [jvm] val heapDumpTimestamp : Long Unix timestamp at which the heap was dumped. identifierByteSize [jvm] val identifierByteSize : Int = 4 Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be. recordsPosition [jvm] val recordsPosition : Int How many bytes from the beginning of the file can we find the hprof records at. Version string, 0 delimiter (1 byte), identifier byte size int (4 bytes) ,timestamp long (8 bytes) version [jvm] val version : HprofVersion Hprof version, which is tied to the runtime where the heap was dumped.","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-header/-hprof-header/","text":"// shark-hprof / shark / HprofHeader / HprofHeader HprofHeader \u00b6 [jvm]\\ fun HprofHeader (heapDumpTimestamp: Long = System.currentTimeMillis(), version: HprofVersion = HprofVersion.ANDROID, identifierByteSize: Int = 4)","title":" hprof header"},{"location":"api/shark-hprof/shark/-hprof-header/-hprof-header/#hprofheader","text":"[jvm]\\ fun HprofHeader (heapDumpTimestamp: Long = System.currentTimeMillis(), version: HprofVersion = HprofVersion.ANDROID, identifierByteSize: Int = 4)","title":"HprofHeader"},{"location":"api/shark-hprof/shark/-hprof-header/heap-dump-timestamp/","text":"// shark-hprof / shark / HprofHeader / heapDumpTimestamp heapDumpTimestamp \u00b6 [jvm]\\ val heapDumpTimestamp : Long Unix timestamp at which the heap was dumped.","title":"Heap dump timestamp"},{"location":"api/shark-hprof/shark/-hprof-header/heap-dump-timestamp/#heapdumptimestamp","text":"[jvm]\\ val heapDumpTimestamp : Long Unix timestamp at which the heap was dumped.","title":"heapDumpTimestamp"},{"location":"api/shark-hprof/shark/-hprof-header/identifier-byte-size/","text":"// shark-hprof / shark / HprofHeader / identifierByteSize identifierByteSize \u00b6 [jvm]\\ val identifierByteSize : Int = 4 Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be.","title":"Identifier byte size"},{"location":"api/shark-hprof/shark/-hprof-header/identifier-byte-size/#identifierbytesize","text":"[jvm]\\ val identifierByteSize : Int = 4 Size of Hprof identifiers. Identifiers are used to represent UTF8 strings, objects, stack traces, etc. They can have the same size as host pointers or sizeof(void*), but are not required to be.","title":"identifierByteSize"},{"location":"api/shark-hprof/shark/-hprof-header/records-position/","text":"// shark-hprof / shark / HprofHeader / recordsPosition recordsPosition \u00b6 [jvm]\\ val recordsPosition : Int How many bytes from the beginning of the file can we find the hprof records at. Version string, 0 delimiter (1 byte), identifier byte size int (4 bytes) ,timestamp long (8 bytes)","title":"Records position"},{"location":"api/shark-hprof/shark/-hprof-header/records-position/#recordsposition","text":"[jvm]\\ val recordsPosition : Int How many bytes from the beginning of the file can we find the hprof records at. Version string, 0 delimiter (1 byte), identifier byte size int (4 bytes) ,timestamp long (8 bytes)","title":"recordsPosition"},{"location":"api/shark-hprof/shark/-hprof-header/version/","text":"// shark-hprof / shark / HprofHeader / version version \u00b6 [jvm]\\ val version : HprofVersion Hprof version, which is tied to the runtime where the heap was dumped.","title":"Version"},{"location":"api/shark-hprof/shark/-hprof-header/version/#version","text":"[jvm]\\ val version : HprofVersion Hprof version, which is tied to the runtime where the heap was dumped.","title":"version"},{"location":"api/shark-hprof/shark/-hprof-header/-companion/","text":"// shark-hprof / shark / HprofHeader / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary parseHeaderOf [jvm] fun parseHeaderOf (hprofFile: File ): HprofHeader Reads the header of the provided hprofFile and returns it as a HprofHeader [jvm] fun parseHeaderOf (source: BufferedSource ): HprofHeader Reads the header of the provided source and returns it as a HprofHeader . This does not close the source .","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-header/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-hprof-header/-companion/#functions","text":"Name Summary parseHeaderOf [jvm] fun parseHeaderOf (hprofFile: File ): HprofHeader Reads the header of the provided hprofFile and returns it as a HprofHeader [jvm] fun parseHeaderOf (source: BufferedSource ): HprofHeader Reads the header of the provided source and returns it as a HprofHeader . This does not close the source .","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-header/-companion/parse-header-of/","text":"// shark-hprof / shark / HprofHeader / Companion / parseHeaderOf parseHeaderOf \u00b6 [jvm]\\ fun parseHeaderOf (hprofFile: File ): HprofHeader Reads the header of the provided hprofFile and returns it as a HprofHeader [jvm]\\ fun parseHeaderOf (source: BufferedSource ): HprofHeader Reads the header of the provided source and returns it as a HprofHeader . This does not close the source .","title":"Parse header of"},{"location":"api/shark-hprof/shark/-hprof-header/-companion/parse-header-of/#parseheaderof","text":"[jvm]\\ fun parseHeaderOf (hprofFile: File ): HprofHeader Reads the header of the provided hprofFile and returns it as a HprofHeader [jvm]\\ fun parseHeaderOf (source: BufferedSource ): HprofHeader Reads the header of the provided source and returns it as a HprofHeader . This does not close the source .","title":"parseHeaderOf"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/","text":"// shark-hprof / shark / HprofPrimitiveArrayStripper HprofPrimitiveArrayStripper \u00b6 [jvm]\\ class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019. Constructors \u00b6 HprofPrimitiveArrayStripper [jvm] fun HprofPrimitiveArrayStripper () Functions \u00b6 Name Summary stripPrimitiveArrays [jvm] fun stripPrimitiveArrays (inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-stripped.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-stripped\u201d })): File fun stripPrimitiveArrays (hprofSourceProvider: StreamingSourceProvider , hprofSink: BufferedSink )","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#hprofprimitivearraystripper","text":"[jvm]\\ class HprofPrimitiveArrayStripper Converts a Hprof file to another file with all primitive arrays replaced with arrays of zeroes, which can be useful to remove PII. Char arrays are handled slightly differently because 0 would be the null character so instead these become arrays of \u2018?\u2019.","title":"HprofPrimitiveArrayStripper"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#constructors","text":"HprofPrimitiveArrayStripper [jvm] fun HprofPrimitiveArrayStripper ()","title":"Constructors"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/#functions","text":"Name Summary stripPrimitiveArrays [jvm] fun stripPrimitiveArrays (inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-stripped.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-stripped\u201d })): File fun stripPrimitiveArrays (hprofSourceProvider: StreamingSourceProvider , hprofSink: BufferedSink )","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/-hprof-primitive-array-stripper/","text":"// shark-hprof / shark / HprofPrimitiveArrayStripper / HprofPrimitiveArrayStripper HprofPrimitiveArrayStripper \u00b6 [jvm]\\ fun HprofPrimitiveArrayStripper ()","title":" hprof primitive array stripper"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/-hprof-primitive-array-stripper/#hprofprimitivearraystripper","text":"[jvm]\\ fun HprofPrimitiveArrayStripper ()","title":"HprofPrimitiveArrayStripper"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays/","text":"// shark-hprof / shark / HprofPrimitiveArrayStripper / stripPrimitiveArrays stripPrimitiveArrays \u00b6 [jvm]\\ fun stripPrimitiveArrays (inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-stripped.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-stripped\u201d })): File fun stripPrimitiveArrays (hprofSourceProvider: StreamingSourceProvider , hprofSink: BufferedSink ) See also \u00b6 jvm shark.HprofPrimitiveArrayStripper","title":"Strip primitive arrays"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays/#stripprimitivearrays","text":"[jvm]\\ fun stripPrimitiveArrays (inputHprofFile: File , outputHprofFile: File = File( inputHprofFile.parent, inputHprofFile.name.replace( \u201c.hprof\u201d, \u201c-stripped.hprof\u201d ).let { if (it != inputHprofFile.name) it else inputHprofFile.name + \u201c-stripped\u201d })): File fun stripPrimitiveArrays (hprofSourceProvider: StreamingSourceProvider , hprofSink: BufferedSink )","title":"stripPrimitiveArrays"},{"location":"api/shark-hprof/shark/-hprof-primitive-array-stripper/strip-primitive-arrays/#see-also","text":"jvm shark.HprofPrimitiveArrayStripper","title":"See also"},{"location":"api/shark-hprof/shark/-hprof-record/","text":"// shark-hprof / shark / HprofRecord HprofRecord \u00b6 [jvm]\\ sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files. Types \u00b6 Name Summary HeapDumpEndRecord [jvm] object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord [jvm] sealed class HeapDumpRecord : HprofRecord LoadClassRecord [jvm] class LoadClassRecord (classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long ) : HprofRecord StackFrameRecord [jvm] class StackFrameRecord (id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int ) : HprofRecord StackTraceRecord [jvm] class StackTraceRecord (stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray ) : HprofRecord StringRecord [jvm] class StringRecord (id: Long , string: String ) : HprofRecord Inheritors \u00b6 Name StringRecord LoadClassRecord HeapDumpEndRecord StackFrameRecord StackTraceRecord HeapDumpRecord","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/#hprofrecord","text":"[jvm]\\ sealed class HprofRecord A Hprof record. These data structure map 1:1 with how records are written in hprof files.","title":"HprofRecord"},{"location":"api/shark-hprof/shark/-hprof-record/#types","text":"Name Summary HeapDumpEndRecord [jvm] object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump. HeapDumpRecord [jvm] sealed class HeapDumpRecord : HprofRecord LoadClassRecord [jvm] class LoadClassRecord (classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long ) : HprofRecord StackFrameRecord [jvm] class StackFrameRecord (id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int ) : HprofRecord StackTraceRecord [jvm] class StackTraceRecord (stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray ) : HprofRecord StringRecord [jvm] class StringRecord (id: Long , string: String ) : HprofRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/#inheritors","text":"Name StringRecord LoadClassRecord HeapDumpEndRecord StackFrameRecord StackTraceRecord HeapDumpRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-end-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpEndRecord HeapDumpEndRecord \u00b6 [jvm]\\ object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump.","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-end-record/#heapdumpendrecord","text":"[jvm]\\ object HeapDumpEndRecord : HprofRecord Terminates a series of heap dump segments. Concatenation of heap dump segments equals a heap dump.","title":"HeapDumpEndRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord HeapDumpRecord \u00b6 [jvm]\\ sealed class HeapDumpRecord : HprofRecord Types \u00b6 Name Summary GcRootRecord [jvm] class GcRootRecord (gcRoot: GcRoot ) : HprofRecord.HeapDumpRecord HeapDumpInfoRecord [jvm] class HeapDumpInfoRecord (heapId: Int , heapNameStringId: Long ) : HprofRecord.HeapDumpRecord ObjectRecord [jvm] sealed class ObjectRecord : HprofRecord.HeapDumpRecord Inheritors \u00b6 Name GcRootRecord ObjectRecord HeapDumpInfoRecord","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#heapdumprecord","text":"[jvm]\\ sealed class HeapDumpRecord : HprofRecord","title":"HeapDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#types","text":"Name Summary GcRootRecord [jvm] class GcRootRecord (gcRoot: GcRoot ) : HprofRecord.HeapDumpRecord HeapDumpInfoRecord [jvm] class HeapDumpInfoRecord (heapId: Int , heapNameStringId: Long ) : HprofRecord.HeapDumpRecord ObjectRecord [jvm] sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/#inheritors","text":"Name GcRootRecord ObjectRecord HeapDumpInfoRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord GcRootRecord \u00b6 [jvm]\\ class GcRootRecord (gcRoot: GcRoot ) : HprofRecord.HeapDumpRecord Properties \u00b6 Name Summary gcRoot [jvm] val gcRoot : GcRoot","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#gcrootrecord","text":"[jvm]\\ class GcRootRecord (gcRoot: GcRoot ) : HprofRecord.HeapDumpRecord","title":"GcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/#properties","text":"Name Summary gcRoot [jvm] val gcRoot : GcRoot","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-gc-root-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord / GcRootRecord GcRootRecord \u00b6 [jvm]\\ fun GcRootRecord (gcRoot: GcRoot )","title":" gc root record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/-gc-root-record/#gcrootrecord","text":"[jvm]\\ fun GcRootRecord (gcRoot: GcRoot )","title":"GcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / GcRootRecord / gcRoot gcRoot \u00b6 [jvm]\\ val gcRoot : GcRoot","title":"Gc root"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-gc-root-record/gc-root/#gcroot","text":"[jvm]\\ val gcRoot : GcRoot","title":"gcRoot"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord HeapDumpInfoRecord \u00b6 [jvm]\\ class HeapDumpInfoRecord (heapId: Int , heapNameStringId: Long ) : HprofRecord.HeapDumpRecord Properties \u00b6 Name Summary heapId [jvm] val heapId : Int heapNameStringId [jvm] val heapNameStringId : Long","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#heapdumpinforecord","text":"[jvm]\\ class HeapDumpInfoRecord (heapId: Int , heapNameStringId: Long ) : HprofRecord.HeapDumpRecord","title":"HeapDumpInfoRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/#properties","text":"Name Summary heapId [jvm] val heapId : Int heapNameStringId [jvm] val heapNameStringId : Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-heap-dump-info-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / HeapDumpInfoRecord HeapDumpInfoRecord \u00b6 [jvm]\\ fun HeapDumpInfoRecord (heapId: Int , heapNameStringId: Long )","title":" heap dump info record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/-heap-dump-info-record/#heapdumpinforecord","text":"[jvm]\\ fun HeapDumpInfoRecord (heapId: Int , heapNameStringId: Long )","title":"HeapDumpInfoRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / heapId heapId \u00b6 [jvm]\\ val heapId : Int","title":"Heap id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-id/#heapid","text":"[jvm]\\ val heapId : Int","title":"heapId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / HeapDumpInfoRecord / heapNameStringId heapNameStringId \u00b6 [jvm]\\ val heapNameStringId : Long","title":"Heap name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-heap-dump-info-record/heap-name-string-id/#heapnamestringid","text":"[jvm]\\ val heapNameStringId : Long","title":"heapNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord ObjectRecord \u00b6 [jvm]\\ sealed class ObjectRecord : HprofRecord.HeapDumpRecord Types \u00b6 Name Summary ClassDumpRecord [jvm] class ClassDumpRecord (id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >) : HprofRecord.HeapDumpRecord.ObjectRecord InstanceDumpRecord [jvm] class InstanceDumpRecord (id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArrayDumpRecord [jvm] class ObjectArrayDumpRecord (id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArrayDumpRecord [jvm] sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Inheritors \u00b6 Name ClassDumpRecord InstanceDumpRecord ObjectArrayDumpRecord PrimitiveArrayDumpRecord","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#objectrecord","text":"[jvm]\\ sealed class ObjectRecord : HprofRecord.HeapDumpRecord","title":"ObjectRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#types","text":"Name Summary ClassDumpRecord [jvm] class ClassDumpRecord (id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >) : HprofRecord.HeapDumpRecord.ObjectRecord InstanceDumpRecord [jvm] class InstanceDumpRecord (id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord ObjectArrayDumpRecord [jvm] class ObjectArrayDumpRecord (id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord PrimitiveArrayDumpRecord [jvm] sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/#inheritors","text":"Name ClassDumpRecord InstanceDumpRecord ObjectArrayDumpRecord PrimitiveArrayDumpRecord","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord ClassDumpRecord \u00b6 [jvm]\\ class ClassDumpRecord (id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >) : HprofRecord.HeapDumpRecord.ObjectRecord Types \u00b6 Name Summary FieldRecord [jvm] data class FieldRecord (nameStringId: Long , type: Int ) StaticFieldRecord [jvm] data class StaticFieldRecord (nameStringId: Long , type: Int , value: ValueHolder ) Properties \u00b6 Name Summary classLoaderId [jvm] val classLoaderId : Long fields [jvm] val fields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord > id [jvm] val id : Long instanceSize [jvm] val instanceSize : Int protectionDomainId [jvm] val protectionDomainId : Long signersId [jvm] val signersId : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int staticFields [jvm] val staticFields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord > superclassId [jvm] val superclassId : Long","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#classdumprecord","text":"[jvm]\\ class ClassDumpRecord (id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >) : HprofRecord.HeapDumpRecord.ObjectRecord","title":"ClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#types","text":"Name Summary FieldRecord [jvm] data class FieldRecord (nameStringId: Long , type: Int ) StaticFieldRecord [jvm] data class StaticFieldRecord (nameStringId: Long , type: Int , value: ValueHolder )","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/#properties","text":"Name Summary classLoaderId [jvm] val classLoaderId : Long fields [jvm] val fields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord > id [jvm] val id : Long instanceSize [jvm] val instanceSize : Int protectionDomainId [jvm] val protectionDomainId : Long signersId [jvm] val signersId : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int staticFields [jvm] val staticFields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord > superclassId [jvm] val superclassId : Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-class-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / ClassDumpRecord ClassDumpRecord \u00b6 [jvm]\\ fun ClassDumpRecord (id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >)","title":" class dump record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-class-dump-record/#classdumprecord","text":"[jvm]\\ fun ClassDumpRecord (id: Long , stackTraceSerialNumber: Int , superclassId: Long , classLoaderId: Long , signersId: Long , protectionDomainId: Long , instanceSize: Int , staticFields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >, fields: List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >)","title":"ClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / classLoaderId classLoaderId \u00b6 [jvm]\\ val classLoaderId : Long","title":"Class loader id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/class-loader-id/#classloaderid","text":"[jvm]\\ val classLoaderId : Long","title":"classLoaderId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / fields fields \u00b6 [jvm]\\ val fields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >","title":"Fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/fields/#fields","text":"[jvm]\\ val fields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.FieldRecord >","title":"fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / id id \u00b6 [jvm]\\ val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/id/#id","text":"[jvm]\\ val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / instanceSize instanceSize \u00b6 [jvm]\\ val instanceSize : Int","title":"Instance size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/instance-size/#instancesize","text":"[jvm]\\ val instanceSize : Int","title":"instanceSize"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / protectionDomainId protectionDomainId \u00b6 [jvm]\\ val protectionDomainId : Long","title":"Protection domain id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/protection-domain-id/#protectiondomainid","text":"[jvm]\\ val protectionDomainId : Long","title":"protectionDomainId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / signersId signersId \u00b6 [jvm]\\ val signersId : Long","title":"Signers id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/signers-id/#signersid","text":"[jvm]\\ val signersId : Long","title":"signersId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / staticFields staticFields \u00b6 [jvm]\\ val staticFields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >","title":"Static fields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/static-fields/#staticfields","text":"[jvm]\\ val staticFields : List < HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord.StaticFieldRecord >","title":"staticFields"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / superclassId superclassId \u00b6 [jvm]\\ val superclassId : Long","title":"Superclass id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/superclass-id/#superclassid","text":"[jvm]\\ val superclassId : Long","title":"superclassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord FieldRecord \u00b6 [jvm]\\ data class FieldRecord (nameStringId: Long , type: Int ) Properties \u00b6 Name Summary nameStringId [jvm] val nameStringId : Long type [jvm] val type : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#fieldrecord","text":"[jvm]\\ data class FieldRecord (nameStringId: Long , type: Int )","title":"FieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/#properties","text":"Name Summary nameStringId [jvm] val nameStringId : Long type [jvm] val type : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-field-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / FieldRecord FieldRecord \u00b6 [jvm]\\ fun FieldRecord (nameStringId: Long , type: Int )","title":" field record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/-field-record/#fieldrecord","text":"[jvm]\\ fun FieldRecord (nameStringId: Long , type: Int )","title":"FieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / nameStringId nameStringId \u00b6 [jvm]\\ val nameStringId : Long","title":"Name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/name-string-id/#namestringid","text":"[jvm]\\ val nameStringId : Long","title":"nameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / FieldRecord / type type \u00b6 [jvm]\\ val type : Int","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-field-record/type/#type","text":"[jvm]\\ val type : Int","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord StaticFieldRecord \u00b6 [jvm]\\ data class StaticFieldRecord (nameStringId: Long , type: Int , value: ValueHolder ) Properties \u00b6 Name Summary nameStringId [jvm] val nameStringId : Long type [jvm] val type : Int value [jvm] val value : ValueHolder","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#staticfieldrecord","text":"[jvm]\\ data class StaticFieldRecord (nameStringId: Long , type: Int , value: ValueHolder )","title":"StaticFieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/#properties","text":"Name Summary nameStringId [jvm] val nameStringId : Long type [jvm] val type : Int value [jvm] val value : ValueHolder","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-static-field-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / StaticFieldRecord StaticFieldRecord \u00b6 [jvm]\\ fun StaticFieldRecord (nameStringId: Long , type: Int , value: ValueHolder )","title":" static field record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/-static-field-record/#staticfieldrecord","text":"[jvm]\\ fun StaticFieldRecord (nameStringId: Long , type: Int , value: ValueHolder )","title":"StaticFieldRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / nameStringId nameStringId \u00b6 [jvm]\\ val nameStringId : Long","title":"Name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/name-string-id/#namestringid","text":"[jvm]\\ val nameStringId : Long","title":"nameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / type type \u00b6 [jvm]\\ val type : Int","title":"Type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/type/#type","text":"[jvm]\\ val type : Int","title":"type"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ClassDumpRecord / StaticFieldRecord / value value \u00b6 [jvm]\\ val value : ValueHolder","title":"Value"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-class-dump-record/-static-field-record/value/#value","text":"[jvm]\\ val value : ValueHolder","title":"value"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord InstanceDumpRecord \u00b6 [jvm]\\ class InstanceDumpRecord (id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord Properties \u00b6 Name Summary classId [jvm] val classId : Long fieldValues [jvm] val fieldValues : ByteArray Instance field values (this class, followed by super class, etc) id [jvm] val id : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#instancedumprecord","text":"[jvm]\\ class InstanceDumpRecord (id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord","title":"InstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/#properties","text":"Name Summary classId [jvm] val classId : Long fieldValues [jvm] val fieldValues : ByteArray Instance field values (this class, followed by super class, etc) id [jvm] val id : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-instance-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / InstanceDumpRecord InstanceDumpRecord \u00b6 [jvm]\\ fun InstanceDumpRecord (id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":" instance dump record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/-instance-dump-record/#instancedumprecord","text":"[jvm]\\ fun InstanceDumpRecord (id: Long , stackTraceSerialNumber: Int , classId: Long , fieldValues: ByteArray )","title":"InstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / classId classId \u00b6 [jvm]\\ val classId : Long","title":"Class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/class-id/#classid","text":"[jvm]\\ val classId : Long","title":"classId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / fieldValues fieldValues \u00b6 [jvm]\\ val fieldValues : ByteArray Instance field values (this class, followed by super class, etc)","title":"Field values"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/field-values/#fieldvalues","text":"[jvm]\\ val fieldValues : ByteArray Instance field values (this class, followed by super class, etc)","title":"fieldValues"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / id id \u00b6 [jvm]\\ val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/id/#id","text":"[jvm]\\ val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / InstanceDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-instance-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord ObjectArrayDumpRecord \u00b6 [jvm]\\ class ObjectArrayDumpRecord (id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord Properties \u00b6 Name Summary arrayClassId [jvm] val arrayClassId : Long elementIds [jvm] val elementIds : LongArray id [jvm] val id : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#objectarraydumprecord","text":"[jvm]\\ class ObjectArrayDumpRecord (id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord","title":"ObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/#properties","text":"Name Summary arrayClassId [jvm] val arrayClassId : Long elementIds [jvm] val elementIds : LongArray id [jvm] val id : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-object-array-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / ObjectArrayDumpRecord ObjectArrayDumpRecord \u00b6 [jvm]\\ fun ObjectArrayDumpRecord (id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":" object array dump record"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/-object-array-dump-record/#objectarraydumprecord","text":"[jvm]\\ fun ObjectArrayDumpRecord (id: Long , stackTraceSerialNumber: Int , arrayClassId: Long , elementIds: LongArray )","title":"ObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / arrayClassId arrayClassId \u00b6 [jvm]\\ val arrayClassId : Long","title":"Array class id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/array-class-id/#arrayclassid","text":"[jvm]\\ val arrayClassId : Long","title":"arrayClassId"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / elementIds elementIds \u00b6 [jvm]\\ val elementIds : LongArray","title":"Element ids"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/element-ids/#elementids","text":"[jvm]\\ val elementIds : LongArray","title":"elementIds"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / id id \u00b6 [jvm]\\ val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/id/#id","text":"[jvm]\\ val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / ObjectArrayDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-object-array-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord PrimitiveArrayDumpRecord \u00b6 [jvm]\\ sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord Types \u00b6 Name Summary BooleanArrayDump [jvm] class BooleanArrayDump (id: Long , stackTraceSerialNumber: Int , array: BooleanArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump [jvm] class ByteArrayDump (id: Long , stackTraceSerialNumber: Int , array: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump [jvm] class CharArrayDump (id: Long , stackTraceSerialNumber: Int , array: CharArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump [jvm] class DoubleArrayDump (id: Long , stackTraceSerialNumber: Int , array: DoubleArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump [jvm] class FloatArrayDump (id: Long , stackTraceSerialNumber: Int , array: FloatArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump [jvm] class IntArrayDump (id: Long , stackTraceSerialNumber: Int , array: IntArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump [jvm] class LongArrayDump (id: Long , stackTraceSerialNumber: Int , array: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump [jvm] class ShortArrayDump (id: Long , stackTraceSerialNumber: Int , array: ShortArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary id [jvm] abstract val id : Long size [jvm] abstract val size : Int stackTraceSerialNumber [jvm] abstract val stackTraceSerialNumber : Int Inheritors \u00b6 Name BooleanArrayDump CharArrayDump FloatArrayDump DoubleArrayDump ByteArrayDump ShortArrayDump IntArrayDump LongArrayDump","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#primitivearraydumprecord","text":"[jvm]\\ sealed class PrimitiveArrayDumpRecord : HprofRecord.HeapDumpRecord.ObjectRecord","title":"PrimitiveArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#types","text":"Name Summary BooleanArrayDump [jvm] class BooleanArrayDump (id: Long , stackTraceSerialNumber: Int , array: BooleanArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ByteArrayDump [jvm] class ByteArrayDump (id: Long , stackTraceSerialNumber: Int , array: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord CharArrayDump [jvm] class CharArrayDump (id: Long , stackTraceSerialNumber: Int , array: CharArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord DoubleArrayDump [jvm] class DoubleArrayDump (id: Long , stackTraceSerialNumber: Int , array: DoubleArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord FloatArrayDump [jvm] class FloatArrayDump (id: Long , stackTraceSerialNumber: Int , array: FloatArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord IntArrayDump [jvm] class IntArrayDump (id: Long , stackTraceSerialNumber: Int , array: IntArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord LongArrayDump [jvm] class LongArrayDump (id: Long , stackTraceSerialNumber: Int , array: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord ShortArrayDump [jvm] class ShortArrayDump (id: Long , stackTraceSerialNumber: Int , array: ShortArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#properties","text":"Name Summary id [jvm] abstract val id : Long size [jvm] abstract val size : Int stackTraceSerialNumber [jvm] abstract val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/#inheritors","text":"Name BooleanArrayDump CharArrayDump FloatArrayDump DoubleArrayDump ByteArrayDump ShortArrayDump IntArrayDump LongArrayDump","title":"Inheritors"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / id id \u00b6 [jvm]\\ abstract val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/id/#id","text":"[jvm]\\ abstract val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / size size \u00b6 [jvm]\\ abstract val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/size/#size","text":"[jvm]\\ abstract val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ abstract val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ abstract val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump BooleanArrayDump \u00b6 [jvm]\\ class BooleanArrayDump (id: Long , stackTraceSerialNumber: Int , array: BooleanArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : BooleanArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#booleanarraydump","text":"[jvm]\\ class BooleanArrayDump (id: Long , stackTraceSerialNumber: Int , array: BooleanArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"BooleanArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/#properties","text":"Name Summary array [jvm] val array : BooleanArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-boolean-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / BooleanArrayDump BooleanArrayDump \u00b6 [jvm]\\ fun BooleanArrayDump (id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":" boolean array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/-boolean-array-dump/#booleanarraydump","text":"[jvm]\\ fun BooleanArrayDump (id: Long , stackTraceSerialNumber: Int , array: BooleanArray )","title":"BooleanArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / array array \u00b6 [jvm]\\ val array : BooleanArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/array/#array","text":"[jvm]\\ val array : BooleanArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / BooleanArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-boolean-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump ByteArrayDump \u00b6 [jvm]\\ class ByteArrayDump (id: Long , stackTraceSerialNumber: Int , array: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : ByteArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#bytearraydump","text":"[jvm]\\ class ByteArrayDump (id: Long , stackTraceSerialNumber: Int , array: ByteArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"ByteArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/#properties","text":"Name Summary array [jvm] val array : ByteArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-byte-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / ByteArrayDump ByteArrayDump \u00b6 [jvm]\\ fun ByteArrayDump (id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":" byte array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/-byte-array-dump/#bytearraydump","text":"[jvm]\\ fun ByteArrayDump (id: Long , stackTraceSerialNumber: Int , array: ByteArray )","title":"ByteArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / array array \u00b6 [jvm]\\ val array : ByteArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/array/#array","text":"[jvm]\\ val array : ByteArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ByteArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-byte-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump CharArrayDump \u00b6 [jvm]\\ class CharArrayDump (id: Long , stackTraceSerialNumber: Int , array: CharArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : CharArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#chararraydump","text":"[jvm]\\ class CharArrayDump (id: Long , stackTraceSerialNumber: Int , array: CharArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"CharArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/#properties","text":"Name Summary array [jvm] val array : CharArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-char-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / CharArrayDump CharArrayDump \u00b6 [jvm]\\ fun CharArrayDump (id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":" char array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/-char-array-dump/#chararraydump","text":"[jvm]\\ fun CharArrayDump (id: Long , stackTraceSerialNumber: Int , array: CharArray )","title":"CharArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / array array \u00b6 [jvm]\\ val array : CharArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/array/#array","text":"[jvm]\\ val array : CharArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / CharArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-char-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump DoubleArrayDump \u00b6 [jvm]\\ class DoubleArrayDump (id: Long , stackTraceSerialNumber: Int , array: DoubleArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : DoubleArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#doublearraydump","text":"[jvm]\\ class DoubleArrayDump (id: Long , stackTraceSerialNumber: Int , array: DoubleArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"DoubleArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/#properties","text":"Name Summary array [jvm] val array : DoubleArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-double-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / DoubleArrayDump DoubleArrayDump \u00b6 [jvm]\\ fun DoubleArrayDump (id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":" double array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/-double-array-dump/#doublearraydump","text":"[jvm]\\ fun DoubleArrayDump (id: Long , stackTraceSerialNumber: Int , array: DoubleArray )","title":"DoubleArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / array array \u00b6 [jvm]\\ val array : DoubleArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/array/#array","text":"[jvm]\\ val array : DoubleArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / DoubleArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-double-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump FloatArrayDump \u00b6 [jvm]\\ class FloatArrayDump (id: Long , stackTraceSerialNumber: Int , array: FloatArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : FloatArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#floatarraydump","text":"[jvm]\\ class FloatArrayDump (id: Long , stackTraceSerialNumber: Int , array: FloatArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"FloatArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/#properties","text":"Name Summary array [jvm] val array : FloatArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-float-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / FloatArrayDump FloatArrayDump \u00b6 [jvm]\\ fun FloatArrayDump (id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":" float array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/-float-array-dump/#floatarraydump","text":"[jvm]\\ fun FloatArrayDump (id: Long , stackTraceSerialNumber: Int , array: FloatArray )","title":"FloatArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / array array \u00b6 [jvm]\\ val array : FloatArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/array/#array","text":"[jvm]\\ val array : FloatArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / FloatArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-float-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump IntArrayDump \u00b6 [jvm]\\ class IntArrayDump (id: Long , stackTraceSerialNumber: Int , array: IntArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : IntArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#intarraydump","text":"[jvm]\\ class IntArrayDump (id: Long , stackTraceSerialNumber: Int , array: IntArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"IntArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/#properties","text":"Name Summary array [jvm] val array : IntArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-int-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / IntArrayDump IntArrayDump \u00b6 [jvm]\\ fun IntArrayDump (id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":" int array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/-int-array-dump/#intarraydump","text":"[jvm]\\ fun IntArrayDump (id: Long , stackTraceSerialNumber: Int , array: IntArray )","title":"IntArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / array array \u00b6 [jvm]\\ val array : IntArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/array/#array","text":"[jvm]\\ val array : IntArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / IntArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-int-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump LongArrayDump \u00b6 [jvm]\\ class LongArrayDump (id: Long , stackTraceSerialNumber: Int , array: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : LongArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#longarraydump","text":"[jvm]\\ class LongArrayDump (id: Long , stackTraceSerialNumber: Int , array: LongArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"LongArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/#properties","text":"Name Summary array [jvm] val array : LongArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-long-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / LongArrayDump LongArrayDump \u00b6 [jvm]\\ fun LongArrayDump (id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":" long array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/-long-array-dump/#longarraydump","text":"[jvm]\\ fun LongArrayDump (id: Long , stackTraceSerialNumber: Int , array: LongArray )","title":"LongArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / array array \u00b6 [jvm]\\ val array : LongArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/array/#array","text":"[jvm]\\ val array : LongArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / LongArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-long-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump ShortArrayDump \u00b6 [jvm]\\ class ShortArrayDump (id: Long , stackTraceSerialNumber: Int , array: ShortArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Properties \u00b6 Name Summary array [jvm] val array : ShortArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#shortarraydump","text":"[jvm]\\ class ShortArrayDump (id: Long , stackTraceSerialNumber: Int , array: ShortArray ) : HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord","title":"ShortArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/#properties","text":"Name Summary array [jvm] val array : ShortArray id [jvm] open override val id : Long size [jvm] open override val size : Int stackTraceSerialNumber [jvm] open override val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-short-array-dump/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / ShortArrayDump ShortArrayDump \u00b6 [jvm]\\ fun ShortArrayDump (id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":" short array dump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/-short-array-dump/#shortarraydump","text":"[jvm]\\ fun ShortArrayDump (id: Long , stackTraceSerialNumber: Int , array: ShortArray )","title":"ShortArrayDump"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / array array \u00b6 [jvm]\\ val array : ShortArray","title":"Array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/array/#array","text":"[jvm]\\ val array : ShortArray","title":"array"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / id id \u00b6 [jvm]\\ open override val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/id/#id","text":"[jvm]\\ open override val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / size size \u00b6 [jvm]\\ open override val size : Int","title":"Size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/size/#size","text":"[jvm]\\ open override val size : Int","title":"size"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / HeapDumpRecord / ObjectRecord / PrimitiveArrayDumpRecord / ShortArrayDump / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ open override val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-heap-dump-record/-object-record/-primitive-array-dump-record/-short-array-dump/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ open override val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/","text":"// shark-hprof / shark / HprofRecord / LoadClassRecord LoadClassRecord \u00b6 [jvm]\\ class LoadClassRecord (classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long ) : HprofRecord Properties \u00b6 Name Summary classNameStringId [jvm] val classNameStringId : Long classSerialNumber [jvm] val classSerialNumber : Int id [jvm] val id : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#loadclassrecord","text":"[jvm]\\ class LoadClassRecord (classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long ) : HprofRecord","title":"LoadClassRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/#properties","text":"Name Summary classNameStringId [jvm] val classNameStringId : Long classSerialNumber [jvm] val classSerialNumber : Int id [jvm] val id : Long stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/-load-class-record/","text":"// shark-hprof / shark / HprofRecord / LoadClassRecord / LoadClassRecord LoadClassRecord \u00b6 [jvm]\\ fun LoadClassRecord (classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":" load class record"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/-load-class-record/#loadclassrecord","text":"[jvm]\\ fun LoadClassRecord (classSerialNumber: Int , id: Long , stackTraceSerialNumber: Int , classNameStringId: Long )","title":"LoadClassRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id/","text":"// shark-hprof / shark / HprofRecord / LoadClassRecord / classNameStringId classNameStringId \u00b6 [jvm]\\ val classNameStringId : Long","title":"Class name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-name-string-id/#classnamestringid","text":"[jvm]\\ val classNameStringId : Long","title":"classNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number/","text":"// shark-hprof / shark / HprofRecord / LoadClassRecord / classSerialNumber classSerialNumber \u00b6 [jvm]\\ val classSerialNumber : Int","title":"Class serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/class-serial-number/#classserialnumber","text":"[jvm]\\ val classSerialNumber : Int","title":"classSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/id/","text":"// shark-hprof / shark / HprofRecord / LoadClassRecord / id id \u00b6 [jvm]\\ val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/id/#id","text":"[jvm]\\ val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / LoadClassRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-load-class-record/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord StackFrameRecord \u00b6 [jvm]\\ class StackFrameRecord (id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int ) : HprofRecord Properties \u00b6 Name Summary classSerialNumber [jvm] val classSerialNumber : Int id [jvm] val id : Long lineNumber [jvm] val lineNumber : Int methodNameStringId [jvm] val methodNameStringId : Long methodSignatureStringId [jvm] val methodSignatureStringId : Long sourceFileNameStringId [jvm] val sourceFileNameStringId : Long","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#stackframerecord","text":"[jvm]\\ class StackFrameRecord (id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int ) : HprofRecord","title":"StackFrameRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/#properties","text":"Name Summary classSerialNumber [jvm] val classSerialNumber : Int id [jvm] val id : Long lineNumber [jvm] val lineNumber : Int methodNameStringId [jvm] val methodNameStringId : Long methodSignatureStringId [jvm] val methodSignatureStringId : Long sourceFileNameStringId [jvm] val sourceFileNameStringId : Long","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/-stack-frame-record/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord / StackFrameRecord StackFrameRecord \u00b6 [jvm]\\ fun StackFrameRecord (id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":" stack frame record"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/-stack-frame-record/#stackframerecord","text":"[jvm]\\ fun StackFrameRecord (id: Long , methodNameStringId: Long , methodSignatureStringId: Long , sourceFileNameStringId: Long , classSerialNumber: Int , lineNumber: Int )","title":"StackFrameRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord / classSerialNumber classSerialNumber \u00b6 [jvm]\\ val classSerialNumber : Int","title":"Class serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/class-serial-number/#classserialnumber","text":"[jvm]\\ val classSerialNumber : Int","title":"classSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/id/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord / id id \u00b6 [jvm]\\ val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/id/#id","text":"[jvm]\\ val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord / lineNumber lineNumber \u00b6 [jvm]\\ val lineNumber : Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented)","title":"Line number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/line-number/#linenumber","text":"[jvm]\\ val lineNumber : Int 0 line number 0 no line information available -1 unknown location -2 compiled method (Not implemented) -3 native method (Not implemented)","title":"lineNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord / methodNameStringId methodNameStringId \u00b6 [jvm]\\ val methodNameStringId : Long","title":"Method name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-name-string-id/#methodnamestringid","text":"[jvm]\\ val methodNameStringId : Long","title":"methodNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord / methodSignatureStringId methodSignatureStringId \u00b6 [jvm]\\ val methodSignatureStringId : Long","title":"Method signature string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/method-signature-string-id/#methodsignaturestringid","text":"[jvm]\\ val methodSignatureStringId : Long","title":"methodSignatureStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id/","text":"// shark-hprof / shark / HprofRecord / StackFrameRecord / sourceFileNameStringId sourceFileNameStringId \u00b6 [jvm]\\ val sourceFileNameStringId : Long","title":"Source file name string id"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-frame-record/source-file-name-string-id/#sourcefilenamestringid","text":"[jvm]\\ val sourceFileNameStringId : Long","title":"sourceFileNameStringId"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/","text":"// shark-hprof / shark / HprofRecord / StackTraceRecord StackTraceRecord \u00b6 [jvm]\\ class StackTraceRecord (stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray ) : HprofRecord Properties \u00b6 Name Summary stackFrameIds [jvm] val stackFrameIds : LongArray stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int threadSerialNumber [jvm] val threadSerialNumber : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#stacktracerecord","text":"[jvm]\\ class StackTraceRecord (stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray ) : HprofRecord","title":"StackTraceRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/#properties","text":"Name Summary stackFrameIds [jvm] val stackFrameIds : LongArray stackTraceSerialNumber [jvm] val stackTraceSerialNumber : Int threadSerialNumber [jvm] val threadSerialNumber : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/-stack-trace-record/","text":"// shark-hprof / shark / HprofRecord / StackTraceRecord / StackTraceRecord StackTraceRecord \u00b6 [jvm]\\ fun StackTraceRecord (stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":" stack trace record"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/-stack-trace-record/#stacktracerecord","text":"[jvm]\\ fun StackTraceRecord (stackTraceSerialNumber: Int , threadSerialNumber: Int , stackFrameIds: LongArray )","title":"StackTraceRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids/","text":"// shark-hprof / shark / HprofRecord / StackTraceRecord / stackFrameIds stackFrameIds \u00b6 [jvm]\\ val stackFrameIds : LongArray","title":"Stack frame ids"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-frame-ids/#stackframeids","text":"[jvm]\\ val stackFrameIds : LongArray","title":"stackFrameIds"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number/","text":"// shark-hprof / shark / HprofRecord / StackTraceRecord / stackTraceSerialNumber stackTraceSerialNumber \u00b6 [jvm]\\ val stackTraceSerialNumber : Int","title":"Stack trace serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/stack-trace-serial-number/#stacktraceserialnumber","text":"[jvm]\\ val stackTraceSerialNumber : Int","title":"stackTraceSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number/","text":"// shark-hprof / shark / HprofRecord / StackTraceRecord / threadSerialNumber threadSerialNumber \u00b6 [jvm]\\ val threadSerialNumber : Int","title":"Thread serial number"},{"location":"api/shark-hprof/shark/-hprof-record/-stack-trace-record/thread-serial-number/#threadserialnumber","text":"[jvm]\\ val threadSerialNumber : Int","title":"threadSerialNumber"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/","text":"// shark-hprof / shark / HprofRecord / StringRecord StringRecord \u00b6 [jvm]\\ class StringRecord (id: Long , string: String ) : HprofRecord Properties \u00b6 Name Summary id [jvm] val id : Long string [jvm] val string : String","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#stringrecord","text":"[jvm]\\ class StringRecord (id: Long , string: String ) : HprofRecord","title":"StringRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/#properties","text":"Name Summary id [jvm] val id : Long string [jvm] val string : String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/-string-record/","text":"// shark-hprof / shark / HprofRecord / StringRecord / StringRecord StringRecord \u00b6 [jvm]\\ fun StringRecord (id: Long , string: String )","title":" string record"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/-string-record/#stringrecord","text":"[jvm]\\ fun StringRecord (id: Long , string: String )","title":"StringRecord"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/id/","text":"// shark-hprof / shark / HprofRecord / StringRecord / id id \u00b6 [jvm]\\ val id : Long","title":"Id"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/id/#id","text":"[jvm]\\ val id : Long","title":"id"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/string/","text":"// shark-hprof / shark / HprofRecord / StringRecord / string string \u00b6 [jvm]\\ val string : String","title":"String"},{"location":"api/shark-hprof/shark/-hprof-record/-string-record/string/#string","text":"[jvm]\\ val string : String","title":"string"},{"location":"api/shark-hprof/shark/-hprof-record-reader/","text":"// shark-hprof / shark / HprofRecordReader HprofRecordReader \u00b6 [jvm]\\ class HprofRecordReader Reads hprof content from an Okio BufferedSource . Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share /demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev /perflib/src/main/java/com/android/tools/perflib Not thread safe, should be used from a single thread. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary readBoolean [jvm] fun readBoolean (): Boolean readBooleanArray [jvm] fun readBooleanArray (arrayLength: Int ): BooleanArray readByte [jvm] fun readByte (): Byte readByteArray [jvm] fun readByteArray (byteCount: Int ): ByteArray readChar [jvm] fun readChar (): Char readCharArray [jvm] fun readCharArray (arrayLength: Int ): CharArray readClassDumpRecord [jvm] fun readClassDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag. readDebuggerGcRootRecord [jvm] fun readDebuggerGcRootRecord (): GcRoot.Debugger readDouble [jvm] fun readDouble (): Double readDoubleArray [jvm] fun readDoubleArray (arrayLength: Int ): DoubleArray readFinalizingGcRootRecord [jvm] fun readFinalizingGcRootRecord (): GcRoot.Finalizing readFloat [jvm] fun readFloat (): Float readFloatArray [jvm] fun readFloatArray (arrayLength: Int ): FloatArray readHeapDumpInfoRecord [jvm] fun readHeapDumpInfoRecord (): HprofRecord.HeapDumpRecord.HeapDumpInfoRecord readId [jvm] fun readId (): Long readIdArray [jvm] fun readIdArray (arrayLength: Int ): LongArray readInstanceDumpRecord [jvm] fun readInstanceDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag. readInt [jvm] fun readInt (): Int readIntArray [jvm] fun readIntArray (arrayLength: Int ): IntArray readInternedStringGcRootRecord [jvm] fun readInternedStringGcRootRecord (): GcRoot.InternedString readJavaFrameGcRootRecord [jvm] fun readJavaFrameGcRootRecord (): GcRoot.JavaFrame readJniGlobalGcRootRecord [jvm] fun readJniGlobalGcRootRecord (): GcRoot.JniGlobal readJniLocalGcRootRecord [jvm] fun readJniLocalGcRootRecord (): GcRoot.JniLocal readJniMonitorGcRootRecord [jvm] fun readJniMonitorGcRootRecord (): GcRoot.JniMonitor readLoadClassRecord [jvm] fun readLoadClassRecord (): HprofRecord.LoadClassRecord readLong [jvm] fun readLong (): Long readLongArray [jvm] fun readLongArray (arrayLength: Int ): LongArray readMonitorUsedGcRootRecord [jvm] fun readMonitorUsedGcRootRecord (): GcRoot.MonitorUsed readNativeStackGcRootRecord [jvm] fun readNativeStackGcRootRecord (): GcRoot.NativeStack readObjectArrayDumpRecord [jvm] fun readObjectArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag. readPrimitiveArrayDumpRecord [jvm] fun readPrimitiveArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag. readReferenceCleanupGcRootRecord [jvm] fun readReferenceCleanupGcRootRecord (): GcRoot.ReferenceCleanup readShort [jvm] fun readShort (): Short readShortArray [jvm] fun readShortArray (arrayLength: Int ): ShortArray readStackFrameRecord [jvm] fun readStackFrameRecord (): HprofRecord.StackFrameRecord readStackTraceRecord [jvm] fun readStackTraceRecord (): HprofRecord.StackTraceRecord readStickyClassGcRootRecord [jvm] fun readStickyClassGcRootRecord (): GcRoot.StickyClass readString [jvm] fun readString (byteCount: Int , charset: Charset ): String readStringRecord [jvm] fun readStringRecord (length: Long ): HprofRecord.StringRecord readThreadBlockGcRootRecord [jvm] fun readThreadBlockGcRootRecord (): GcRoot.ThreadBlock readThreadObjectGcRootRecord [jvm] fun readThreadObjectGcRootRecord (): GcRoot.ThreadObject readUnknownGcRootRecord [jvm] fun readUnknownGcRootRecord (): GcRoot.Unknown readUnreachableGcRootRecord [jvm] fun readUnreachableGcRootRecord (): GcRoot.Unreachable readUnsignedByte [jvm] fun readUnsignedByte (): Int readUnsignedInt [jvm] fun readUnsignedInt (): Long readUnsignedShort [jvm] fun readUnsignedShort (): Int readUtf8 [jvm] fun readUtf8 (byteCount: Long ): String readValue [jvm] fun readValue (type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type. readVmInternalGcRootRecord [jvm] fun readVmInternalGcRootRecord (): GcRoot.VmInternal sizeOf [jvm] fun sizeOf (type: Int ): Int skip [jvm] fun skip (byteCount: Int ) fun skip (byteCount: Long ) skipClassDumpConstantPool [jvm] fun skipClassDumpConstantPool () skipClassDumpFields [jvm] fun skipClassDumpFields () skipClassDumpHeader [jvm] fun skipClassDumpHeader () skipClassDumpRecord [jvm] fun skipClassDumpRecord () skipClassDumpStaticFields [jvm] fun skipClassDumpStaticFields () skipHeapDumpInfoRecord [jvm] fun skipHeapDumpInfoRecord () skipInstanceDumpRecord [jvm] fun skipInstanceDumpRecord () skipObjectArrayDumpRecord [jvm] fun skipObjectArrayDumpRecord () skipPrimitiveArrayDumpRecord [jvm] fun skipPrimitiveArrayDumpRecord () Properties \u00b6 Name Summary bytesRead [jvm] var bytesRead : Long = 0 How many bytes this reader has read from source. Can only increase.","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-reader/#hprofrecordreader","text":"[jvm]\\ class HprofRecordReader Reads hprof content from an Okio BufferedSource . Binary Dump Format reference: http://hg.openjdk.java.net/jdk6/jdk6/jdk/raw-file/tip/src/share /demo/jvmti/hprof/manual.html#mozTocId848088 The Android Hprof format differs in some ways from that reference. This parser implementation is largely adapted from https://android.googlesource.com/platform/tools/base/+/studio-master-dev /perflib/src/main/java/com/android/tools/perflib Not thread safe, should be used from a single thread.","title":"HprofRecordReader"},{"location":"api/shark-hprof/shark/-hprof-record-reader/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record-reader/#functions","text":"Name Summary readBoolean [jvm] fun readBoolean (): Boolean readBooleanArray [jvm] fun readBooleanArray (arrayLength: Int ): BooleanArray readByte [jvm] fun readByte (): Byte readByteArray [jvm] fun readByteArray (byteCount: Int ): ByteArray readChar [jvm] fun readChar (): Char readCharArray [jvm] fun readCharArray (arrayLength: Int ): CharArray readClassDumpRecord [jvm] fun readClassDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag. readDebuggerGcRootRecord [jvm] fun readDebuggerGcRootRecord (): GcRoot.Debugger readDouble [jvm] fun readDouble (): Double readDoubleArray [jvm] fun readDoubleArray (arrayLength: Int ): DoubleArray readFinalizingGcRootRecord [jvm] fun readFinalizingGcRootRecord (): GcRoot.Finalizing readFloat [jvm] fun readFloat (): Float readFloatArray [jvm] fun readFloatArray (arrayLength: Int ): FloatArray readHeapDumpInfoRecord [jvm] fun readHeapDumpInfoRecord (): HprofRecord.HeapDumpRecord.HeapDumpInfoRecord readId [jvm] fun readId (): Long readIdArray [jvm] fun readIdArray (arrayLength: Int ): LongArray readInstanceDumpRecord [jvm] fun readInstanceDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag. readInt [jvm] fun readInt (): Int readIntArray [jvm] fun readIntArray (arrayLength: Int ): IntArray readInternedStringGcRootRecord [jvm] fun readInternedStringGcRootRecord (): GcRoot.InternedString readJavaFrameGcRootRecord [jvm] fun readJavaFrameGcRootRecord (): GcRoot.JavaFrame readJniGlobalGcRootRecord [jvm] fun readJniGlobalGcRootRecord (): GcRoot.JniGlobal readJniLocalGcRootRecord [jvm] fun readJniLocalGcRootRecord (): GcRoot.JniLocal readJniMonitorGcRootRecord [jvm] fun readJniMonitorGcRootRecord (): GcRoot.JniMonitor readLoadClassRecord [jvm] fun readLoadClassRecord (): HprofRecord.LoadClassRecord readLong [jvm] fun readLong (): Long readLongArray [jvm] fun readLongArray (arrayLength: Int ): LongArray readMonitorUsedGcRootRecord [jvm] fun readMonitorUsedGcRootRecord (): GcRoot.MonitorUsed readNativeStackGcRootRecord [jvm] fun readNativeStackGcRootRecord (): GcRoot.NativeStack readObjectArrayDumpRecord [jvm] fun readObjectArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag. readPrimitiveArrayDumpRecord [jvm] fun readPrimitiveArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag. readReferenceCleanupGcRootRecord [jvm] fun readReferenceCleanupGcRootRecord (): GcRoot.ReferenceCleanup readShort [jvm] fun readShort (): Short readShortArray [jvm] fun readShortArray (arrayLength: Int ): ShortArray readStackFrameRecord [jvm] fun readStackFrameRecord (): HprofRecord.StackFrameRecord readStackTraceRecord [jvm] fun readStackTraceRecord (): HprofRecord.StackTraceRecord readStickyClassGcRootRecord [jvm] fun readStickyClassGcRootRecord (): GcRoot.StickyClass readString [jvm] fun readString (byteCount: Int , charset: Charset ): String readStringRecord [jvm] fun readStringRecord (length: Long ): HprofRecord.StringRecord readThreadBlockGcRootRecord [jvm] fun readThreadBlockGcRootRecord (): GcRoot.ThreadBlock readThreadObjectGcRootRecord [jvm] fun readThreadObjectGcRootRecord (): GcRoot.ThreadObject readUnknownGcRootRecord [jvm] fun readUnknownGcRootRecord (): GcRoot.Unknown readUnreachableGcRootRecord [jvm] fun readUnreachableGcRootRecord (): GcRoot.Unreachable readUnsignedByte [jvm] fun readUnsignedByte (): Int readUnsignedInt [jvm] fun readUnsignedInt (): Long readUnsignedShort [jvm] fun readUnsignedShort (): Int readUtf8 [jvm] fun readUtf8 (byteCount: Long ): String readValue [jvm] fun readValue (type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type. readVmInternalGcRootRecord [jvm] fun readVmInternalGcRootRecord (): GcRoot.VmInternal sizeOf [jvm] fun sizeOf (type: Int ): Int skip [jvm] fun skip (byteCount: Int ) fun skip (byteCount: Long ) skipClassDumpConstantPool [jvm] fun skipClassDumpConstantPool () skipClassDumpFields [jvm] fun skipClassDumpFields () skipClassDumpHeader [jvm] fun skipClassDumpHeader () skipClassDumpRecord [jvm] fun skipClassDumpRecord () skipClassDumpStaticFields [jvm] fun skipClassDumpStaticFields () skipHeapDumpInfoRecord [jvm] fun skipHeapDumpInfoRecord () skipInstanceDumpRecord [jvm] fun skipInstanceDumpRecord () skipObjectArrayDumpRecord [jvm] fun skipObjectArrayDumpRecord () skipPrimitiveArrayDumpRecord [jvm] fun skipPrimitiveArrayDumpRecord ()","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-record-reader/#properties","text":"Name Summary bytesRead [jvm] var bytesRead : Long = 0 How many bytes this reader has read from source. Can only increase.","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-reader/bytes-read/","text":"// shark-hprof / shark / HprofRecordReader / bytesRead bytesRead \u00b6 [jvm]\\ var bytesRead : Long = 0 How many bytes this reader has read from source. Can only increase.","title":"Bytes read"},{"location":"api/shark-hprof/shark/-hprof-record-reader/bytes-read/#bytesread","text":"[jvm]\\ var bytesRead : Long = 0 How many bytes this reader has read from source. Can only increase.","title":"bytesRead"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-boolean-array/","text":"// shark-hprof / shark / HprofRecordReader / readBooleanArray readBooleanArray \u00b6 [jvm]\\ fun readBooleanArray (arrayLength: Int ): BooleanArray","title":"Read boolean array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-boolean-array/#readbooleanarray","text":"[jvm]\\ fun readBooleanArray (arrayLength: Int ): BooleanArray","title":"readBooleanArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-boolean/","text":"// shark-hprof / shark / HprofRecordReader / readBoolean readBoolean \u00b6 [jvm]\\ fun readBoolean (): Boolean","title":"Read boolean"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-boolean/#readboolean","text":"[jvm]\\ fun readBoolean (): Boolean","title":"readBoolean"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-byte-array/","text":"// shark-hprof / shark / HprofRecordReader / readByteArray readByteArray \u00b6 [jvm]\\ fun readByteArray (byteCount: Int ): ByteArray","title":"Read byte array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-byte-array/#readbytearray","text":"[jvm]\\ fun readByteArray (byteCount: Int ): ByteArray","title":"readByteArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-byte/","text":"// shark-hprof / shark / HprofRecordReader / readByte readByte \u00b6 [jvm]\\ fun readByte (): Byte","title":"Read byte"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-byte/#readbyte","text":"[jvm]\\ fun readByte (): Byte","title":"readByte"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-char-array/","text":"// shark-hprof / shark / HprofRecordReader / readCharArray readCharArray \u00b6 [jvm]\\ fun readCharArray (arrayLength: Int ): CharArray","title":"Read char array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-char-array/#readchararray","text":"[jvm]\\ fun readCharArray (arrayLength: Int ): CharArray","title":"readCharArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-char/","text":"// shark-hprof / shark / HprofRecordReader / readChar readChar \u00b6 [jvm]\\ fun readChar (): Char","title":"Read char"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-char/#readchar","text":"[jvm]\\ fun readChar (): Char","title":"readChar"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-class-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / readClassDumpRecord readClassDumpRecord \u00b6 [jvm]\\ fun readClassDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag.","title":"Read class dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-class-dump-record/#readclassdumprecord","text":"[jvm]\\ fun readClassDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ClassDumpRecord Reads a full class record after a class dump tag.","title":"readClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-debugger-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readDebuggerGcRootRecord readDebuggerGcRootRecord \u00b6 [jvm]\\ fun readDebuggerGcRootRecord (): GcRoot.Debugger","title":"Read debugger gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-debugger-gc-root-record/#readdebuggergcrootrecord","text":"[jvm]\\ fun readDebuggerGcRootRecord (): GcRoot.Debugger","title":"readDebuggerGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-double-array/","text":"// shark-hprof / shark / HprofRecordReader / readDoubleArray readDoubleArray \u00b6 [jvm]\\ fun readDoubleArray (arrayLength: Int ): DoubleArray","title":"Read double array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-double-array/#readdoublearray","text":"[jvm]\\ fun readDoubleArray (arrayLength: Int ): DoubleArray","title":"readDoubleArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-double/","text":"// shark-hprof / shark / HprofRecordReader / readDouble readDouble \u00b6 [jvm]\\ fun readDouble (): Double","title":"Read double"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-double/#readdouble","text":"[jvm]\\ fun readDouble (): Double","title":"readDouble"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-finalizing-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readFinalizingGcRootRecord readFinalizingGcRootRecord \u00b6 [jvm]\\ fun readFinalizingGcRootRecord (): GcRoot.Finalizing","title":"Read finalizing gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-finalizing-gc-root-record/#readfinalizinggcrootrecord","text":"[jvm]\\ fun readFinalizingGcRootRecord (): GcRoot.Finalizing","title":"readFinalizingGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-float-array/","text":"// shark-hprof / shark / HprofRecordReader / readFloatArray readFloatArray \u00b6 [jvm]\\ fun readFloatArray (arrayLength: Int ): FloatArray","title":"Read float array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-float-array/#readfloatarray","text":"[jvm]\\ fun readFloatArray (arrayLength: Int ): FloatArray","title":"readFloatArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-float/","text":"// shark-hprof / shark / HprofRecordReader / readFloat readFloat \u00b6 [jvm]\\ fun readFloat (): Float","title":"Read float"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-float/#readfloat","text":"[jvm]\\ fun readFloat (): Float","title":"readFloat"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-heap-dump-info-record/","text":"// shark-hprof / shark / HprofRecordReader / readHeapDumpInfoRecord readHeapDumpInfoRecord \u00b6 [jvm]\\ fun readHeapDumpInfoRecord (): HprofRecord.HeapDumpRecord.HeapDumpInfoRecord","title":"Read heap dump info record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-heap-dump-info-record/#readheapdumpinforecord","text":"[jvm]\\ fun readHeapDumpInfoRecord (): HprofRecord.HeapDumpRecord.HeapDumpInfoRecord","title":"readHeapDumpInfoRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-id-array/","text":"// shark-hprof / shark / HprofRecordReader / readIdArray readIdArray \u00b6 [jvm]\\ fun readIdArray (arrayLength: Int ): LongArray","title":"Read id array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-id-array/#readidarray","text":"[jvm]\\ fun readIdArray (arrayLength: Int ): LongArray","title":"readIdArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-id/","text":"// shark-hprof / shark / HprofRecordReader / readId readId \u00b6 [jvm]\\ fun readId (): Long","title":"Read id"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-id/#readid","text":"[jvm]\\ fun readId (): Long","title":"readId"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-instance-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / readInstanceDumpRecord readInstanceDumpRecord \u00b6 [jvm]\\ fun readInstanceDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag.","title":"Read instance dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-instance-dump-record/#readinstancedumprecord","text":"[jvm]\\ fun readInstanceDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.InstanceDumpRecord Reads a full instance record after a instance dump tag.","title":"readInstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-int-array/","text":"// shark-hprof / shark / HprofRecordReader / readIntArray readIntArray \u00b6 [jvm]\\ fun readIntArray (arrayLength: Int ): IntArray","title":"Read int array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-int-array/#readintarray","text":"[jvm]\\ fun readIntArray (arrayLength: Int ): IntArray","title":"readIntArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-int/","text":"// shark-hprof / shark / HprofRecordReader / readInt readInt \u00b6 [jvm]\\ fun readInt (): Int","title":"Read int"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-int/#readint","text":"[jvm]\\ fun readInt (): Int","title":"readInt"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-interned-string-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readInternedStringGcRootRecord readInternedStringGcRootRecord \u00b6 [jvm]\\ fun readInternedStringGcRootRecord (): GcRoot.InternedString","title":"Read interned string gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-interned-string-gc-root-record/#readinternedstringgcrootrecord","text":"[jvm]\\ fun readInternedStringGcRootRecord (): GcRoot.InternedString","title":"readInternedStringGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-java-frame-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readJavaFrameGcRootRecord readJavaFrameGcRootRecord \u00b6 [jvm]\\ fun readJavaFrameGcRootRecord (): GcRoot.JavaFrame","title":"Read java frame gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-java-frame-gc-root-record/#readjavaframegcrootrecord","text":"[jvm]\\ fun readJavaFrameGcRootRecord (): GcRoot.JavaFrame","title":"readJavaFrameGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-jni-global-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readJniGlobalGcRootRecord readJniGlobalGcRootRecord \u00b6 [jvm]\\ fun readJniGlobalGcRootRecord (): GcRoot.JniGlobal","title":"Read jni global gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-jni-global-gc-root-record/#readjniglobalgcrootrecord","text":"[jvm]\\ fun readJniGlobalGcRootRecord (): GcRoot.JniGlobal","title":"readJniGlobalGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-jni-local-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readJniLocalGcRootRecord readJniLocalGcRootRecord \u00b6 [jvm]\\ fun readJniLocalGcRootRecord (): GcRoot.JniLocal","title":"Read jni local gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-jni-local-gc-root-record/#readjnilocalgcrootrecord","text":"[jvm]\\ fun readJniLocalGcRootRecord (): GcRoot.JniLocal","title":"readJniLocalGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-jni-monitor-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readJniMonitorGcRootRecord readJniMonitorGcRootRecord \u00b6 [jvm]\\ fun readJniMonitorGcRootRecord (): GcRoot.JniMonitor","title":"Read jni monitor gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-jni-monitor-gc-root-record/#readjnimonitorgcrootrecord","text":"[jvm]\\ fun readJniMonitorGcRootRecord (): GcRoot.JniMonitor","title":"readJniMonitorGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-load-class-record/","text":"// shark-hprof / shark / HprofRecordReader / readLoadClassRecord readLoadClassRecord \u00b6 [jvm]\\ fun readLoadClassRecord (): HprofRecord.LoadClassRecord","title":"Read load class record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-load-class-record/#readloadclassrecord","text":"[jvm]\\ fun readLoadClassRecord (): HprofRecord.LoadClassRecord","title":"readLoadClassRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-long-array/","text":"// shark-hprof / shark / HprofRecordReader / readLongArray readLongArray \u00b6 [jvm]\\ fun readLongArray (arrayLength: Int ): LongArray","title":"Read long array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-long-array/#readlongarray","text":"[jvm]\\ fun readLongArray (arrayLength: Int ): LongArray","title":"readLongArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-long/","text":"// shark-hprof / shark / HprofRecordReader / readLong readLong \u00b6 [jvm]\\ fun readLong (): Long","title":"Read long"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-long/#readlong","text":"[jvm]\\ fun readLong (): Long","title":"readLong"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-monitor-used-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readMonitorUsedGcRootRecord readMonitorUsedGcRootRecord \u00b6 [jvm]\\ fun readMonitorUsedGcRootRecord (): GcRoot.MonitorUsed","title":"Read monitor used gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-monitor-used-gc-root-record/#readmonitorusedgcrootrecord","text":"[jvm]\\ fun readMonitorUsedGcRootRecord (): GcRoot.MonitorUsed","title":"readMonitorUsedGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-native-stack-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readNativeStackGcRootRecord readNativeStackGcRootRecord \u00b6 [jvm]\\ fun readNativeStackGcRootRecord (): GcRoot.NativeStack","title":"Read native stack gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-native-stack-gc-root-record/#readnativestackgcrootrecord","text":"[jvm]\\ fun readNativeStackGcRootRecord (): GcRoot.NativeStack","title":"readNativeStackGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-object-array-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / readObjectArrayDumpRecord readObjectArrayDumpRecord \u00b6 [jvm]\\ fun readObjectArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag.","title":"Read object array dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-object-array-dump-record/#readobjectarraydumprecord","text":"[jvm]\\ fun readObjectArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.ObjectArrayDumpRecord Reads a full object array record after a object array dump tag.","title":"readObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-primitive-array-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / readPrimitiveArrayDumpRecord readPrimitiveArrayDumpRecord \u00b6 [jvm]\\ fun readPrimitiveArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag.","title":"Read primitive array dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-primitive-array-dump-record/#readprimitivearraydumprecord","text":"[jvm]\\ fun readPrimitiveArrayDumpRecord (): HprofRecord.HeapDumpRecord.ObjectRecord.PrimitiveArrayDumpRecord Reads a full primitive array record after a primitive array dump tag.","title":"readPrimitiveArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-reference-cleanup-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readReferenceCleanupGcRootRecord readReferenceCleanupGcRootRecord \u00b6 [jvm]\\ fun readReferenceCleanupGcRootRecord (): GcRoot.ReferenceCleanup","title":"Read reference cleanup gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-reference-cleanup-gc-root-record/#readreferencecleanupgcrootrecord","text":"[jvm]\\ fun readReferenceCleanupGcRootRecord (): GcRoot.ReferenceCleanup","title":"readReferenceCleanupGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-short-array/","text":"// shark-hprof / shark / HprofRecordReader / readShortArray readShortArray \u00b6 [jvm]\\ fun readShortArray (arrayLength: Int ): ShortArray","title":"Read short array"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-short-array/#readshortarray","text":"[jvm]\\ fun readShortArray (arrayLength: Int ): ShortArray","title":"readShortArray"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-short/","text":"// shark-hprof / shark / HprofRecordReader / readShort readShort \u00b6 [jvm]\\ fun readShort (): Short","title":"Read short"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-short/#readshort","text":"[jvm]\\ fun readShort (): Short","title":"readShort"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-stack-frame-record/","text":"// shark-hprof / shark / HprofRecordReader / readStackFrameRecord readStackFrameRecord \u00b6 [jvm]\\ fun readStackFrameRecord (): HprofRecord.StackFrameRecord","title":"Read stack frame record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-stack-frame-record/#readstackframerecord","text":"[jvm]\\ fun readStackFrameRecord (): HprofRecord.StackFrameRecord","title":"readStackFrameRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-stack-trace-record/","text":"// shark-hprof / shark / HprofRecordReader / readStackTraceRecord readStackTraceRecord \u00b6 [jvm]\\ fun readStackTraceRecord (): HprofRecord.StackTraceRecord","title":"Read stack trace record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-stack-trace-record/#readstacktracerecord","text":"[jvm]\\ fun readStackTraceRecord (): HprofRecord.StackTraceRecord","title":"readStackTraceRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-sticky-class-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readStickyClassGcRootRecord readStickyClassGcRootRecord \u00b6 [jvm]\\ fun readStickyClassGcRootRecord (): GcRoot.StickyClass","title":"Read sticky class gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-sticky-class-gc-root-record/#readstickyclassgcrootrecord","text":"[jvm]\\ fun readStickyClassGcRootRecord (): GcRoot.StickyClass","title":"readStickyClassGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-string-record/","text":"// shark-hprof / shark / HprofRecordReader / readStringRecord readStringRecord \u00b6 [jvm]\\ fun readStringRecord (length: Long ): HprofRecord.StringRecord","title":"Read string record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-string-record/#readstringrecord","text":"[jvm]\\ fun readStringRecord (length: Long ): HprofRecord.StringRecord","title":"readStringRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-string/","text":"// shark-hprof / shark / HprofRecordReader / readString readString \u00b6 [jvm]\\ fun readString (byteCount: Int , charset: Charset ): String","title":"Read string"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-string/#readstring","text":"[jvm]\\ fun readString (byteCount: Int , charset: Charset ): String","title":"readString"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-thread-block-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readThreadBlockGcRootRecord readThreadBlockGcRootRecord \u00b6 [jvm]\\ fun readThreadBlockGcRootRecord (): GcRoot.ThreadBlock","title":"Read thread block gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-thread-block-gc-root-record/#readthreadblockgcrootrecord","text":"[jvm]\\ fun readThreadBlockGcRootRecord (): GcRoot.ThreadBlock","title":"readThreadBlockGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-thread-object-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readThreadObjectGcRootRecord readThreadObjectGcRootRecord \u00b6 [jvm]\\ fun readThreadObjectGcRootRecord (): GcRoot.ThreadObject","title":"Read thread object gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-thread-object-gc-root-record/#readthreadobjectgcrootrecord","text":"[jvm]\\ fun readThreadObjectGcRootRecord (): GcRoot.ThreadObject","title":"readThreadObjectGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unknown-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readUnknownGcRootRecord readUnknownGcRootRecord \u00b6 [jvm]\\ fun readUnknownGcRootRecord (): GcRoot.Unknown","title":"Read unknown gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unknown-gc-root-record/#readunknowngcrootrecord","text":"[jvm]\\ fun readUnknownGcRootRecord (): GcRoot.Unknown","title":"readUnknownGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unreachable-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readUnreachableGcRootRecord readUnreachableGcRootRecord \u00b6 [jvm]\\ fun readUnreachableGcRootRecord (): GcRoot.Unreachable","title":"Read unreachable gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unreachable-gc-root-record/#readunreachablegcrootrecord","text":"[jvm]\\ fun readUnreachableGcRootRecord (): GcRoot.Unreachable","title":"readUnreachableGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unsigned-byte/","text":"// shark-hprof / shark / HprofRecordReader / readUnsignedByte readUnsignedByte \u00b6 [jvm]\\ fun readUnsignedByte (): Int","title":"Read unsigned byte"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unsigned-byte/#readunsignedbyte","text":"[jvm]\\ fun readUnsignedByte (): Int","title":"readUnsignedByte"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unsigned-int/","text":"// shark-hprof / shark / HprofRecordReader / readUnsignedInt readUnsignedInt \u00b6 [jvm]\\ fun readUnsignedInt (): Long","title":"Read unsigned int"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unsigned-int/#readunsignedint","text":"[jvm]\\ fun readUnsignedInt (): Long","title":"readUnsignedInt"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unsigned-short/","text":"// shark-hprof / shark / HprofRecordReader / readUnsignedShort readUnsignedShort \u00b6 [jvm]\\ fun readUnsignedShort (): Int","title":"Read unsigned short"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-unsigned-short/#readunsignedshort","text":"[jvm]\\ fun readUnsignedShort (): Int","title":"readUnsignedShort"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-utf8/","text":"// shark-hprof / shark / HprofRecordReader / readUtf8 readUtf8 \u00b6 [jvm]\\ fun readUtf8 (byteCount: Long ): String","title":"Read utf8"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-utf8/#readutf8","text":"[jvm]\\ fun readUtf8 (byteCount: Long ): String","title":"readUtf8"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-value/","text":"// shark-hprof / shark / HprofRecordReader / readValue readValue \u00b6 [jvm]\\ fun readValue (type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"Read value"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-value/#readvalue","text":"[jvm]\\ fun readValue (type: Int ): ValueHolder Reads a value in the heap dump, which can be a reference or a primitive type.","title":"readValue"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-vm-internal-gc-root-record/","text":"// shark-hprof / shark / HprofRecordReader / readVmInternalGcRootRecord readVmInternalGcRootRecord \u00b6 [jvm]\\ fun readVmInternalGcRootRecord (): GcRoot.VmInternal","title":"Read vm internal gc root record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/read-vm-internal-gc-root-record/#readvminternalgcrootrecord","text":"[jvm]\\ fun readVmInternalGcRootRecord (): GcRoot.VmInternal","title":"readVmInternalGcRootRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/size-of/","text":"// shark-hprof / shark / HprofRecordReader / sizeOf sizeOf \u00b6 [jvm]\\ fun sizeOf (type: Int ): Int","title":"Size of"},{"location":"api/shark-hprof/shark/-hprof-record-reader/size-of/#sizeof","text":"[jvm]\\ fun sizeOf (type: Int ): Int","title":"sizeOf"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-constant-pool/","text":"// shark-hprof / shark / HprofRecordReader / skipClassDumpConstantPool skipClassDumpConstantPool \u00b6 [jvm]\\ fun skipClassDumpConstantPool ()","title":"Skip class dump constant pool"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-constant-pool/#skipclassdumpconstantpool","text":"[jvm]\\ fun skipClassDumpConstantPool ()","title":"skipClassDumpConstantPool"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-fields/","text":"// shark-hprof / shark / HprofRecordReader / skipClassDumpFields skipClassDumpFields \u00b6 [jvm]\\ fun skipClassDumpFields ()","title":"Skip class dump fields"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-fields/#skipclassdumpfields","text":"[jvm]\\ fun skipClassDumpFields ()","title":"skipClassDumpFields"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-header/","text":"// shark-hprof / shark / HprofRecordReader / skipClassDumpHeader skipClassDumpHeader \u00b6 [jvm]\\ fun skipClassDumpHeader ()","title":"Skip class dump header"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-header/#skipclassdumpheader","text":"[jvm]\\ fun skipClassDumpHeader ()","title":"skipClassDumpHeader"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / skipClassDumpRecord skipClassDumpRecord \u00b6 [jvm]\\ fun skipClassDumpRecord ()","title":"Skip class dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-record/#skipclassdumprecord","text":"[jvm]\\ fun skipClassDumpRecord ()","title":"skipClassDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-static-fields/","text":"// shark-hprof / shark / HprofRecordReader / skipClassDumpStaticFields skipClassDumpStaticFields \u00b6 [jvm]\\ fun skipClassDumpStaticFields ()","title":"Skip class dump static fields"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-class-dump-static-fields/#skipclassdumpstaticfields","text":"[jvm]\\ fun skipClassDumpStaticFields ()","title":"skipClassDumpStaticFields"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-heap-dump-info-record/","text":"// shark-hprof / shark / HprofRecordReader / skipHeapDumpInfoRecord skipHeapDumpInfoRecord \u00b6 [jvm]\\ fun skipHeapDumpInfoRecord ()","title":"Skip heap dump info record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-heap-dump-info-record/#skipheapdumpinforecord","text":"[jvm]\\ fun skipHeapDumpInfoRecord ()","title":"skipHeapDumpInfoRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-instance-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / skipInstanceDumpRecord skipInstanceDumpRecord \u00b6 [jvm]\\ fun skipInstanceDumpRecord ()","title":"Skip instance dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-instance-dump-record/#skipinstancedumprecord","text":"[jvm]\\ fun skipInstanceDumpRecord ()","title":"skipInstanceDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-object-array-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / skipObjectArrayDumpRecord skipObjectArrayDumpRecord \u00b6 [jvm]\\ fun skipObjectArrayDumpRecord ()","title":"Skip object array dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-object-array-dump-record/#skipobjectarraydumprecord","text":"[jvm]\\ fun skipObjectArrayDumpRecord ()","title":"skipObjectArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-primitive-array-dump-record/","text":"// shark-hprof / shark / HprofRecordReader / skipPrimitiveArrayDumpRecord skipPrimitiveArrayDumpRecord \u00b6 [jvm]\\ fun skipPrimitiveArrayDumpRecord ()","title":"Skip primitive array dump record"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip-primitive-array-dump-record/#skipprimitivearraydumprecord","text":"[jvm]\\ fun skipPrimitiveArrayDumpRecord ()","title":"skipPrimitiveArrayDumpRecord"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip/","text":"// shark-hprof / shark / HprofRecordReader / skip skip \u00b6 [jvm]\\ fun skip (byteCount: Int ) fun skip (byteCount: Long )","title":"Skip"},{"location":"api/shark-hprof/shark/-hprof-record-reader/skip/#skip","text":"[jvm]\\ fun skip (byteCount: Int ) fun skip (byteCount: Long )","title":"skip"},{"location":"api/shark-hprof/shark/-hprof-record-reader/-companion/","text":"// shark-hprof / shark / HprofRecordReader / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-reader/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-hprof-record-tag/","text":"// shark-hprof / shark / HprofRecordTag HprofRecordTag \u00b6 [jvm]\\ enum HprofRecordTag : Enum < HprofRecordTag > Entries \u00b6 PRIMITIVE_ARRAY_DUMP [jvm] PRIMITIVE_ARRAY_DUMP (35) OBJECT_ARRAY_DUMP [jvm] OBJECT_ARRAY_DUMP (34) INSTANCE_DUMP [jvm] INSTANCE_DUMP (33) CLASS_DUMP [jvm] CLASS_DUMP (32) PRIMITIVE_ARRAY_NODATA [jvm] PRIMITIVE_ARRAY_NODATA (195) ROOT_UNREACHABLE [jvm] ROOT_UNREACHABLE (144) ROOT_JNI_MONITOR [jvm] ROOT_JNI_MONITOR (142) ROOT_VM_INTERNAL [jvm] ROOT_VM_INTERNAL (141) ROOT_REFERENCE_CLEANUP [jvm] ROOT_REFERENCE_CLEANUP (140) ROOT_DEBUGGER [jvm] ROOT_DEBUGGER (139) ROOT_FINALIZING [jvm] ROOT_FINALIZING (138) ROOT_INTERNED_STRING [jvm] ROOT_INTERNED_STRING (137) HEAP_DUMP_INFO [jvm] HEAP_DUMP_INFO (254) Android format addition ROOT_THREAD_OBJECT [jvm] ROOT_THREAD_OBJECT (8) ROOT_MONITOR_USED [jvm] ROOT_MONITOR_USED (7) ROOT_THREAD_BLOCK [jvm] ROOT_THREAD_BLOCK (6) ROOT_STICKY_CLASS [jvm] ROOT_STICKY_CLASS (5) ROOT_NATIVE_STACK [jvm] ROOT_NATIVE_STACK (4) ROOT_JAVA_FRAME [jvm] ROOT_JAVA_FRAME (3) ROOT_JNI_LOCAL [jvm] ROOT_JNI_LOCAL (2) ROOT_JNI_GLOBAL [jvm] ROOT_JNI_GLOBAL (1) ROOT_UNKNOWN [jvm] ROOT_UNKNOWN (255) CONTROL_SETTINGS [jvm] CONTROL_SETTINGS (14) CPU_SAMPLES [jvm] CPU_SAMPLES (13) HEAP_DUMP_END [jvm] HEAP_DUMP_END (44) HEAP_DUMP_SEGMENT [jvm] HEAP_DUMP_SEGMENT (28) HEAP_DUMP [jvm] HEAP_DUMP (12) END_THREAD [jvm] END_THREAD (11) START_THREAD [jvm] START_THREAD (10) HEAP_SUMMARY [jvm] HEAP_SUMMARY (7) ALLOC_SITES [jvm] ALLOC_SITES (6) STACK_TRACE [jvm] STACK_TRACE (5) STACK_FRAME [jvm] STACK_FRAME (4) UNLOAD_CLASS [jvm] UNLOAD_CLASS (3) LOAD_CLASS [jvm] LOAD_CLASS (2) STRING_IN_UTF8 [jvm] STRING_IN_UTF8 (1) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/#hprofrecordtag","text":"[jvm]\\ enum HprofRecordTag : Enum < HprofRecordTag >","title":"HprofRecordTag"},{"location":"api/shark-hprof/shark/-hprof-record-tag/#entries","text":"PRIMITIVE_ARRAY_DUMP [jvm] PRIMITIVE_ARRAY_DUMP (35) OBJECT_ARRAY_DUMP [jvm] OBJECT_ARRAY_DUMP (34) INSTANCE_DUMP [jvm] INSTANCE_DUMP (33) CLASS_DUMP [jvm] CLASS_DUMP (32) PRIMITIVE_ARRAY_NODATA [jvm] PRIMITIVE_ARRAY_NODATA (195) ROOT_UNREACHABLE [jvm] ROOT_UNREACHABLE (144) ROOT_JNI_MONITOR [jvm] ROOT_JNI_MONITOR (142) ROOT_VM_INTERNAL [jvm] ROOT_VM_INTERNAL (141) ROOT_REFERENCE_CLEANUP [jvm] ROOT_REFERENCE_CLEANUP (140) ROOT_DEBUGGER [jvm] ROOT_DEBUGGER (139) ROOT_FINALIZING [jvm] ROOT_FINALIZING (138) ROOT_INTERNED_STRING [jvm] ROOT_INTERNED_STRING (137) HEAP_DUMP_INFO [jvm] HEAP_DUMP_INFO (254) Android format addition ROOT_THREAD_OBJECT [jvm] ROOT_THREAD_OBJECT (8) ROOT_MONITOR_USED [jvm] ROOT_MONITOR_USED (7) ROOT_THREAD_BLOCK [jvm] ROOT_THREAD_BLOCK (6) ROOT_STICKY_CLASS [jvm] ROOT_STICKY_CLASS (5) ROOT_NATIVE_STACK [jvm] ROOT_NATIVE_STACK (4) ROOT_JAVA_FRAME [jvm] ROOT_JAVA_FRAME (3) ROOT_JNI_LOCAL [jvm] ROOT_JNI_LOCAL (2) ROOT_JNI_GLOBAL [jvm] ROOT_JNI_GLOBAL (1) ROOT_UNKNOWN [jvm] ROOT_UNKNOWN (255) CONTROL_SETTINGS [jvm] CONTROL_SETTINGS (14) CPU_SAMPLES [jvm] CPU_SAMPLES (13) HEAP_DUMP_END [jvm] HEAP_DUMP_END (44) HEAP_DUMP_SEGMENT [jvm] HEAP_DUMP_SEGMENT (28) HEAP_DUMP [jvm] HEAP_DUMP (12) END_THREAD [jvm] END_THREAD (11) START_THREAD [jvm] START_THREAD (10) HEAP_SUMMARY [jvm] HEAP_SUMMARY (7) ALLOC_SITES [jvm] ALLOC_SITES (6) STACK_TRACE [jvm] STACK_TRACE (5) STACK_FRAME [jvm] STACK_FRAME (4) UNLOAD_CLASS [jvm] UNLOAD_CLASS (3) LOAD_CLASS [jvm] LOAD_CLASS (2) STRING_IN_UTF8 [jvm] STRING_IN_UTF8 (1)","title":"Entries"},{"location":"api/shark-hprof/shark/-hprof-record-tag/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-record-tag/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/tag/","text":"// shark-hprof / shark / HprofRecordTag / tag tag \u00b6 [jvm]\\ val tag : Int","title":"Tag"},{"location":"api/shark-hprof/shark/-hprof-record-tag/tag/#tag","text":"[jvm]\\ val tag : Int","title":"tag"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-a-l-l-o-c_-s-i-t-e-s/","text":"// shark-hprof / shark / HprofRecordTag / ALLOC_SITES ALLOC_SITES \u00b6 [jvm]\\ ALLOC_SITES (6) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-a-l-l-o-c_-s-i-t-e-s/#alloc_sites","text":"[jvm]\\ ALLOC_SITES (6)","title":"ALLOC_SITES"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-a-l-l-o-c_-s-i-t-e-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-l-a-s-s_-d-u-m-p/","text":"// shark-hprof / shark / HprofRecordTag / CLASS_DUMP CLASS_DUMP \u00b6 [jvm]\\ CLASS_DUMP (32) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-l-a-s-s_-d-u-m-p/#class_dump","text":"[jvm]\\ CLASS_DUMP (32)","title":"CLASS_DUMP"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-l-a-s-s_-d-u-m-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-o-n-t-r-o-l_-s-e-t-t-i-n-g-s/","text":"// shark-hprof / shark / HprofRecordTag / CONTROL_SETTINGS CONTROL_SETTINGS \u00b6 [jvm]\\ CONTROL_SETTINGS (14) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-o-n-t-r-o-l_-s-e-t-t-i-n-g-s/#control_settings","text":"[jvm]\\ CONTROL_SETTINGS (14)","title":"CONTROL_SETTINGS"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-o-n-t-r-o-l_-s-e-t-t-i-n-g-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-p-u_-s-a-m-p-l-e-s/","text":"// shark-hprof / shark / HprofRecordTag / CPU_SAMPLES CPU_SAMPLES \u00b6 [jvm]\\ CPU_SAMPLES (13) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-p-u_-s-a-m-p-l-e-s/#cpu_samples","text":"[jvm]\\ CPU_SAMPLES (13)","title":"CPU_SAMPLES"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-c-p-u_-s-a-m-p-l-e-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-companion/","text":"// shark-hprof / shark / HprofRecordTag / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary rootTags [jvm] val rootTags : EnumSet < HprofRecordTag >","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-companion/#properties","text":"Name Summary rootTags [jvm] val rootTags : EnumSet < HprofRecordTag >","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-companion/root-tags/","text":"// shark-hprof / shark / HprofRecordTag / Companion / rootTags rootTags \u00b6 [jvm]\\ val rootTags : EnumSet < HprofRecordTag >","title":"Root tags"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-companion/root-tags/#roottags","text":"[jvm]\\ val rootTags : EnumSet < HprofRecordTag >","title":"rootTags"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-e-n-d_-t-h-r-e-a-d/","text":"// shark-hprof / shark / HprofRecordTag / END_THREAD END_THREAD \u00b6 [jvm]\\ END_THREAD (11) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-e-n-d_-t-h-r-e-a-d/#end_thread","text":"[jvm]\\ END_THREAD (11)","title":"END_THREAD"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-e-n-d_-t-h-r-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p/","text":"// shark-hprof / shark / HprofRecordTag / HEAP_DUMP HEAP_DUMP \u00b6 [jvm]\\ HEAP_DUMP (12) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p/#heap_dump","text":"[jvm]\\ HEAP_DUMP (12)","title":"HEAP_DUMP"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-e-n-d/","text":"// shark-hprof / shark / HprofRecordTag / HEAP_DUMP_END HEAP_DUMP_END \u00b6 [jvm]\\ HEAP_DUMP_END (44) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-e-n-d/#heap_dump_end","text":"[jvm]\\ HEAP_DUMP_END (44)","title":"HEAP_DUMP_END"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-e-n-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-i-n-f-o/","text":"// shark-hprof / shark / HprofRecordTag / HEAP_DUMP_INFO HEAP_DUMP_INFO \u00b6 [jvm]\\ HEAP_DUMP_INFO (254) Android format addition Specifies information about which heap certain objects came from. When a sub-tag of this type appears in a HPROF_HEAP_DUMP or HPROF_HEAP_DUMP_SEGMENT record, entries that follow it will be associated with the specified heap. The HEAP_DUMP_INFO data is reset at the end of the HEAP_DUMP[_SEGMENT]. Multiple HEAP_DUMP_INFO entries may appear in a single HEAP_DUMP[_SEGMENT]. Format: u1: Tag value (0xFE) u4: heap ID ID: heap name string ID Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-i-n-f-o/#heap_dump_info","text":"[jvm]\\ HEAP_DUMP_INFO (254) Android format addition Specifies information about which heap certain objects came from. When a sub-tag of this type appears in a HPROF_HEAP_DUMP or HPROF_HEAP_DUMP_SEGMENT record, entries that follow it will be associated with the specified heap. The HEAP_DUMP_INFO data is reset at the end of the HEAP_DUMP[_SEGMENT]. Multiple HEAP_DUMP_INFO entries may appear in a single HEAP_DUMP[_SEGMENT]. Format: u1: Tag value (0xFE) u4: heap ID ID: heap name string ID","title":"HEAP_DUMP_INFO"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-i-n-f-o/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-s-e-g-m-e-n-t/","text":"// shark-hprof / shark / HprofRecordTag / HEAP_DUMP_SEGMENT HEAP_DUMP_SEGMENT \u00b6 [jvm]\\ HEAP_DUMP_SEGMENT (28) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-s-e-g-m-e-n-t/#heap_dump_segment","text":"[jvm]\\ HEAP_DUMP_SEGMENT (28)","title":"HEAP_DUMP_SEGMENT"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-d-u-m-p_-s-e-g-m-e-n-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-s-u-m-m-a-r-y/","text":"// shark-hprof / shark / HprofRecordTag / HEAP_SUMMARY HEAP_SUMMARY \u00b6 [jvm]\\ HEAP_SUMMARY (7) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-s-u-m-m-a-r-y/#heap_summary","text":"[jvm]\\ HEAP_SUMMARY (7)","title":"HEAP_SUMMARY"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-h-e-a-p_-s-u-m-m-a-r-y/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-i-n-s-t-a-n-c-e_-d-u-m-p/","text":"// shark-hprof / shark / HprofRecordTag / INSTANCE_DUMP INSTANCE_DUMP \u00b6 [jvm]\\ INSTANCE_DUMP (33) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-i-n-s-t-a-n-c-e_-d-u-m-p/#instance_dump","text":"[jvm]\\ INSTANCE_DUMP (33)","title":"INSTANCE_DUMP"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-i-n-s-t-a-n-c-e_-d-u-m-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-l-o-a-d_-c-l-a-s-s/","text":"// shark-hprof / shark / HprofRecordTag / LOAD_CLASS LOAD_CLASS \u00b6 [jvm]\\ LOAD_CLASS (2) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-l-o-a-d_-c-l-a-s-s/#load_class","text":"[jvm]\\ LOAD_CLASS (2)","title":"LOAD_CLASS"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-l-o-a-d_-c-l-a-s-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-o-b-j-e-c-t_-a-r-r-a-y_-d-u-m-p/","text":"// shark-hprof / shark / HprofRecordTag / OBJECT_ARRAY_DUMP OBJECT_ARRAY_DUMP \u00b6 [jvm]\\ OBJECT_ARRAY_DUMP (34) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-o-b-j-e-c-t_-a-r-r-a-y_-d-u-m-p/#object_array_dump","text":"[jvm]\\ OBJECT_ARRAY_DUMP (34)","title":"OBJECT_ARRAY_DUMP"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-o-b-j-e-c-t_-a-r-r-a-y_-d-u-m-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-p-r-i-m-i-t-i-v-e_-a-r-r-a-y_-d-u-m-p/","text":"// shark-hprof / shark / HprofRecordTag / PRIMITIVE_ARRAY_DUMP PRIMITIVE_ARRAY_DUMP \u00b6 [jvm]\\ PRIMITIVE_ARRAY_DUMP (35) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-p-r-i-m-i-t-i-v-e_-a-r-r-a-y_-d-u-m-p/#primitive_array_dump","text":"[jvm]\\ PRIMITIVE_ARRAY_DUMP (35)","title":"PRIMITIVE_ARRAY_DUMP"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-p-r-i-m-i-t-i-v-e_-a-r-r-a-y_-d-u-m-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-p-r-i-m-i-t-i-v-e_-a-r-r-a-y_-n-o-d-a-t-a/","text":"// shark-hprof / shark / HprofRecordTag / PRIMITIVE_ARRAY_NODATA PRIMITIVE_ARRAY_NODATA \u00b6 [jvm]\\ PRIMITIVE_ARRAY_NODATA (195) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-p-r-i-m-i-t-i-v-e_-a-r-r-a-y_-n-o-d-a-t-a/#primitive_array_nodata","text":"[jvm]\\ PRIMITIVE_ARRAY_NODATA (195)","title":"PRIMITIVE_ARRAY_NODATA"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-p-r-i-m-i-t-i-v-e_-a-r-r-a-y_-n-o-d-a-t-a/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-d-e-b-u-g-g-e-r/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_DEBUGGER ROOT_DEBUGGER \u00b6 [jvm]\\ ROOT_DEBUGGER (139) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-d-e-b-u-g-g-e-r/#root_debugger","text":"[jvm]\\ ROOT_DEBUGGER (139)","title":"ROOT_DEBUGGER"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-d-e-b-u-g-g-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-f-i-n-a-l-i-z-i-n-g/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_FINALIZING ROOT_FINALIZING \u00b6 [jvm]\\ ROOT_FINALIZING (138) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-f-i-n-a-l-i-z-i-n-g/#root_finalizing","text":"[jvm]\\ ROOT_FINALIZING (138)","title":"ROOT_FINALIZING"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-f-i-n-a-l-i-z-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-i-n-t-e-r-n-e-d_-s-t-r-i-n-g/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_INTERNED_STRING ROOT_INTERNED_STRING \u00b6 [jvm]\\ ROOT_INTERNED_STRING (137) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-i-n-t-e-r-n-e-d_-s-t-r-i-n-g/#root_interned_string","text":"[jvm]\\ ROOT_INTERNED_STRING (137)","title":"ROOT_INTERNED_STRING"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-i-n-t-e-r-n-e-d_-s-t-r-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-a-v-a_-f-r-a-m-e/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_JAVA_FRAME ROOT_JAVA_FRAME \u00b6 [jvm]\\ ROOT_JAVA_FRAME (3) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-a-v-a_-f-r-a-m-e/#root_java_frame","text":"[jvm]\\ ROOT_JAVA_FRAME (3)","title":"ROOT_JAVA_FRAME"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-a-v-a_-f-r-a-m-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-g-l-o-b-a-l/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_JNI_GLOBAL ROOT_JNI_GLOBAL \u00b6 [jvm]\\ ROOT_JNI_GLOBAL (1) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-g-l-o-b-a-l/#root_jni_global","text":"[jvm]\\ ROOT_JNI_GLOBAL (1)","title":"ROOT_JNI_GLOBAL"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-g-l-o-b-a-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-l-o-c-a-l/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_JNI_LOCAL ROOT_JNI_LOCAL \u00b6 [jvm]\\ ROOT_JNI_LOCAL (2) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-l-o-c-a-l/#root_jni_local","text":"[jvm]\\ ROOT_JNI_LOCAL (2)","title":"ROOT_JNI_LOCAL"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-l-o-c-a-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-m-o-n-i-t-o-r/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_JNI_MONITOR ROOT_JNI_MONITOR \u00b6 [jvm]\\ ROOT_JNI_MONITOR (142) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-m-o-n-i-t-o-r/#root_jni_monitor","text":"[jvm]\\ ROOT_JNI_MONITOR (142)","title":"ROOT_JNI_MONITOR"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-j-n-i_-m-o-n-i-t-o-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-m-o-n-i-t-o-r_-u-s-e-d/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_MONITOR_USED ROOT_MONITOR_USED \u00b6 [jvm]\\ ROOT_MONITOR_USED (7) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-m-o-n-i-t-o-r_-u-s-e-d/#root_monitor_used","text":"[jvm]\\ ROOT_MONITOR_USED (7)","title":"ROOT_MONITOR_USED"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-m-o-n-i-t-o-r_-u-s-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-n-a-t-i-v-e_-s-t-a-c-k/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_NATIVE_STACK ROOT_NATIVE_STACK \u00b6 [jvm]\\ ROOT_NATIVE_STACK (4) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-n-a-t-i-v-e_-s-t-a-c-k/#root_native_stack","text":"[jvm]\\ ROOT_NATIVE_STACK (4)","title":"ROOT_NATIVE_STACK"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-n-a-t-i-v-e_-s-t-a-c-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-r-e-f-e-r-e-n-c-e_-c-l-e-a-n-u-p/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_REFERENCE_CLEANUP ROOT_REFERENCE_CLEANUP \u00b6 [jvm]\\ ROOT_REFERENCE_CLEANUP (140) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-r-e-f-e-r-e-n-c-e_-c-l-e-a-n-u-p/#root_reference_cleanup","text":"[jvm]\\ ROOT_REFERENCE_CLEANUP (140)","title":"ROOT_REFERENCE_CLEANUP"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-r-e-f-e-r-e-n-c-e_-c-l-e-a-n-u-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-s-t-i-c-k-y_-c-l-a-s-s/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_STICKY_CLASS ROOT_STICKY_CLASS \u00b6 [jvm]\\ ROOT_STICKY_CLASS (5) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-s-t-i-c-k-y_-c-l-a-s-s/#root_sticky_class","text":"[jvm]\\ ROOT_STICKY_CLASS (5)","title":"ROOT_STICKY_CLASS"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-s-t-i-c-k-y_-c-l-a-s-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-t-h-r-e-a-d_-b-l-o-c-k/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_THREAD_BLOCK ROOT_THREAD_BLOCK \u00b6 [jvm]\\ ROOT_THREAD_BLOCK (6) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-t-h-r-e-a-d_-b-l-o-c-k/#root_thread_block","text":"[jvm]\\ ROOT_THREAD_BLOCK (6)","title":"ROOT_THREAD_BLOCK"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-t-h-r-e-a-d_-b-l-o-c-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-t-h-r-e-a-d_-o-b-j-e-c-t/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_THREAD_OBJECT ROOT_THREAD_OBJECT \u00b6 [jvm]\\ ROOT_THREAD_OBJECT (8) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-t-h-r-e-a-d_-o-b-j-e-c-t/#root_thread_object","text":"[jvm]\\ ROOT_THREAD_OBJECT (8)","title":"ROOT_THREAD_OBJECT"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-t-h-r-e-a-d_-o-b-j-e-c-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-u-n-k-n-o-w-n/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_UNKNOWN ROOT_UNKNOWN \u00b6 [jvm]\\ ROOT_UNKNOWN (255) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-u-n-k-n-o-w-n/#root_unknown","text":"[jvm]\\ ROOT_UNKNOWN (255)","title":"ROOT_UNKNOWN"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-u-n-k-n-o-w-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-u-n-r-e-a-c-h-a-b-l-e/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_UNREACHABLE ROOT_UNREACHABLE \u00b6 [jvm]\\ ROOT_UNREACHABLE (144) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-u-n-r-e-a-c-h-a-b-l-e/#root_unreachable","text":"[jvm]\\ ROOT_UNREACHABLE (144)","title":"ROOT_UNREACHABLE"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-u-n-r-e-a-c-h-a-b-l-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-v-m_-i-n-t-e-r-n-a-l/","text":"// shark-hprof / shark / HprofRecordTag / ROOT_VM_INTERNAL ROOT_VM_INTERNAL \u00b6 [jvm]\\ ROOT_VM_INTERNAL (141) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-v-m_-i-n-t-e-r-n-a-l/#root_vm_internal","text":"[jvm]\\ ROOT_VM_INTERNAL (141)","title":"ROOT_VM_INTERNAL"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-r-o-o-t_-v-m_-i-n-t-e-r-n-a-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-c-k_-f-r-a-m-e/","text":"// shark-hprof / shark / HprofRecordTag / STACK_FRAME STACK_FRAME \u00b6 [jvm]\\ STACK_FRAME (4) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-c-k_-f-r-a-m-e/#stack_frame","text":"[jvm]\\ STACK_FRAME (4)","title":"STACK_FRAME"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-c-k_-f-r-a-m-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-c-k_-t-r-a-c-e/","text":"// shark-hprof / shark / HprofRecordTag / STACK_TRACE STACK_TRACE \u00b6 [jvm]\\ STACK_TRACE (5) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-c-k_-t-r-a-c-e/#stack_trace","text":"[jvm]\\ STACK_TRACE (5)","title":"STACK_TRACE"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-c-k_-t-r-a-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-r-t_-t-h-r-e-a-d/","text":"// shark-hprof / shark / HprofRecordTag / START_THREAD START_THREAD \u00b6 [jvm]\\ START_THREAD (10) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-r-t_-t-h-r-e-a-d/#start_thread","text":"[jvm]\\ START_THREAD (10)","title":"START_THREAD"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-a-r-t_-t-h-r-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-r-i-n-g_-i-n_-u-t-f8/","text":"// shark-hprof / shark / HprofRecordTag / STRING_IN_UTF8 STRING_IN_UTF8 \u00b6 [jvm]\\ STRING_IN_UTF8 (1) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-r-i-n-g_-i-n_-u-t-f8/#string_in_utf8","text":"[jvm]\\ STRING_IN_UTF8 (1)","title":"STRING_IN_UTF8"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-s-t-r-i-n-g_-i-n_-u-t-f8/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-u-n-l-o-a-d_-c-l-a-s-s/","text":"// shark-hprof / shark / HprofRecordTag / UNLOAD_CLASS UNLOAD_CLASS \u00b6 [jvm]\\ UNLOAD_CLASS (3) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-u-n-l-o-a-d_-c-l-a-s-s/#unload_class","text":"[jvm]\\ UNLOAD_CLASS (3)","title":"UNLOAD_CLASS"},{"location":"api/shark-hprof/shark/-hprof-record-tag/-u-n-l-o-a-d_-c-l-a-s-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int tag [jvm] val tag : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-version/","text":"// shark-hprof / shark / HprofVersion HprofVersion \u00b6 [jvm]\\ enum HprofVersion : Enum < HprofVersion > Supported hprof versions Entries \u00b6 ANDROID [jvm] ANDROID (\u201cJAVA PROFILE 1.0.3\u201d) JDK_6 [jvm] JDK_6 (\u201cJAVA PROFILE 1.0.2\u201d) JDK1_2_BETA4 [jvm] JDK1_2_BETA4 (\u201cJAVA PROFILE 1.0.1\u201d) JDK1_2_BETA3 [jvm] JDK1_2_BETA3 (\u201cJAVA PROFILE 1.0\u201d) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-version/#hprofversion","text":"[jvm]\\ enum HprofVersion : Enum < HprofVersion > Supported hprof versions","title":"HprofVersion"},{"location":"api/shark-hprof/shark/-hprof-version/#entries","text":"ANDROID [jvm] ANDROID (\u201cJAVA PROFILE 1.0.3\u201d) JDK_6 [jvm] JDK_6 (\u201cJAVA PROFILE 1.0.2\u201d) JDK1_2_BETA4 [jvm] JDK1_2_BETA4 (\u201cJAVA PROFILE 1.0.1\u201d) JDK1_2_BETA3 [jvm] JDK1_2_BETA3 (\u201cJAVA PROFILE 1.0\u201d)","title":"Entries"},{"location":"api/shark-hprof/shark/-hprof-version/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-version/version-string/","text":"// shark-hprof / shark / HprofVersion / versionString versionString \u00b6 [jvm]\\ val versionString : String","title":"Version string"},{"location":"api/shark-hprof/shark/-hprof-version/version-string/#versionstring","text":"[jvm]\\ val versionString : String","title":"versionString"},{"location":"api/shark-hprof/shark/-hprof-version/-a-n-d-r-o-i-d/","text":"// shark-hprof / shark / HprofVersion / ANDROID ANDROID \u00b6 [jvm]\\ ANDROID (\u201cJAVA PROFILE 1.0.3\u201d) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-version/-a-n-d-r-o-i-d/#android","text":"[jvm]\\ ANDROID (\u201cJAVA PROFILE 1.0.3\u201d)","title":"ANDROID"},{"location":"api/shark-hprof/shark/-hprof-version/-a-n-d-r-o-i-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k1_2_-b-e-t-a3/","text":"// shark-hprof / shark / HprofVersion / JDK1_2_BETA3 JDK1_2_BETA3 \u00b6 [jvm]\\ JDK1_2_BETA3 (\u201cJAVA PROFILE 1.0\u201d) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k1_2_-b-e-t-a3/#jdk1_2_beta3","text":"[jvm]\\ JDK1_2_BETA3 (\u201cJAVA PROFILE 1.0\u201d)","title":"JDK1_2_BETA3"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k1_2_-b-e-t-a3/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k1_2_-b-e-t-a4/","text":"// shark-hprof / shark / HprofVersion / JDK1_2_BETA4 JDK1_2_BETA4 \u00b6 [jvm]\\ JDK1_2_BETA4 (\u201cJAVA PROFILE 1.0.1\u201d) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k1_2_-b-e-t-a4/#jdk1_2_beta4","text":"[jvm]\\ JDK1_2_BETA4 (\u201cJAVA PROFILE 1.0.1\u201d)","title":"JDK1_2_BETA4"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k1_2_-b-e-t-a4/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k_6/","text":"// shark-hprof / shark / HprofVersion / JDK_6 JDK_6 \u00b6 [jvm]\\ JDK_6 (\u201cJAVA PROFILE 1.0.2\u201d) Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k_6/#jdk_6","text":"[jvm]\\ JDK_6 (\u201cJAVA PROFILE 1.0.2\u201d)","title":"JDK_6"},{"location":"api/shark-hprof/shark/-hprof-version/-j-d-k_6/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int versionString [jvm] val versionString : String","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-writer/","text":"// shark-hprof / shark / HprofWriter HprofWriter \u00b6 [jvm]\\ class HprofWriter : Closeable Generates Hprof files. Call openWriterFor to obtain a new instance. Call write to add records and close when you\u2019re done. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary close [jvm] open override fun close () Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file. valuesToBytes [jvm] fun valuesToBytes (values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder . write [jvm] fun write (record: HprofRecord ) Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called. Properties \u00b6 Name Summary hprofHeader [jvm] val hprofHeader : HprofHeader","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-writer/#hprofwriter","text":"[jvm]\\ class HprofWriter : Closeable Generates Hprof files. Call openWriterFor to obtain a new instance. Call write to add records and close when you\u2019re done.","title":"HprofWriter"},{"location":"api/shark-hprof/shark/-hprof-writer/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-hprof-writer/#functions","text":"Name Summary close [jvm] open override fun close () Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file. valuesToBytes [jvm] fun valuesToBytes (values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder . write [jvm] fun write (record: HprofRecord ) Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-writer/#properties","text":"Name Summary hprofHeader [jvm] val hprofHeader : HprofHeader","title":"Properties"},{"location":"api/shark-hprof/shark/-hprof-writer/close/","text":"// shark-hprof / shark / HprofWriter / close close \u00b6 [jvm]\\ open override fun close () Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file.","title":"Close"},{"location":"api/shark-hprof/shark/-hprof-writer/close/#close","text":"[jvm]\\ open override fun close () Flushes to disk all HprofRecord.HeapDumpRecord that are currently written to the in memory buffer, then closes the file.","title":"close"},{"location":"api/shark-hprof/shark/-hprof-writer/hprof-header/","text":"// shark-hprof / shark / HprofWriter / hprofHeader hprofHeader \u00b6 [jvm]\\ val hprofHeader : HprofHeader","title":"Hprof header"},{"location":"api/shark-hprof/shark/-hprof-writer/hprof-header/#hprofheader","text":"[jvm]\\ val hprofHeader : HprofHeader","title":"hprofHeader"},{"location":"api/shark-hprof/shark/-hprof-writer/values-to-bytes/","text":"// shark-hprof / shark / HprofWriter / valuesToBytes valuesToBytes \u00b6 [jvm]\\ fun valuesToBytes (values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder .","title":"Values to bytes"},{"location":"api/shark-hprof/shark/-hprof-writer/values-to-bytes/#valuestobytes","text":"[jvm]\\ fun valuesToBytes (values: List < ValueHolder >): ByteArray Helper method for creating a ByteArray for InstanceDumpRecord.fieldValues from a list of ValueHolder .","title":"valuesToBytes"},{"location":"api/shark-hprof/shark/-hprof-writer/write/","text":"// shark-hprof / shark / HprofWriter / write write \u00b6 [jvm]\\ fun write (record: HprofRecord ) Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"Write"},{"location":"api/shark-hprof/shark/-hprof-writer/write/#write","text":"[jvm]\\ fun write (record: HprofRecord ) Appends a HprofRecord to the heap dump. If record is a HprofRecord.HeapDumpRecord then it will not be written to an in memory buffer and written to file only when the next a record that is not a HprofRecord.HeapDumpRecord is written or when close is called.","title":"write"},{"location":"api/shark-hprof/shark/-hprof-writer/-companion/","text":"// shark-hprof / shark / HprofWriter / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary openWriterFor [jvm] fun openWriterFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader()): HprofWriter fun openWriterFor (hprofSink: BufferedSink , hprofHeader: HprofHeader = HprofHeader()): HprofWriter","title":"Index"},{"location":"api/shark-hprof/shark/-hprof-writer/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-hprof-writer/-companion/#functions","text":"Name Summary openWriterFor [jvm] fun openWriterFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader()): HprofWriter fun openWriterFor (hprofSink: BufferedSink , hprofHeader: HprofHeader = HprofHeader()): HprofWriter","title":"Functions"},{"location":"api/shark-hprof/shark/-hprof-writer/-companion/open-writer-for/","text":"// shark-hprof / shark / HprofWriter / Companion / openWriterFor openWriterFor \u00b6 [jvm]\\ fun openWriterFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader()): HprofWriter fun openWriterFor (hprofSink: BufferedSink , hprofHeader: HprofHeader = HprofHeader()): HprofWriter","title":"Open writer for"},{"location":"api/shark-hprof/shark/-hprof-writer/-companion/open-writer-for/#openwriterfor","text":"[jvm]\\ fun openWriterFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader()): HprofWriter fun openWriterFor (hprofSink: BufferedSink , hprofHeader: HprofHeader = HprofHeader()): HprofWriter","title":"openWriterFor"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/","text":"// shark-hprof / shark / OnHprofRecordListener OnHprofRecordListener \u00b6 [jvm]\\ fun interface OnHprofRecordListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to StreamingHprofReader.readRecords . This is a functional interface with which you can create a OnHprofRecordListener from a lambda. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary onHprofRecord [jvm] abstract fun onHprofRecord (position: Long , record: HprofRecord )","title":"Index"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#onhprofrecordlistener","text":"[jvm]\\ fun interface OnHprofRecordListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecord found in the heap dump which types is in the set of the recordTypes parameter passed to StreamingHprofReader.readRecords . This is a functional interface with which you can create a OnHprofRecordListener from a lambda.","title":"OnHprofRecordListener"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/#functions","text":"Name Summary onHprofRecord [jvm] abstract fun onHprofRecord (position: Long , record: HprofRecord )","title":"Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record/","text":"// shark-hprof / shark / OnHprofRecordListener / onHprofRecord onHprofRecord \u00b6 [jvm]\\ abstract fun onHprofRecord (position: Long , record: HprofRecord )","title":"On hprof record"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/on-hprof-record/#onhprofrecord","text":"[jvm]\\ abstract fun onHprofRecord (position: Long , record: HprofRecord )","title":"onHprofRecord"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/-companion/","text":"// shark-hprof / shark / OnHprofRecordListener / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax.","title":"Index"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax.","title":"Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/-companion/invoke/","text":"// shark-hprof / shark / OnHprofRecordListener / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax. Usage: val listener = OnHprofRecordListener { position, record ->\\ \\ }","title":"Invoke"},{"location":"api/shark-hprof/shark/-on-hprof-record-listener/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: ( Long , HprofRecord ) -> Unit ): OnHprofRecordListener Utility function to create a OnHprofRecordListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordListener syntax. Usage: val listener = OnHprofRecordListener { position, record ->\\ \\ }","title":"invoke"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/","text":"// shark-hprof / shark / OnHprofRecordTagListener OnHprofRecordTagListener \u00b6 [jvm]\\ fun interface OnHprofRecordTagListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecordTag found in the heap dump. Listener implementations are expected to read all bytes corresponding to a given tag from the provided reader before returning. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary onHprofRecord [jvm] abstract fun onHprofRecord (tag: HprofRecordTag , length: Long , reader: HprofRecordReader )","title":"Index"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/#onhprofrecordtaglistener","text":"[jvm]\\ fun interface OnHprofRecordTagListener Listener passed in to StreamingHprofReader.readRecords , gets notified for each HprofRecordTag found in the heap dump. Listener implementations are expected to read all bytes corresponding to a given tag from the provided reader before returning.","title":"OnHprofRecordTagListener"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/#functions","text":"Name Summary onHprofRecord [jvm] abstract fun onHprofRecord (tag: HprofRecordTag , length: Long , reader: HprofRecordReader )","title":"Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/on-hprof-record/","text":"// shark-hprof / shark / OnHprofRecordTagListener / onHprofRecord onHprofRecord \u00b6 [jvm]\\ abstract fun onHprofRecord (tag: HprofRecordTag , length: Long , reader: HprofRecordReader )","title":"On hprof record"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/on-hprof-record/#onhprofrecord","text":"[jvm]\\ abstract fun onHprofRecord (tag: HprofRecordTag , length: Long , reader: HprofRecordReader )","title":"onHprofRecord"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/-companion/","text":"// shark-hprof / shark / OnHprofRecordTagListener / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( HprofRecordTag , Long , HprofRecordReader ) -> Unit ): OnHprofRecordTagListener Utility function to create a OnHprofRecordTagListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordTagListener syntax.","title":"Index"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/-companion/#functions","text":"Name Summary invoke [jvm] inline operator fun invoke (crossinline block: ( HprofRecordTag , Long , HprofRecordReader ) -> Unit ): OnHprofRecordTagListener Utility function to create a OnHprofRecordTagListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordTagListener syntax.","title":"Functions"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/-companion/invoke/","text":"// shark-hprof / shark / OnHprofRecordTagListener / Companion / invoke invoke \u00b6 [jvm]\\ inline operator fun invoke (crossinline block: ( HprofRecordTag , Long , HprofRecordReader ) -> Unit ): OnHprofRecordTagListener Utility function to create a OnHprofRecordTagListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordTagListener syntax. Usage: val listener = OnHprofRecordTagListener { tag, length, reader ->\\ \\ }","title":"Invoke"},{"location":"api/shark-hprof/shark/-on-hprof-record-tag-listener/-companion/invoke/#invoke","text":"[jvm]\\ inline operator fun invoke (crossinline block: ( HprofRecordTag , Long , HprofRecordReader ) -> Unit ): OnHprofRecordTagListener Utility function to create a OnHprofRecordTagListener from the passed in block lambda instead of using the anonymous object : OnHprofRecordTagListener syntax. Usage: val listener = OnHprofRecordTagListener { tag, length, reader ->\\ \\ }","title":"invoke"},{"location":"api/shark-hprof/shark/-primitive-type/","text":"// shark-hprof / shark / PrimitiveType PrimitiveType \u00b6 [jvm]\\ enum PrimitiveType : Enum < PrimitiveType > A primitive type in the prof. Entries \u00b6 LONG [jvm] LONG (11, 8) INT [jvm] INT (10, 4) SHORT [jvm] SHORT (9, 2) BYTE [jvm] BYTE (8, 1) DOUBLE [jvm] DOUBLE (7, 8) FLOAT [jvm] FLOAT (6, 4) CHAR [jvm] CHAR (5, 2) BOOLEAN [jvm] BOOLEAN (4, 1) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/#primitivetype","text":"[jvm]\\ enum PrimitiveType : Enum < PrimitiveType > A primitive type in the prof.","title":"PrimitiveType"},{"location":"api/shark-hprof/shark/-primitive-type/#entries","text":"LONG [jvm] LONG (11, 8) INT [jvm] INT (10, 4) SHORT [jvm] SHORT (9, 2) BYTE [jvm] BYTE (8, 1) DOUBLE [jvm] DOUBLE (7, 8) FLOAT [jvm] FLOAT (6, 4) CHAR [jvm] CHAR (5, 2) BOOLEAN [jvm] BOOLEAN (4, 1)","title":"Entries"},{"location":"api/shark-hprof/shark/-primitive-type/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-primitive-type/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size/","text":"// shark-hprof / shark / PrimitiveType / byteSize byteSize \u00b6 [jvm]\\ val byteSize : Int The size in bytes for each value of that type.","title":"Byte size"},{"location":"api/shark-hprof/shark/-primitive-type/byte-size/#bytesize","text":"[jvm]\\ val byteSize : Int The size in bytes for each value of that type.","title":"byteSize"},{"location":"api/shark-hprof/shark/-primitive-type/hprof-type/","text":"// shark-hprof / shark / PrimitiveType / hprofType hprofType \u00b6 [jvm]\\ val hprofType : Int The hprof defined \u201cbasic type\u201d.","title":"Hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/hprof-type/#hproftype","text":"[jvm]\\ val hprofType : Int The hprof defined \u201cbasic type\u201d.","title":"hprofType"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/","text":"// shark-hprof / shark / PrimitiveType / BOOLEAN BOOLEAN \u00b6 [jvm]\\ BOOLEAN (4, 1) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/#boolean","text":"[jvm]\\ BOOLEAN (4, 1)","title":"BOOLEAN"},{"location":"api/shark-hprof/shark/-primitive-type/-b-o-o-l-e-a-n/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/","text":"// shark-hprof / shark / PrimitiveType / BYTE BYTE \u00b6 [jvm]\\ BYTE (8, 1) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/#byte","text":"[jvm]\\ BYTE (8, 1)","title":"BYTE"},{"location":"api/shark-hprof/shark/-primitive-type/-b-y-t-e/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/","text":"// shark-hprof / shark / PrimitiveType / CHAR CHAR \u00b6 [jvm]\\ CHAR (5, 2) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/#char","text":"[jvm]\\ CHAR (5, 2)","title":"CHAR"},{"location":"api/shark-hprof/shark/-primitive-type/-c-h-a-r/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/","text":"// shark-hprof / shark / PrimitiveType / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary byteSizeByHprofType [jvm] val byteSizeByHprofType : Map < Int , Int > primitiveTypeByHprofType [jvm] val primitiveTypeByHprofType : Map < Int , PrimitiveType > REFERENCE_HPROF_TYPE [jvm] const val REFERENCE_HPROF_TYPE : Int = 2 The hprof defined \u201cbasic type\u201d for references.","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/#properties","text":"Name Summary byteSizeByHprofType [jvm] val byteSizeByHprofType : Map < Int , Int > primitiveTypeByHprofType [jvm] val primitiveTypeByHprofType : Map < Int , PrimitiveType > REFERENCE_HPROF_TYPE [jvm] const val REFERENCE_HPROF_TYPE : Int = 2 The hprof defined \u201cbasic type\u201d for references.","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e/","text":"// shark-hprof / shark / PrimitiveType / Companion / REFERENCE_HPROF_TYPE REFERENCE_HPROF_TYPE \u00b6 [jvm]\\ const val REFERENCE_HPROF_TYPE : Int = 2 The hprof defined \u201cbasic type\u201d for references.","title":" r e f e r e n c e  h p r o f  t y p e"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/-r-e-f-e-r-e-n-c-e_-h-p-r-o-f_-t-y-p-e/#reference_hprof_type","text":"[jvm]\\ const val REFERENCE_HPROF_TYPE : Int = 2 The hprof defined \u201cbasic type\u201d for references.","title":"REFERENCE_HPROF_TYPE"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/byte-size-by-hprof-type/","text":"// shark-hprof / shark / PrimitiveType / Companion / byteSizeByHprofType byteSizeByHprofType \u00b6 [jvm]\\ val byteSizeByHprofType : Map < Int , Int >","title":"Byte size by hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/byte-size-by-hprof-type/#bytesizebyhproftype","text":"[jvm]\\ val byteSizeByHprofType : Map < Int , Int >","title":"byteSizeByHprofType"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/primitive-type-by-hprof-type/","text":"// shark-hprof / shark / PrimitiveType / Companion / primitiveTypeByHprofType primitiveTypeByHprofType \u00b6 [jvm]\\ val primitiveTypeByHprofType : Map < Int , PrimitiveType >","title":"Primitive type by hprof type"},{"location":"api/shark-hprof/shark/-primitive-type/-companion/primitive-type-by-hprof-type/#primitivetypebyhproftype","text":"[jvm]\\ val primitiveTypeByHprofType : Map < Int , PrimitiveType >","title":"primitiveTypeByHprofType"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/","text":"// shark-hprof / shark / PrimitiveType / DOUBLE DOUBLE \u00b6 [jvm]\\ DOUBLE (7, 8) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/#double","text":"[jvm]\\ DOUBLE (7, 8)","title":"DOUBLE"},{"location":"api/shark-hprof/shark/-primitive-type/-d-o-u-b-l-e/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/","text":"// shark-hprof / shark / PrimitiveType / FLOAT FLOAT \u00b6 [jvm]\\ FLOAT (6, 4) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/#float","text":"[jvm]\\ FLOAT (6, 4)","title":"FLOAT"},{"location":"api/shark-hprof/shark/-primitive-type/-f-l-o-a-t/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/","text":"// shark-hprof / shark / PrimitiveType / INT INT \u00b6 [jvm]\\ INT (10, 4) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/#int","text":"[jvm]\\ INT (10, 4)","title":"INT"},{"location":"api/shark-hprof/shark/-primitive-type/-i-n-t/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/","text":"// shark-hprof / shark / PrimitiveType / LONG LONG \u00b6 [jvm]\\ LONG (11, 8) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/#long","text":"[jvm]\\ LONG (11, 8)","title":"LONG"},{"location":"api/shark-hprof/shark/-primitive-type/-l-o-n-g/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/","text":"// shark-hprof / shark / PrimitiveType / SHORT SHORT \u00b6 [jvm]\\ SHORT (9, 2) Properties \u00b6 Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/#short","text":"[jvm]\\ SHORT (9, 2)","title":"SHORT"},{"location":"api/shark-hprof/shark/-primitive-type/-s-h-o-r-t/#properties","text":"Name Summary byteSize [jvm] val byteSize : Int The size in bytes for each value of that type. hprofType [jvm] val hprofType : Int The hprof defined \u201cbasic type\u201d. name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-proguard-mapping/","text":"// shark-hprof / shark / ProguardMapping ProguardMapping \u00b6 [jvm]\\ class ProguardMapping Functions \u00b6 Name Summary addMapping [jvm] fun addMapping (obfuscatedName: String , clearName: String ) Adds entry to the obfuscatedToClearNamesMap map. deobfuscateClassName [jvm] fun deobfuscateClassName (obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name. deobfuscateFieldName [jvm] fun deobfuscateFieldName (obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Index"},{"location":"api/shark-hprof/shark/-proguard-mapping/#proguardmapping","text":"[jvm]\\ class ProguardMapping","title":"ProguardMapping"},{"location":"api/shark-hprof/shark/-proguard-mapping/#functions","text":"Name Summary addMapping [jvm] fun addMapping (obfuscatedName: String , clearName: String ) Adds entry to the obfuscatedToClearNamesMap map. deobfuscateClassName [jvm] fun deobfuscateClassName (obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name. deobfuscateFieldName [jvm] fun deobfuscateFieldName (obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Functions"},{"location":"api/shark-hprof/shark/-proguard-mapping/-proguard-mapping/","text":"// shark-hprof / shark / ProguardMapping / ProguardMapping ProguardMapping \u00b6 [jvm]\\ fun ProguardMapping ()","title":" proguard mapping"},{"location":"api/shark-hprof/shark/-proguard-mapping/-proguard-mapping/#proguardmapping","text":"[jvm]\\ fun ProguardMapping ()","title":"ProguardMapping"},{"location":"api/shark-hprof/shark/-proguard-mapping/add-mapping/","text":"// shark-hprof / shark / ProguardMapping / addMapping addMapping \u00b6 [jvm]\\ fun addMapping (obfuscatedName: String , clearName: String ) Adds entry to the obfuscatedToClearNamesMap map.","title":"Add mapping"},{"location":"api/shark-hprof/shark/-proguard-mapping/add-mapping/#addmapping","text":"[jvm]\\ fun addMapping (obfuscatedName: String , clearName: String ) Adds entry to the obfuscatedToClearNamesMap map.","title":"addMapping"},{"location":"api/shark-hprof/shark/-proguard-mapping/deobfuscate-class-name/","text":"// shark-hprof / shark / ProguardMapping / deobfuscateClassName deobfuscateClassName \u00b6 [jvm]\\ fun deobfuscateClassName (obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name.","title":"Deobfuscate class name"},{"location":"api/shark-hprof/shark/-proguard-mapping/deobfuscate-class-name/#deobfuscateclassname","text":"[jvm]\\ fun deobfuscateClassName (obfuscatedClassName: String ): String Returns deobfuscated class name or original string if there is no mapping for given obfuscated name.","title":"deobfuscateClassName"},{"location":"api/shark-hprof/shark/-proguard-mapping/deobfuscate-field-name/","text":"// shark-hprof / shark / ProguardMapping / deobfuscateFieldName deobfuscateFieldName \u00b6 [jvm]\\ fun deobfuscateFieldName (obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"Deobfuscate field name"},{"location":"api/shark-hprof/shark/-proguard-mapping/deobfuscate-field-name/#deobfuscatefieldname","text":"[jvm]\\ fun deobfuscateFieldName (obfuscatedClass: String , obfuscatedField: String ): String Returns deobfuscated field name or original string if there is no mapping for given obfuscated name.","title":"deobfuscateFieldName"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/","text":"// shark-hprof / shark / ProguardMappingReader ProguardMappingReader \u00b6 [jvm]\\ class ProguardMappingReader (proguardMappingInputStream: InputStream ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary readProguardMapping [jvm] fun readProguardMapping (): ProguardMapping","title":"Index"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/#proguardmappingreader","text":"[jvm]\\ class ProguardMappingReader (proguardMappingInputStream: InputStream )","title":"ProguardMappingReader"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/#functions","text":"Name Summary readProguardMapping [jvm] fun readProguardMapping (): ProguardMapping","title":"Functions"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/-proguard-mapping-reader/","text":"// shark-hprof / shark / ProguardMappingReader / ProguardMappingReader ProguardMappingReader \u00b6 [jvm]\\ fun ProguardMappingReader (proguardMappingInputStream: InputStream )","title":" proguard mapping reader"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/-proguard-mapping-reader/#proguardmappingreader","text":"[jvm]\\ fun ProguardMappingReader (proguardMappingInputStream: InputStream )","title":"ProguardMappingReader"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/read-proguard-mapping/","text":"// shark-hprof / shark / ProguardMappingReader / readProguardMapping readProguardMapping \u00b6 [jvm]\\ fun readProguardMapping (): ProguardMapping","title":"Read proguard mapping"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/read-proguard-mapping/#readproguardmapping","text":"[jvm]\\ fun readProguardMapping (): ProguardMapping","title":"readProguardMapping"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/-companion/","text":"// shark-hprof / shark / ProguardMappingReader / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"api/shark-hprof/shark/-proguard-mapping-reader/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/","text":"// shark-hprof / shark / RandomAccessHprofReader RandomAccessHprofReader \u00b6 [jvm]\\ class RandomAccessHprofReader : Closeable Reads records in a Hprof source, one at a time with a specific position and size. Call openReaderFor to obtain a new instance. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary close [jvm] open override fun close () readRecord [jvm] fun < T > readRecord (recordPosition: Long , recordSize: Long , withRecordReader: HprofRecordReader .() -> T ): T Loads recordSize bytes at recordPosition into the buffer that backs HprofRecordReader then calls withRecordReader with that reader as a receiver. withRecordReader is expected to use the receiver reader to read one record of exactly recordSize bytes.","title":"Index"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/#randomaccesshprofreader","text":"[jvm]\\ class RandomAccessHprofReader : Closeable Reads records in a Hprof source, one at a time with a specific position and size. Call openReaderFor to obtain a new instance.","title":"RandomAccessHprofReader"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/#functions","text":"Name Summary close [jvm] open override fun close () readRecord [jvm] fun < T > readRecord (recordPosition: Long , recordSize: Long , withRecordReader: HprofRecordReader .() -> T ): T Loads recordSize bytes at recordPosition into the buffer that backs HprofRecordReader then calls withRecordReader with that reader as a receiver. withRecordReader is expected to use the receiver reader to read one record of exactly recordSize bytes.","title":"Functions"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/close/","text":"// shark-hprof / shark / RandomAccessHprofReader / close close \u00b6 [jvm]\\ open override fun close ()","title":"Close"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/close/#close","text":"[jvm]\\ open override fun close ()","title":"close"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/read-record/","text":"// shark-hprof / shark / RandomAccessHprofReader / readRecord readRecord \u00b6 [jvm]\\ fun < T > readRecord (recordPosition: Long , recordSize: Long , withRecordReader: HprofRecordReader .() -> T ): T Loads recordSize bytes at recordPosition into the buffer that backs HprofRecordReader then calls withRecordReader with that reader as a receiver. withRecordReader is expected to use the receiver reader to read one record of exactly recordSize bytes. Return \u00b6 the results from withRecordReader","title":"Read record"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/read-record/#readrecord","text":"[jvm]\\ fun < T > readRecord (recordPosition: Long , recordSize: Long , withRecordReader: HprofRecordReader .() -> T ): T Loads recordSize bytes at recordPosition into the buffer that backs HprofRecordReader then calls withRecordReader with that reader as a receiver. withRecordReader is expected to use the receiver reader to read one record of exactly recordSize bytes.","title":"readRecord"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/read-record/#return","text":"the results from withRecordReader","title":"Return"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/-companion/","text":"// shark-hprof / shark / RandomAccessHprofReader / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary openReaderFor [jvm] fun openReaderFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): RandomAccessHprofReader fun openReaderFor (hprofSourceProvider: RandomAccessSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openRandomAccessSource() .use { HprofHeader.parseHeaderOf(it.asStreamingSource()) }): RandomAccessHprofReader","title":"Index"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/-companion/#functions","text":"Name Summary openReaderFor [jvm] fun openReaderFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): RandomAccessHprofReader fun openReaderFor (hprofSourceProvider: RandomAccessSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openRandomAccessSource() .use { HprofHeader.parseHeaderOf(it.asStreamingSource()) }): RandomAccessHprofReader","title":"Functions"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/-companion/open-reader-for/","text":"// shark-hprof / shark / RandomAccessHprofReader / Companion / openReaderFor openReaderFor \u00b6 [jvm]\\ fun openReaderFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): RandomAccessHprofReader fun openReaderFor (hprofSourceProvider: RandomAccessSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openRandomAccessSource() .use { HprofHeader.parseHeaderOf(it.asStreamingSource()) }): RandomAccessHprofReader","title":"Open reader for"},{"location":"api/shark-hprof/shark/-random-access-hprof-reader/-companion/open-reader-for/#openreaderfor","text":"[jvm]\\ fun openReaderFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): RandomAccessHprofReader fun openReaderFor (hprofSourceProvider: RandomAccessSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openRandomAccessSource() .use { HprofHeader.parseHeaderOf(it.asStreamingSource()) }): RandomAccessHprofReader","title":"openReaderFor"},{"location":"api/shark-hprof/shark/-random-access-source/","text":"// shark-hprof / shark / RandomAccessSource RandomAccessSource \u00b6 [jvm]\\ interface RandomAccessSource : Closeable Functions \u00b6 Name Summary asStreamingSource [jvm] open fun asStreamingSource (): BufferedSource close [jvm] abstract override fun close () read [jvm] abstract fun read (sink: Buffer , position: Long , byteCount: Long ): Long","title":"Index"},{"location":"api/shark-hprof/shark/-random-access-source/#randomaccesssource","text":"[jvm]\\ interface RandomAccessSource : Closeable","title":"RandomAccessSource"},{"location":"api/shark-hprof/shark/-random-access-source/#functions","text":"Name Summary asStreamingSource [jvm] open fun asStreamingSource (): BufferedSource close [jvm] abstract override fun close () read [jvm] abstract fun read (sink: Buffer , position: Long , byteCount: Long ): Long","title":"Functions"},{"location":"api/shark-hprof/shark/-random-access-source/as-streaming-source/","text":"// shark-hprof / shark / RandomAccessSource / asStreamingSource asStreamingSource \u00b6 [jvm]\\ open fun asStreamingSource (): BufferedSource","title":"As streaming source"},{"location":"api/shark-hprof/shark/-random-access-source/as-streaming-source/#asstreamingsource","text":"[jvm]\\ open fun asStreamingSource (): BufferedSource","title":"asStreamingSource"},{"location":"api/shark-hprof/shark/-random-access-source/read/","text":"// shark-hprof / shark / RandomAccessSource / read read \u00b6 [jvm]\\ abstract fun read (sink: Buffer , position: Long , byteCount: Long ): Long","title":"Read"},{"location":"api/shark-hprof/shark/-random-access-source/read/#read","text":"[jvm]\\ abstract fun read (sink: Buffer , position: Long , byteCount: Long ): Long","title":"read"},{"location":"api/shark-hprof/shark/-random-access-source-provider/","text":"// shark-hprof / shark / RandomAccessSourceProvider RandomAccessSourceProvider \u00b6 [jvm]\\ fun interface RandomAccessSourceProvider Can open RandomAccessSource instances. Functions \u00b6 Name Summary openRandomAccessSource [jvm] abstract fun openRandomAccessSource (): RandomAccessSource Inheritors \u00b6 Name DualSourceProvider","title":"Index"},{"location":"api/shark-hprof/shark/-random-access-source-provider/#randomaccesssourceprovider","text":"[jvm]\\ fun interface RandomAccessSourceProvider Can open RandomAccessSource instances.","title":"RandomAccessSourceProvider"},{"location":"api/shark-hprof/shark/-random-access-source-provider/#functions","text":"Name Summary openRandomAccessSource [jvm] abstract fun openRandomAccessSource (): RandomAccessSource","title":"Functions"},{"location":"api/shark-hprof/shark/-random-access-source-provider/#inheritors","text":"Name DualSourceProvider","title":"Inheritors"},{"location":"api/shark-hprof/shark/-random-access-source-provider/open-random-access-source/","text":"// shark-hprof / shark / RandomAccessSourceProvider / openRandomAccessSource openRandomAccessSource \u00b6 [jvm]\\ abstract fun openRandomAccessSource (): RandomAccessSource","title":"Open random access source"},{"location":"api/shark-hprof/shark/-random-access-source-provider/open-random-access-source/#openrandomaccesssource","text":"[jvm]\\ abstract fun openRandomAccessSource (): RandomAccessSource","title":"openRandomAccessSource"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/","text":"// shark-hprof / shark / StreamingHprofReader StreamingHprofReader \u00b6 [jvm]\\ class StreamingHprofReader Reads the entire content of a Hprof source in one fell swoop. Call readerFor to obtain a new instance. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary readRecords [jvm] fun readRecords (recordTags: Set < HprofRecordTag >, listener: OnHprofRecordTagListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTags . Extensions \u00b6 Name Summary asStreamingRecordReader [jvm] fun StreamingHprofReader . asStreamingRecordReader (): StreamingRecordReaderAdapter","title":"Index"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/#streaminghprofreader","text":"[jvm]\\ class StreamingHprofReader Reads the entire content of a Hprof source in one fell swoop. Call readerFor to obtain a new instance.","title":"StreamingHprofReader"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/#functions","text":"Name Summary readRecords [jvm] fun readRecords (recordTags: Set < HprofRecordTag >, listener: OnHprofRecordTagListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTags .","title":"Functions"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/#extensions","text":"Name Summary asStreamingRecordReader [jvm] fun StreamingHprofReader . asStreamingRecordReader (): StreamingRecordReaderAdapter","title":"Extensions"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/read-records/","text":"// shark-hprof / shark / StreamingHprofReader / readRecords readRecords \u00b6 [jvm]\\ fun readRecords (recordTags: Set < HprofRecordTag >, listener: OnHprofRecordTagListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTags . Return \u00b6 the number of bytes read from the source","title":"Read records"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/read-records/#readrecords","text":"[jvm]\\ fun readRecords (recordTags: Set < HprofRecordTag >, listener: OnHprofRecordTagListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTags .","title":"readRecords"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/read-records/#return","text":"the number of bytes read from the source","title":"Return"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/-companion/","text":"// shark-hprof / shark / StreamingHprofReader / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary readerFor [jvm] fun readerFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): StreamingHprofReader Creates a StreamingHprofReader for the provided hprofFile . hprofHeader will be read from hprofFile unless you provide it. [jvm] fun readerFor (hprofSourceProvider: StreamingSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openStreamingSource() .use { HprofHeader.parseHeaderOf(it) }): StreamingHprofReader Creates a StreamingHprofReader that will call StreamingSourceProvider.openStreamingSource on every readRecords to obtain a Source to read the hprof data from. Before reading the hprof records, StreamingHprofReader will skip HprofHeader.recordsPosition bytes.","title":"Index"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/-companion/#functions","text":"Name Summary readerFor [jvm] fun readerFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): StreamingHprofReader Creates a StreamingHprofReader for the provided hprofFile . hprofHeader will be read from hprofFile unless you provide it. [jvm] fun readerFor (hprofSourceProvider: StreamingSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openStreamingSource() .use { HprofHeader.parseHeaderOf(it) }): StreamingHprofReader Creates a StreamingHprofReader that will call StreamingSourceProvider.openStreamingSource on every readRecords to obtain a Source to read the hprof data from. Before reading the hprof records, StreamingHprofReader will skip HprofHeader.recordsPosition bytes.","title":"Functions"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/-companion/reader-for/","text":"// shark-hprof / shark / StreamingHprofReader / Companion / readerFor readerFor \u00b6 [jvm]\\ fun readerFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): StreamingHprofReader Creates a StreamingHprofReader for the provided hprofFile . hprofHeader will be read from hprofFile unless you provide it. [jvm]\\ fun readerFor (hprofSourceProvider: StreamingSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openStreamingSource() .use { HprofHeader.parseHeaderOf(it) }): StreamingHprofReader Creates a StreamingHprofReader that will call StreamingSourceProvider.openStreamingSource on every readRecords to obtain a Source to read the hprof data from. Before reading the hprof records, StreamingHprofReader will skip HprofHeader.recordsPosition bytes.","title":"Reader for"},{"location":"api/shark-hprof/shark/-streaming-hprof-reader/-companion/reader-for/#readerfor","text":"[jvm]\\ fun readerFor (hprofFile: File , hprofHeader: HprofHeader = HprofHeader.parseHeaderOf(hprofFile)): StreamingHprofReader Creates a StreamingHprofReader for the provided hprofFile . hprofHeader will be read from hprofFile unless you provide it. [jvm]\\ fun readerFor (hprofSourceProvider: StreamingSourceProvider , hprofHeader: HprofHeader = hprofSourceProvider.openStreamingSource() .use { HprofHeader.parseHeaderOf(it) }): StreamingHprofReader Creates a StreamingHprofReader that will call StreamingSourceProvider.openStreamingSource on every readRecords to obtain a Source to read the hprof data from. Before reading the hprof records, StreamingHprofReader will skip HprofHeader.recordsPosition bytes.","title":"readerFor"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/","text":"// shark-hprof / shark / StreamingRecordReaderAdapter StreamingRecordReaderAdapter \u00b6 [jvm]\\ class StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader ) Wraps a StreamingHprofReader to provide a higher level API that streams HprofRecord instances. Constructors \u00b6 StreamingRecordReaderAdapter [jvm] fun StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader ) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary readRecords [jvm] fun readRecords (recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTypes .","title":"Index"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/#streamingrecordreaderadapter","text":"[jvm]\\ class StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader ) Wraps a StreamingHprofReader to provide a higher level API that streams HprofRecord instances.","title":"StreamingRecordReaderAdapter"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/#constructors","text":"StreamingRecordReaderAdapter [jvm] fun StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader )","title":"Constructors"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/#functions","text":"Name Summary readRecords [jvm] fun readRecords (recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTypes .","title":"Functions"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-streaming-record-reader-adapter/","text":"// shark-hprof / shark / StreamingRecordReaderAdapter / StreamingRecordReaderAdapter StreamingRecordReaderAdapter \u00b6 [jvm]\\ fun StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader )","title":" streaming record reader adapter"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-streaming-record-reader-adapter/#streamingrecordreaderadapter","text":"[jvm]\\ fun StreamingRecordReaderAdapter (streamingHprofReader: StreamingHprofReader )","title":"StreamingRecordReaderAdapter"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/read-records/","text":"// shark-hprof / shark / StreamingRecordReaderAdapter / readRecords readRecords \u00b6 [jvm]\\ fun readRecords (recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTypes . Return \u00b6 the number of bytes read from the source","title":"Read records"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/read-records/#readrecords","text":"[jvm]\\ fun readRecords (recordTypes: Set < KClass <out HprofRecord >>, listener: OnHprofRecordListener ): Long Obtains a new source to read all hprof records from and calls listener back for each record that matches one of the provided recordTypes .","title":"readRecords"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/read-records/#return","text":"the number of bytes read from the source","title":"Return"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-companion/","text":"// shark-hprof / shark / StreamingRecordReaderAdapter / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary asHprofTags [jvm] fun Set < KClass <out HprofRecord >>. asHprofTags (): EnumSet < HprofRecordTag > asStreamingRecordReader [jvm] fun StreamingHprofReader . asStreamingRecordReader (): StreamingRecordReaderAdapter","title":"Index"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-companion/#functions","text":"Name Summary asHprofTags [jvm] fun Set < KClass <out HprofRecord >>. asHprofTags (): EnumSet < HprofRecordTag > asStreamingRecordReader [jvm] fun StreamingHprofReader . asStreamingRecordReader (): StreamingRecordReaderAdapter","title":"Functions"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-companion/as-hprof-tags/","text":"// shark-hprof / shark / StreamingRecordReaderAdapter / Companion / asHprofTags asHprofTags \u00b6 [jvm]\\ fun Set < KClass <out HprofRecord >>. asHprofTags (): EnumSet < HprofRecordTag >","title":"As hprof tags"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-companion/as-hprof-tags/#ashproftags","text":"[jvm]\\ fun Set < KClass <out HprofRecord >>. asHprofTags (): EnumSet < HprofRecordTag >","title":"asHprofTags"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-companion/as-streaming-record-reader/","text":"// shark-hprof / shark / StreamingRecordReaderAdapter / Companion / asStreamingRecordReader asStreamingRecordReader \u00b6 [jvm]\\ fun StreamingHprofReader . asStreamingRecordReader (): StreamingRecordReaderAdapter","title":"As streaming record reader"},{"location":"api/shark-hprof/shark/-streaming-record-reader-adapter/-companion/as-streaming-record-reader/#asstreamingrecordreader","text":"[jvm]\\ fun StreamingHprofReader . asStreamingRecordReader (): StreamingRecordReaderAdapter","title":"asStreamingRecordReader"},{"location":"api/shark-hprof/shark/-streaming-source-provider/","text":"// shark-hprof / shark / StreamingSourceProvider StreamingSourceProvider \u00b6 [jvm]\\ fun interface StreamingSourceProvider Can open Source instances. Functions \u00b6 Name Summary openStreamingSource [jvm] abstract fun openStreamingSource (): BufferedSource Inheritors \u00b6 Name DualSourceProvider","title":"Index"},{"location":"api/shark-hprof/shark/-streaming-source-provider/#streamingsourceprovider","text":"[jvm]\\ fun interface StreamingSourceProvider Can open Source instances.","title":"StreamingSourceProvider"},{"location":"api/shark-hprof/shark/-streaming-source-provider/#functions","text":"Name Summary openStreamingSource [jvm] abstract fun openStreamingSource (): BufferedSource","title":"Functions"},{"location":"api/shark-hprof/shark/-streaming-source-provider/#inheritors","text":"Name DualSourceProvider","title":"Inheritors"},{"location":"api/shark-hprof/shark/-streaming-source-provider/open-streaming-source/","text":"// shark-hprof / shark / StreamingSourceProvider / openStreamingSource openStreamingSource \u00b6 [jvm]\\ abstract fun openStreamingSource (): BufferedSource","title":"Open streaming source"},{"location":"api/shark-hprof/shark/-streaming-source-provider/open-streaming-source/#openstreamingsource","text":"[jvm]\\ abstract fun openStreamingSource (): BufferedSource","title":"openStreamingSource"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/","text":"// shark-hprof / shark / ThrowingCancelableFileSourceProvider ThrowingCancelableFileSourceProvider \u00b6 [jvm]\\ class ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable ) : DualSourceProvider A DualSourceProvider that invokes throwIfCanceled before every read, allowing cancellation of IO based work built on top by throwing an exception. Constructors \u00b6 ThrowingCancelableFileSourceProvider [jvm] fun ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable ) Functions \u00b6 Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource","title":"Index"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/#throwingcancelablefilesourceprovider","text":"[jvm]\\ class ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable ) : DualSourceProvider A DualSourceProvider that invokes throwIfCanceled before every read, allowing cancellation of IO based work built on top by throwing an exception.","title":"ThrowingCancelableFileSourceProvider"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/#constructors","text":"ThrowingCancelableFileSourceProvider [jvm] fun ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable )","title":"Constructors"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/#functions","text":"Name Summary openRandomAccessSource [jvm] open override fun openRandomAccessSource (): RandomAccessSource openStreamingSource [jvm] open override fun openStreamingSource (): BufferedSource","title":"Functions"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/-throwing-cancelable-file-source-provider/","text":"// shark-hprof / shark / ThrowingCancelableFileSourceProvider / ThrowingCancelableFileSourceProvider ThrowingCancelableFileSourceProvider \u00b6 [jvm]\\ fun ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable )","title":" throwing cancelable file source provider"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/-throwing-cancelable-file-source-provider/#throwingcancelablefilesourceprovider","text":"[jvm]\\ fun ThrowingCancelableFileSourceProvider (file: File , throwIfCanceled: Runnable )","title":"ThrowingCancelableFileSourceProvider"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/open-random-access-source/","text":"// shark-hprof / shark / ThrowingCancelableFileSourceProvider / openRandomAccessSource openRandomAccessSource \u00b6 [jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"Open random access source"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/open-random-access-source/#openrandomaccesssource","text":"[jvm]\\ open override fun openRandomAccessSource (): RandomAccessSource","title":"openRandomAccessSource"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/open-streaming-source/","text":"// shark-hprof / shark / ThrowingCancelableFileSourceProvider / openStreamingSource openStreamingSource \u00b6 [jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"Open streaming source"},{"location":"api/shark-hprof/shark/-throwing-cancelable-file-source-provider/open-streaming-source/#openstreamingsource","text":"[jvm]\\ open override fun openStreamingSource (): BufferedSource","title":"openStreamingSource"},{"location":"api/shark-hprof/shark/-value-holder/","text":"// shark-hprof / shark / ValueHolder ValueHolder \u00b6 [jvm]\\ sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type. Types \u00b6 Name Summary BooleanHolder [jvm] data class BooleanHolder (value: Boolean ) : ValueHolder ByteHolder [jvm] data class ByteHolder (value: Byte ) : ValueHolder CharHolder [jvm] data class CharHolder (value: Char ) : ValueHolder Companion [jvm] object Companion DoubleHolder [jvm] data class DoubleHolder (value: Double ) : ValueHolder FloatHolder [jvm] data class FloatHolder (value: Float ) : ValueHolder IntHolder [jvm] data class IntHolder (value: Int ) : ValueHolder LongHolder [jvm] data class LongHolder (value: Long ) : ValueHolder ReferenceHolder [jvm] data class ReferenceHolder (value: Long ) : ValueHolder ShortHolder [jvm] data class ShortHolder (value: Short ) : ValueHolder Inheritors \u00b6 Name ReferenceHolder BooleanHolder CharHolder FloatHolder DoubleHolder ByteHolder ShortHolder IntHolder LongHolder","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/#valueholder","text":"[jvm]\\ sealed class ValueHolder A value in the heap dump, which can be a ReferenceHolder or a primitive type.","title":"ValueHolder"},{"location":"api/shark-hprof/shark/-value-holder/#types","text":"Name Summary BooleanHolder [jvm] data class BooleanHolder (value: Boolean ) : ValueHolder ByteHolder [jvm] data class ByteHolder (value: Byte ) : ValueHolder CharHolder [jvm] data class CharHolder (value: Char ) : ValueHolder Companion [jvm] object Companion DoubleHolder [jvm] data class DoubleHolder (value: Double ) : ValueHolder FloatHolder [jvm] data class FloatHolder (value: Float ) : ValueHolder IntHolder [jvm] data class IntHolder (value: Int ) : ValueHolder LongHolder [jvm] data class LongHolder (value: Long ) : ValueHolder ReferenceHolder [jvm] data class ReferenceHolder (value: Long ) : ValueHolder ShortHolder [jvm] data class ShortHolder (value: Short ) : ValueHolder","title":"Types"},{"location":"api/shark-hprof/shark/-value-holder/#inheritors","text":"Name ReferenceHolder BooleanHolder CharHolder FloatHolder DoubleHolder ByteHolder ShortHolder IntHolder LongHolder","title":"Inheritors"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/","text":"// shark-hprof / shark / ValueHolder / BooleanHolder BooleanHolder \u00b6 [jvm]\\ data class BooleanHolder (value: Boolean ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Boolean","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#booleanholder","text":"[jvm]\\ data class BooleanHolder (value: Boolean ) : ValueHolder","title":"BooleanHolder"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/#properties","text":"Name Summary value [jvm] val value : Boolean","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/-boolean-holder/","text":"// shark-hprof / shark / ValueHolder / BooleanHolder / BooleanHolder BooleanHolder \u00b6 [jvm]\\ fun BooleanHolder (value: Boolean )","title":" boolean holder"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/-boolean-holder/#booleanholder","text":"[jvm]\\ fun BooleanHolder (value: Boolean )","title":"BooleanHolder"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/value/","text":"// shark-hprof / shark / ValueHolder / BooleanHolder / value value \u00b6 [jvm]\\ val value : Boolean","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-boolean-holder/value/#value","text":"[jvm]\\ val value : Boolean","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/","text":"// shark-hprof / shark / ValueHolder / ByteHolder ByteHolder \u00b6 [jvm]\\ data class ByteHolder (value: Byte ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Byte","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#byteholder","text":"[jvm]\\ data class ByteHolder (value: Byte ) : ValueHolder","title":"ByteHolder"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/#properties","text":"Name Summary value [jvm] val value : Byte","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/-byte-holder/","text":"// shark-hprof / shark / ValueHolder / ByteHolder / ByteHolder ByteHolder \u00b6 [jvm]\\ fun ByteHolder (value: Byte )","title":" byte holder"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/-byte-holder/#byteholder","text":"[jvm]\\ fun ByteHolder (value: Byte )","title":"ByteHolder"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/value/","text":"// shark-hprof / shark / ValueHolder / ByteHolder / value value \u00b6 [jvm]\\ val value : Byte","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-byte-holder/value/#value","text":"[jvm]\\ val value : Byte","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/","text":"// shark-hprof / shark / ValueHolder / CharHolder CharHolder \u00b6 [jvm]\\ data class CharHolder (value: Char ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Char","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#charholder","text":"[jvm]\\ data class CharHolder (value: Char ) : ValueHolder","title":"CharHolder"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/#properties","text":"Name Summary value [jvm] val value : Char","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/-char-holder/","text":"// shark-hprof / shark / ValueHolder / CharHolder / CharHolder CharHolder \u00b6 [jvm]\\ fun CharHolder (value: Char )","title":" char holder"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/-char-holder/#charholder","text":"[jvm]\\ fun CharHolder (value: Char )","title":"CharHolder"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/value/","text":"// shark-hprof / shark / ValueHolder / CharHolder / value value \u00b6 [jvm]\\ val value : Char","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-char-holder/value/#value","text":"[jvm]\\ val value : Char","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-companion/","text":"// shark-hprof / shark / ValueHolder / Companion Companion \u00b6 [jvm]\\ object Companion Properties \u00b6 Name Summary NULL_REFERENCE [jvm] const val NULL_REFERENCE : Long = 0","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"api/shark-hprof/shark/-value-holder/-companion/#properties","text":"Name Summary NULL_REFERENCE [jvm] const val NULL_REFERENCE : Long = 0","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-companion/-n-u-l-l_-r-e-f-e-r-e-n-c-e/","text":"// shark-hprof / shark / ValueHolder / Companion / NULL_REFERENCE NULL_REFERENCE \u00b6 [jvm]\\ const val NULL_REFERENCE : Long = 0","title":" n u l l  r e f e r e n c e"},{"location":"api/shark-hprof/shark/-value-holder/-companion/-n-u-l-l_-r-e-f-e-r-e-n-c-e/#null_reference","text":"[jvm]\\ const val NULL_REFERENCE : Long = 0","title":"NULL_REFERENCE"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/","text":"// shark-hprof / shark / ValueHolder / DoubleHolder DoubleHolder \u00b6 [jvm]\\ data class DoubleHolder (value: Double ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Double","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#doubleholder","text":"[jvm]\\ data class DoubleHolder (value: Double ) : ValueHolder","title":"DoubleHolder"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/#properties","text":"Name Summary value [jvm] val value : Double","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/-double-holder/","text":"// shark-hprof / shark / ValueHolder / DoubleHolder / DoubleHolder DoubleHolder \u00b6 [jvm]\\ fun DoubleHolder (value: Double )","title":" double holder"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/-double-holder/#doubleholder","text":"[jvm]\\ fun DoubleHolder (value: Double )","title":"DoubleHolder"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/value/","text":"// shark-hprof / shark / ValueHolder / DoubleHolder / value value \u00b6 [jvm]\\ val value : Double","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-double-holder/value/#value","text":"[jvm]\\ val value : Double","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/","text":"// shark-hprof / shark / ValueHolder / FloatHolder FloatHolder \u00b6 [jvm]\\ data class FloatHolder (value: Float ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Float","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#floatholder","text":"[jvm]\\ data class FloatHolder (value: Float ) : ValueHolder","title":"FloatHolder"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/#properties","text":"Name Summary value [jvm] val value : Float","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/-float-holder/","text":"// shark-hprof / shark / ValueHolder / FloatHolder / FloatHolder FloatHolder \u00b6 [jvm]\\ fun FloatHolder (value: Float )","title":" float holder"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/-float-holder/#floatholder","text":"[jvm]\\ fun FloatHolder (value: Float )","title":"FloatHolder"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/value/","text":"// shark-hprof / shark / ValueHolder / FloatHolder / value value \u00b6 [jvm]\\ val value : Float","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-float-holder/value/#value","text":"[jvm]\\ val value : Float","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/","text":"// shark-hprof / shark / ValueHolder / IntHolder IntHolder \u00b6 [jvm]\\ data class IntHolder (value: Int ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Int","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#intholder","text":"[jvm]\\ data class IntHolder (value: Int ) : ValueHolder","title":"IntHolder"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/#properties","text":"Name Summary value [jvm] val value : Int","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/-int-holder/","text":"// shark-hprof / shark / ValueHolder / IntHolder / IntHolder IntHolder \u00b6 [jvm]\\ fun IntHolder (value: Int )","title":" int holder"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/-int-holder/#intholder","text":"[jvm]\\ fun IntHolder (value: Int )","title":"IntHolder"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/value/","text":"// shark-hprof / shark / ValueHolder / IntHolder / value value \u00b6 [jvm]\\ val value : Int","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-int-holder/value/#value","text":"[jvm]\\ val value : Int","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/","text":"// shark-hprof / shark / ValueHolder / LongHolder LongHolder \u00b6 [jvm]\\ data class LongHolder (value: Long ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Long","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#longholder","text":"[jvm]\\ data class LongHolder (value: Long ) : ValueHolder","title":"LongHolder"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/#properties","text":"Name Summary value [jvm] val value : Long","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/-long-holder/","text":"// shark-hprof / shark / ValueHolder / LongHolder / LongHolder LongHolder \u00b6 [jvm]\\ fun LongHolder (value: Long )","title":" long holder"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/-long-holder/#longholder","text":"[jvm]\\ fun LongHolder (value: Long )","title":"LongHolder"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/value/","text":"// shark-hprof / shark / ValueHolder / LongHolder / value value \u00b6 [jvm]\\ val value : Long","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-long-holder/value/#value","text":"[jvm]\\ val value : Long","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/","text":"// shark-hprof / shark / ValueHolder / ReferenceHolder ReferenceHolder \u00b6 [jvm]\\ data class ReferenceHolder (value: Long ) : ValueHolder Properties \u00b6 Name Summary isNull [jvm] val isNull : Boolean value [jvm] val value : Long","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#referenceholder","text":"[jvm]\\ data class ReferenceHolder (value: Long ) : ValueHolder","title":"ReferenceHolder"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/#properties","text":"Name Summary isNull [jvm] val isNull : Boolean value [jvm] val value : Long","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/-reference-holder/","text":"// shark-hprof / shark / ValueHolder / ReferenceHolder / ReferenceHolder ReferenceHolder \u00b6 [jvm]\\ fun ReferenceHolder (value: Long )","title":" reference holder"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/-reference-holder/#referenceholder","text":"[jvm]\\ fun ReferenceHolder (value: Long )","title":"ReferenceHolder"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/is-null/","text":"// shark-hprof / shark / ValueHolder / ReferenceHolder / isNull isNull \u00b6 [jvm]\\ val isNull : Boolean","title":"Is null"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/is-null/#isnull","text":"[jvm]\\ val isNull : Boolean","title":"isNull"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/value/","text":"// shark-hprof / shark / ValueHolder / ReferenceHolder / value value \u00b6 [jvm]\\ val value : Long","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-reference-holder/value/#value","text":"[jvm]\\ val value : Long","title":"value"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/","text":"// shark-hprof / shark / ValueHolder / ShortHolder ShortHolder \u00b6 [jvm]\\ data class ShortHolder (value: Short ) : ValueHolder Properties \u00b6 Name Summary value [jvm] val value : Short","title":"Index"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#shortholder","text":"[jvm]\\ data class ShortHolder (value: Short ) : ValueHolder","title":"ShortHolder"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/#properties","text":"Name Summary value [jvm] val value : Short","title":"Properties"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/-short-holder/","text":"// shark-hprof / shark / ValueHolder / ShortHolder / ShortHolder ShortHolder \u00b6 [jvm]\\ fun ShortHolder (value: Short )","title":" short holder"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/-short-holder/#shortholder","text":"[jvm]\\ fun ShortHolder (value: Short )","title":"ShortHolder"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/value/","text":"// shark-hprof / shark / ValueHolder / ShortHolder / value value \u00b6 [jvm]\\ val value : Short","title":"Value"},{"location":"api/shark-hprof/shark/-value-holder/-short-holder/value/#value","text":"[jvm]\\ val value : Short","title":"value"},{"location":"api/shark-log/shark/","text":"// shark-log / shark Package shark \u00b6 Types \u00b6 Name Summary SharkLog [jvm] object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Core: Logs"},{"location":"api/shark-log/shark/#package-shark","text":"","title":"Package shark"},{"location":"api/shark-log/shark/#types","text":"Name Summary SharkLog [jvm] object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"Types"},{"location":"api/shark-log/shark/-shark-log/","text":"// shark-log / shark / SharkLog SharkLog \u00b6 [jvm]\\ object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go. Types \u00b6 Name Summary Logger [jvm] interface Logger Functions \u00b6 Name Summary d [jvm] inline fun d (message: () -> String ) inline fun d (throwable: Throwable , message: () -> String ) Properties \u00b6 Name Summary logger [jvm] @ Volatile var logger : SharkLog.Logger ? = null","title":"Index"},{"location":"api/shark-log/shark/-shark-log/#sharklog","text":"[jvm]\\ object SharkLog Central Logger for all Shark artifacts. Set logger to change where these logs go.","title":"SharkLog"},{"location":"api/shark-log/shark/-shark-log/#types","text":"Name Summary Logger [jvm] interface Logger","title":"Types"},{"location":"api/shark-log/shark/-shark-log/#functions","text":"Name Summary d [jvm] inline fun d (message: () -> String ) inline fun d (throwable: Throwable , message: () -> String )","title":"Functions"},{"location":"api/shark-log/shark/-shark-log/#properties","text":"Name Summary logger [jvm] @ Volatile var logger : SharkLog.Logger ? = null","title":"Properties"},{"location":"api/shark-log/shark/-shark-log/d/","text":"// shark-log / shark / SharkLog / d d \u00b6 [jvm]\\ inline fun d (message: () -> String ) inline fun d (throwable: Throwable , message: () -> String ) See also \u00b6 jvm shark.SharkLog.Logger","title":"D"},{"location":"api/shark-log/shark/-shark-log/d/#d","text":"[jvm]\\ inline fun d (message: () -> String ) inline fun d (throwable: Throwable , message: () -> String )","title":"d"},{"location":"api/shark-log/shark/-shark-log/d/#see-also","text":"jvm shark.SharkLog.Logger","title":"See also"},{"location":"api/shark-log/shark/-shark-log/logger/","text":"// shark-log / shark / SharkLog / logger logger \u00b6 [jvm]\\ @ Volatile var logger : SharkLog.Logger ? = null","title":"Logger"},{"location":"api/shark-log/shark/-shark-log/logger/#logger","text":"[jvm]\\ @ Volatile var logger : SharkLog.Logger ? = null","title":"logger"},{"location":"api/shark-log/shark/-shark-log/-logger/","text":"// shark-log / shark / SharkLog / Logger Logger \u00b6 [jvm]\\ interface Logger See also \u00b6 jvm shark.SharkLog Functions \u00b6 Name Summary d [jvm] abstract fun d (message: String ) Logs a debug message formatted with the passed in arguments. [jvm] abstract fun d (throwable: Throwable , message: String ) Logs a Throwable and debug message formatted with the passed in arguments.","title":"Index"},{"location":"api/shark-log/shark/-shark-log/-logger/#logger","text":"[jvm]\\ interface Logger","title":"Logger"},{"location":"api/shark-log/shark/-shark-log/-logger/#see-also","text":"jvm shark.SharkLog","title":"See also"},{"location":"api/shark-log/shark/-shark-log/-logger/#functions","text":"Name Summary d [jvm] abstract fun d (message: String ) Logs a debug message formatted with the passed in arguments. [jvm] abstract fun d (throwable: Throwable , message: String ) Logs a Throwable and debug message formatted with the passed in arguments.","title":"Functions"},{"location":"api/shark-log/shark/-shark-log/-logger/d/","text":"// shark-log / shark / SharkLog / Logger / d d \u00b6 [jvm]\\ abstract fun d (message: String ) Logs a debug message formatted with the passed in arguments. [jvm]\\ abstract fun d (throwable: Throwable , message: String ) Logs a Throwable and debug message formatted with the passed in arguments.","title":"D"},{"location":"api/shark-log/shark/-shark-log/-logger/d/#d","text":"[jvm]\\ abstract fun d (message: String ) Logs a debug message formatted with the passed in arguments. [jvm]\\ abstract fun d (throwable: Throwable , message: String ) Logs a Throwable and debug message formatted with the passed in arguments.","title":"d"}]}